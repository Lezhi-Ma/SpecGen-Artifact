public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:325: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:226:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:226: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:325:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n < 1
  //@ requires n < 1;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:324: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:225:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:225: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:324:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n <= 1
  //@ requires n <= 1;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:323: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:224:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:224: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:323:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n == 1
  //@ requires n == 1;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:322: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:223:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:223: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:322:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:321: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:222:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:222: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:321:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n >= 1
  //@ requires n >= 1;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:320: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:221:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:221: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:320:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n > 1
  //@ requires n > 1;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:319: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:220:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:220: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:319:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n < 0
  //@ requires n < 0;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:318: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:219:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:318:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n <= 0
  //@ requires n <= 0;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:317: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:218:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:218: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:317:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n == 0
  //@ requires n == 0;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:316: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:217:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:217: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:316:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != 0
  //@ requires n != 0;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:315: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:216:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:216: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:315:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n >= 0
  //@ requires n >= 0;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:314: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:215:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:215: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:314:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n > 0
  //@ requires n > 0;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:313: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:214:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:214: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:313:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n < -1
  //@ requires n < -1;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:312: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:213:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:213: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:312:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n <= -1
  //@ requires n <= -1;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:311: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:212:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:311:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n == -1
  //@ requires n == -1;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:289:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:289: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:215: verify: Precondition conjunct is false: n < 1
  //@ requires n < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:310: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:310:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:288:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:288: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:215: verify: Precondition conjunct is false: n <= 1
  //@ requires n <= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:309: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:309:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:287:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:287: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:215: verify: Precondition conjunct is false: n == 1
  //@ requires n == 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:308: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:308:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:286:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:286: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:215: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:307: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:307:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:285:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:285: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:215: verify: Precondition conjunct is false: n >= 1
  //@ requires n >= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:306: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:306:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:284:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:284: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:215: verify: Precondition conjunct is false: n > 1
  //@ requires n > 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:305: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:305:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:283:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:283: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:215: verify: Precondition conjunct is false: n < 0
  //@ requires n < 0;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:304: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:304:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:282:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:282: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:215: verify: Precondition conjunct is false: n <= 0
  //@ requires n <= 0;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:303: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:303:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:281:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:281: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:215: verify: Precondition conjunct is false: n == 0
  //@ requires n == 0;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:302: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:302:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:280:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:280: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:215: verify: Precondition conjunct is false: n != 0
  //@ requires n != 0;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:301: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:301:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:279:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:279: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:216: verify: Precondition conjunct is false: n > 0
  //@ requires n > 0;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:300: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:300:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:278:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:278: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:216: verify: Precondition conjunct is false: n < -1
  //@ requires n < -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:299: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:299:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:277:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:277: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:216: verify: Precondition conjunct is false: n <= -1
  //@ requires n <= -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:298: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:298:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:276:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:276: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:216: verify: Precondition conjunct is false: n == -1
  //@ requires n == -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:297: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:297:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:275:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:275: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: Precondition conjunct is false: m < 1
  //@ requires m < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:296: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:296:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:274:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:274: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: Precondition conjunct is false: m <= 1
  //@ requires m <= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:295: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:295:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:273:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:273: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: Precondition conjunct is false: m == 1
  //@ requires m == 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:294: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:294:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:272:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:272: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: Precondition conjunct is false: m != 1
  //@ requires m != 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:293: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:293:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:271:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:271: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: Precondition conjunct is false: m >= 1
  //@ requires m >= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:292: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:292:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:270:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:270: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: Precondition conjunct is false: m > 1
  //@ requires m > 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:291: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:291:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:269:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:269: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: Precondition conjunct is false: m < 0
  //@ requires m < 0;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:290: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:290:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:268:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:268: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: Precondition conjunct is false: m <= 0
  //@ requires m <= 0;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:289: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:289:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:267:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:267: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: Precondition conjunct is false: m == 0
  //@ requires m == 0;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:288: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:288:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:266:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:266: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: Precondition conjunct is false: m != 0
  //@ requires m != 0;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:287: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:287:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:265:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:265: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: Precondition conjunct is false: m >= 0
  //@ requires m >= 0;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:286: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:286:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:264:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:264: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: Precondition conjunct is false: m > 0
  //@ requires m > 0;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:285: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:285:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:263:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:263: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: Precondition conjunct is false: m < -1
  //@ requires m < -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:284: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:284:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:262:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:262: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: Precondition conjunct is false: m <= -1
  //@ requires m <= -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:283: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:283:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:261:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:261: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: Precondition conjunct is false: m == -1
  //@ requires m == -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:282: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:282:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:260:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:260: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: Precondition conjunct is false: m != -1
  //@ requires m != -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:281: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:281:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:259:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:259: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:220: verify: Precondition conjunct is false: m > -1
  //@ requires m > -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:280: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:280:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:258:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:258: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:222: verify: Precondition conjunct is false: m == n
  //@ requires m == n;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:279: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:279:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:257:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:257: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:223: verify: Precondition conjunct is false: m >= n
  //@ requires m >= n;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:278: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:278:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:256:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:256: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:223: verify: Precondition conjunct is false: m > n
  //@ requires m > n;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:277: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:277:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:257: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:223:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:223: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:257:
  //@ ensures \result < m;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:276: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:276:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:256: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:223:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:223: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:256:
  //@ ensures \result <= m;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:275: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:275:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:255: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:223:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:223: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:255:
  //@ ensures \result == m;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:274: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:274:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:254: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:228:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:228: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:254:
  //@ ensures \result == 1;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:273: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:273:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:253: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:229:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:229: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:253:
  //@ ensures \result >= 1;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:272: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:272:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:252: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:229:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:229: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:252:
  //@ ensures \result > 1;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:271: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:271:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:251: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:229:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:229: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:251:
  //@ ensures \result < 0;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:270: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:270:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:250: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:231:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:231: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:250:
  //@ ensures \result != 0;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:269: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:269:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:249: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:232:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:232: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:249:
  //@ ensures \result > 0;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:268: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:268:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:248: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:232:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:232: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:248:
  //@ ensures \result < -1;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:267: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:267:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:247: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:232:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:232: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:247:
  //@ ensures \result <= -1;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:266: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:266:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:246: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:232:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:232: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:246:
  //@ ensures \result == -1;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:265: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:265:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:245: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:235:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:235: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:245:
  //@ ensures \result < n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:264: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:264:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:244: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:237:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:237: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:244:
  //@ ensures \result != n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:263: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:263:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:243: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:238:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:238: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:243:
  //@ ensures \result > n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:262: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:262:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:188:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:188: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  //@ ensures \result == 1;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:242: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:236:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:236: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:242:
  //@ ensures \result == n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:261: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:261:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
7 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:189:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:189: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:211:
  //@ ensures \result >= 1;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:241: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:235:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:235: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:241:
  //@ ensures \result == n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:260: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:210:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:210: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:260:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
7 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:210: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:189:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:189: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:210:
  //@ ensures \result > 1;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:240: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:234:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:234: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:240:
  //@ ensures \result == n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:259: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:209:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:209: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:259:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
7 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:209: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:189:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:189: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:209:
  //@ ensures \result < 0;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:239: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:233:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:233: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:239:
  //@ ensures \result == n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:258: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:208:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:208: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:258:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
7 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:208: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:191:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:191: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:208:
  //@ ensures \result != 0;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:238: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:232:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:232: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:238:
  //@ ensures \result == n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:257: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:207:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:207: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:257:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
7 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:207: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:192:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:192: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:207:
  //@ ensures \result > 0;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:237: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:231:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:231: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:237:
  //@ ensures \result == n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:256: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:206:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:206: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:256:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
7 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:206: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:192:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:192: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:206:
  //@ ensures \result < -1;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:236: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:230:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:230: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:236:
  //@ ensures \result == n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:255: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:205:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:205: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:255:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
7 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:205: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:192:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:192: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:205:
  //@ ensures \result <= -1;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:235: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:229:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:229: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:235:
  //@ ensures \result == n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:254: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:204:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:204: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:254:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
7 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:204: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:192:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:192: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:204:
  //@ ensures \result == -1;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:234: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:228:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:228: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:234:
  //@ ensures \result == n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:253: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:203:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:203: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:253:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
7 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:203: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:195:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:195: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:203:
  //@ ensures \result < n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:233: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:227:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:227: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:233:
  //@ ensures \result == n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:252: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:202:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:202: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:252:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
7 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:202: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:197:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:197: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:202:
  //@ ensures \result != n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:232: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:226:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:226: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:232:
  //@ ensures \result == n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:251: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:201:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:201: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:251:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
7 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:201: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:198:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:198: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:201:
  //@ ensures \result > n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:231: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:225:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:225: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:231:
  //@ ensures \result == n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:250: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:200:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:200: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:250:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
7 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:230: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:224:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:224: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:230:
  //@ ensures \result == n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:249: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:199:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:199: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:249:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:229: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:224:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:224: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:229:
  //@ ensures \result >= n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:248: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:199:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:199: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:248:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:228: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:211:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:228:
  //@ ensures \result != m;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:247: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:199:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:199: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:247:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:227: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:212:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:227:
  //@ ensures \result > m;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:246: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:199:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:199: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:246:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:200: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:196:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:196: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:200:
  //@ ensures \result == n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:233: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:166:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:166: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:233:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n < 1
  //@ requires n < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:245: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:199:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:199: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:245:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
8 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:199: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:196:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:196: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:199:
  //@ ensures \result >= n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:232: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:166:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:166: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:232:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n < 1
  //@ requires n < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:244: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:198:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:198: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:244:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
8 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:231: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:166:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:166: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:231:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n < 1
  //@ requires n < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:243: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:197:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:197: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:243:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:230: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:165:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:165: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:230:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n <= 1
  //@ requires n <= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:242: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:196:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:196: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:242:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:182: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:229: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:164:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:164: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:229:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n == 1
  //@ requires n == 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:241: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:195:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:195: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:241:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:181: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:228: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:163:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:163: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:228:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:95: verify: Precondition conjunct is false: n < 0
  //@ requires n < 0;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:240: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:194:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:194: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:240:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:180: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:227: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:162:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:162: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:227:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:95: verify: Precondition conjunct is false: n <= 0
  //@ requires n <= 0;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:239: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:193:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:193: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:239:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:179: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:226: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:161:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:161: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:226:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:95: verify: Precondition conjunct is false: n == 0
  //@ requires n == 0;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:238: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:192:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:192: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:238:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:178: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:225: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:160:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:160: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:225:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:98: verify: Precondition conjunct is false: n < -1
  //@ requires n < -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:237: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:191:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:191: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:237:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:177: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:224: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:159:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:159: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:224:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:98: verify: Precondition conjunct is false: n <= -1
  //@ requires n <= -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:236: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:190:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:190: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:236:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:176: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:223: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:158:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:223:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:98: verify: Precondition conjunct is false: n == -1
  //@ requires n == -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:235: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:189:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:189: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:235:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:175: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:222: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:157:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:157: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:222:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:101: verify: Precondition conjunct is false: m < 1
  //@ requires m < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:234: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:188:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:188: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:234:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:174: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:221: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:156:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:156: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:221:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:101: verify: Precondition conjunct is false: m <= 1
  //@ requires m <= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:233: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:187:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:187: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:233:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:173: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:220: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:155:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:220:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:101: verify: Precondition conjunct is false: m == 1
  //@ requires m == 1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:232: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:186:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:186: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:232:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:172: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:154:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:154: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:219:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:104: verify: Precondition conjunct is false: m < 0
  //@ requires m < 0;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:231: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:185:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:185: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:231:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:171: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:218: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:153:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:153: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:218:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:104: verify: Precondition conjunct is false: m <= 0
  //@ requires m <= 0;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:230: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:184:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:184: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:230:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:170: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:217: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:152:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:217:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:104: verify: Precondition conjunct is false: m == 0
  //@ requires m == 0;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:229: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:183:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:183: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:229:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:169: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:216: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:151:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:151: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:216:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:107: verify: Precondition conjunct is false: m < -1
  //@ requires m < -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:228: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:182:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:182: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:228:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:168: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:215: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:150:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:150: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:215:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:107: verify: Precondition conjunct is false: m <= -1
  //@ requires m <= -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:227: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:181:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:181: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:227:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:167: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:214: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:149:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:214:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:107: verify: Precondition conjunct is false: m == -1
  //@ requires m == -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:226: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:180:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:180: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:226:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:166: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:213: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:148:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:148: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:213:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:112: verify: Precondition conjunct is false: m == n
  //@ requires m == n;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:225: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:179:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:179: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:225:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:165: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:147:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:147: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:113: verify: Precondition conjunct is false: m >= n
  //@ requires m >= n;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:224: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:178:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:178: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:224:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:164: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:211: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:146:) in method is_prime_
        if (multiple_of(n, m) == 0) {
                       ^
/home/max/Documents/JMLGPT/tmp/Primes.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:211:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:113: verify: Precondition conjunct is false: m > n
  //@ requires m > n;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:223: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:177:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:177: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:223:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:163: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:205: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:189:) in method is_prime_
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:189: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:205:
  //@ ensures \result < 1;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:222: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:176:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:176: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:222:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:162: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
8 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:204: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:190:) in method is_prime_
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:190: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:204:
  //@ ensures \result != 1;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:221: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:176:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:176: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:221:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:162: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
8 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:203: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:190:) in method is_prime_
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:190: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:203:
  //@ ensures \result <= 0;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:220: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:176:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:176: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:220:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:162: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
8 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:202: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:190:) in method is_prime_
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:190: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:202:
  //@ ensures \result == 0;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:219: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:176:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:176: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:219:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:162: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
8 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:177: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:165:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:165: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:177:
  //@ ensures \result < 1;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:218: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:176:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:176: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:218:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:162: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
8 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:176: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:166:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:166: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:176:
  //@ ensures \result != 1;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:217: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:175:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:175: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:217:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:162: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
8 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result <= 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:175: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:166:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:166: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:175:
  //@ ensures \result <= 0;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:216: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:174:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:174: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:216:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:162: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
8 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result <= 1;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:174: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:166:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:166: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:174:
  //@ ensures \result == 0;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:215: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:173:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:173: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:215:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:162: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
8 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:214: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:172:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:172: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:214:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:162: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:213: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:171:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:171: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:213:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:162: verify: Precondition conjunct is false: n >= -1
  //@ requires n >= -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ requires n > -1;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:170:) in method main
      is_prime(i);
              ^
/home/max/Documents/JMLGPT/tmp/Primes.java:170: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:212:
  static int is_prime(int n) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:162: verify: Precondition conjunct is false: n > -1
  //@ requires n > -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:170: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:190:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:190: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:170:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:173: verify: Precondition conjunct is false: n >= 0
  //@ requires n >= 0;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:170: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:189:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:189: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:170:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:173: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:170: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:188:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:188: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:170:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:173: verify: Precondition conjunct is false: n >= -1
  //@ requires n >= -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n > -1;
  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:170: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:187:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:187: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:170:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:173: verify: Precondition conjunct is false: n > -1
  //@ requires n > -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m >= -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:170: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:186:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:186: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:170:
  static int is_prime_(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:173: verify: Precondition conjunct is false: m >= -1
  //@ requires m >= -1;
                 ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
6 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:187: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:182:) in method is_prime_
      return 0; // false
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:182: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:187:
  //@ ensures \result <= n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:170: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:167:) in method is_prime
    return is_prime_(n, n - 1);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:167: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:170:
  //@ ensures \result <= n;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
5 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:145:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:158:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:157: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:144:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:144: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:157:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:93: verify: Precondition conjunct is false: n > 1
  //@ requires n > 1;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n >= 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:156: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:143:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:156:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:108: verify: Precondition conjunct is false: m < n
  //@ requires m < n;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n >= 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:155: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:142:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:155:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:108: verify: Precondition conjunct is false: m <= n
  //@ requires m <= n;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n >= 1;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:154: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:141:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:141: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:154:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n >= 1
  //@ requires n >= 1;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:153: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:140:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:153:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:93: verify: Precondition conjunct is false: n >= 0
  //@ requires n >= 0;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 0;
  //@ requires n > 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:152: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:139:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:139: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:152:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:93: verify: Precondition conjunct is false: n > 0
  //@ requires n > 0;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 0;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:151: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:138:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:151:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:93: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 0;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:150: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:137:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:150:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:93: verify: Precondition conjunct is false: n >= -1
  //@ requires n >= -1;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 0;
  //@ requires n > -1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:149: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:136:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:149:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:93: verify: Precondition conjunct is false: n > -1
  //@ requires n > -1;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 0;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m != n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:148: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:135:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:148:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:102: verify: Precondition conjunct is false: m != n
  //@ requires m != n;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires n != 0;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:147: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:134:) in method multiple_of
    return multiple_of(n - m, m);
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:147:
  static int multiple_of(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/Primes.java:92: verify: Precondition conjunct is false: n != 0
  //@ requires n != 0;
                 ^
3 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:144: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:103:) in method multiple_of
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:144:
  //@ ensures \result == m;
      ^
2 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:143: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:104:) in method multiple_of
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:143:
  //@ ensures \result >= m;
      ^
2 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:142: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:104:) in method multiple_of
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:142:
  //@ ensures \result > m;
      ^
2 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:141: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:104:) in method multiple_of
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:141:
  //@ ensures \result < 1;
      ^
2 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:140: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:106:) in method multiple_of
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:140:
  //@ ensures \result != 1;
      ^
2 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:139: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:107:) in method multiple_of
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:139:
  //@ ensures \result > 1;
      ^
2 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:138: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:107:) in method multiple_of
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:138:
  //@ ensures \result < 0;
      ^
2 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:137: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:107:) in method multiple_of
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:137:
  //@ ensures \result <= 0;
      ^
2 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:136: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:107:) in method multiple_of
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:136:
  //@ ensures \result == 0;
      ^
2 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:135: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:110:) in method multiple_of
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:135:
  //@ ensures \result < -1;
      ^
2 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:134: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:110:) in method multiple_of
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:134:
  //@ ensures \result <= -1;
      ^
2 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:133: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:110:) in method multiple_of
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:133:
  //@ ensures \result == -1;
      ^
2 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:132: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:113:) in method multiple_of
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:132:
  //@ ensures \result < n;
      ^
2 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:131: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:113:) in method multiple_of
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:131:
  //@ ensures \result <= n;
      ^
2 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:130: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:113:) in method multiple_of
      return 1; // true
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:130:
  //@ ensures \result == n;
      ^
2 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:131: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:114:) in method multiple_of
    return multiple_of(n - m, m);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:131:
  //@ ensures \result >= n;
      ^
2 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:130: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:114:) in method multiple_of
    return multiple_of(n - m, m);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:130:
  //@ ensures \result > n;
      ^
2 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result >= m;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:166: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:146:) in method is_prime_
        return is_prime_(n, m - 1);
        ^
/home/max/Documents/JMLGPT/tmp/Primes.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:166:
  //@ ensures \result >= m;
      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:129: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:113:) in method multiple_of
    return multiple_of(n - m, m);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:129:
  //@ ensures \result != n;
      ^
4 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}


/home/max/Documents/JMLGPT/tmp/Primes.java:129: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Primes.java:113:) in method multiple_of
    return multiple_of(n - m, m);
    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:129:
  //@ ensures \result != n;
      ^
2 verification failures

public class Primes {

  // Multiplies two integers n and m
  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  // Is n a multiple of m?
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result != m;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result >= 1;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  // Is n prime?
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m != n;
  //@ ensures \result <= 1;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 15; i++)
    {
      is_prime(i);
    }
  }
  
}



