public class StringCompare04 {
  //@ */ throws java.lang.NullPointerException /* Houdini inferred exceptions
  //@ non_null
  //@ non_null
  //@ ensures \result;
  //@ ensures !\result;
  //@ exsures (java.lang.NullPointerException ex) (false);
  //@ ensures arg1 == null ==> \result;
  //@ ensures arg1 == null ==> !\result;
  //@ ensures arg1 != null ==> \result;
  //@ ensures arg1 != null ==> !\result;
  //@ ensures arg2 == null ==> \result;
  //@ ensures arg2 == null ==> !\result;
  //@ ensures arg2 != null ==> \result;
  //@ ensures arg2 != null ==> !\result;
  public static boolean f(String arg1, String arg2) {
    String s1 = new String(arg1);
    String s2 = arg2;
    return s2.compareTo(s1) == 13; // false
  }

  //@ */ throws java.lang.NullPointerException /* Houdini inferred exceptions
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f("#$%^&*123", "#$%^&*123");
    f("#$%^#*123", "#$%^#*123");
    f("fsgdhj", "fsgdhj");
    f("fsgdhj", "fsadhj");
    f("DiffBlue L1mitted", "DiffBlue L1mitted");
    f("DiffBlue Limitted", "DiffBlue L1mitted");
    f("HiiffblTe Limited", "");
  }
}


/home/max/Documents/JMLGPT/tmp/StringCompare04.java:2: error: illegal start of type
  //@ */ throws java.lang.NullPointerException /* Houdini inferred exceptions
      ^
/home/max/Documents/JMLGPT/tmp/StringCompare04.java:2: error: Embedded block comment must terminate within the JML line comment
  //@ */ throws java.lang.NullPointerException /* Houdini inferred exceptions
                                               ^
/home/max/Documents/JMLGPT/tmp/StringCompare04.java:3: error: illegal start of type
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/StringCompare04.java:5: error: ';' expected
  //@ ensures \result;
             ^
/home/max/Documents/JMLGPT/tmp/StringCompare04.java:5: error: Token \result is not a type
  //@ ensures \result;
              ^
/home/max/Documents/JMLGPT/tmp/StringCompare04.java:22: error: illegal start of type
  //@ */ throws java.lang.NullPointerException /* Houdini inferred exceptions
      ^
/home/max/Documents/JMLGPT/tmp/StringCompare04.java:22: error: unclosed comment
  //@ */ throws java.lang.NullPointerException /* Houdini inferred exceptions
                                               ^
/home/max/Documents/JMLGPT/tmp/StringCompare04.java:35: error: reached end of file while parsing
8 errors

public class StringCompare04 {
  //@ non_null
  //@ non_null
  //@ ensures \result;
  //@ ensures !\result;
  //@ exsures (java.lang.NullPointerException ex) (false);
  //@ ensures arg1 == null ==> \result;
  //@ ensures arg1 == null ==> !\result;
  //@ ensures arg1 != null ==> \result;
  //@ ensures arg1 != null ==> !\result;
  //@ ensures arg2 == null ==> \result;
  //@ ensures arg2 == null ==> !\result;
  //@ ensures arg2 != null ==> \result;
  //@ ensures arg2 != null ==> !\result;
  public static boolean f(String arg1, String arg2) {
    String s1 = new String(arg1);
    String s2 = arg2;
    return s2.compareTo(s1) == 13; // false
  }

  //@ */ throws java.lang.NullPointerException /* Houdini inferred exceptions
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f("#$%^&*123", "#$%^&*123");
    f("#$%^#*123", "#$%^#*123");
    f("fsgdhj", "fsgdhj");
    f("fsgdhj", "fsadhj");
    f("DiffBlue L1mitted", "DiffBlue L1mitted");
    f("DiffBlue Limitted", "DiffBlue L1mitted");
    f("HiiffblTe Limited", "");
  }
}


/home/max/Documents/JMLGPT/tmp/StringCompare04.java:2: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/StringCompare04.java:21: error: illegal start of type
  //@ */ throws java.lang.NullPointerException /* Houdini inferred exceptions
      ^
/home/max/Documents/JMLGPT/tmp/StringCompare04.java:21: error: unclosed comment
  //@ */ throws java.lang.NullPointerException /* Houdini inferred exceptions
                                               ^
/home/max/Documents/JMLGPT/tmp/StringCompare04.java:34: error: reached end of file while parsing
4 errors

public class StringCompare04 {
  //@ non_null
  //@ ensures \result;
  //@ ensures !\result;
  //@ exsures (java.lang.NullPointerException ex) (false);
  //@ ensures arg1 == null ==> \result;
  //@ ensures arg1 == null ==> !\result;
  //@ ensures arg1 != null ==> \result;
  //@ ensures arg1 != null ==> !\result;
  //@ ensures arg2 == null ==> \result;
  //@ ensures arg2 == null ==> !\result;
  //@ ensures arg2 != null ==> \result;
  //@ ensures arg2 != null ==> !\result;
  public static boolean f(String arg1, String arg2) {
    String s1 = new String(arg1);
    String s2 = arg2;
    return s2.compareTo(s1) == 13; // false
  }

  //@ */ throws java.lang.NullPointerException /* Houdini inferred exceptions
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f("#$%^&*123", "#$%^&*123");
    f("#$%^#*123", "#$%^#*123");
    f("fsgdhj", "fsgdhj");
    f("fsgdhj", "fsadhj");
    f("DiffBlue L1mitted", "DiffBlue L1mitted");
    f("DiffBlue Limitted", "DiffBlue L1mitted");
    f("HiiffblTe Limited", "");
  }
}


/home/max/Documents/JMLGPT/tmp/StringCompare04.java:2: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/StringCompare04.java:20: error: illegal start of type
  //@ */ throws java.lang.NullPointerException /* Houdini inferred exceptions
      ^
/home/max/Documents/JMLGPT/tmp/StringCompare04.java:20: error: unclosed comment
  //@ */ throws java.lang.NullPointerException /* Houdini inferred exceptions
                                               ^
/home/max/Documents/JMLGPT/tmp/StringCompare04.java:33: error: reached end of file while parsing
4 errors

public class StringCompare04 {
  //@ ensures \result;
  //@ ensures !\result;
  //@ exsures (java.lang.NullPointerException ex) (false);
  //@ ensures arg1 == null ==> \result;
  //@ ensures arg1 == null ==> !\result;
  //@ ensures arg1 != null ==> \result;
  //@ ensures arg1 != null ==> !\result;
  //@ ensures arg2 == null ==> \result;
  //@ ensures arg2 == null ==> !\result;
  //@ ensures arg2 != null ==> \result;
  //@ ensures arg2 != null ==> !\result;
  public static boolean f(String arg1, String arg2) {
    String s1 = new String(arg1);
    String s2 = arg2;
    return s2.compareTo(s1) == 13; // false
  }

  //@ */ throws java.lang.NullPointerException /* Houdini inferred exceptions
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f("#$%^&*123", "#$%^&*123");
    f("#$%^#*123", "#$%^#*123");
    f("fsgdhj", "fsgdhj");
    f("fsgdhj", "fsadhj");
    f("DiffBlue L1mitted", "DiffBlue L1mitted");
    f("DiffBlue Limitted", "DiffBlue L1mitted");
    f("HiiffblTe Limited", "");
  }
}


/home/max/Documents/JMLGPT/tmp/StringCompare04.java:19: error: illegal start of type
  //@ */ throws java.lang.NullPointerException /* Houdini inferred exceptions
      ^
/home/max/Documents/JMLGPT/tmp/StringCompare04.java:19: error: unclosed comment
  //@ */ throws java.lang.NullPointerException /* Houdini inferred exceptions
                                               ^
/home/max/Documents/JMLGPT/tmp/StringCompare04.java:32: error: reached end of file while parsing
3 errors

public class StringCompare04 {
  //@ ensures \result;
  //@ ensures !\result;
  //@ exsures (java.lang.NullPointerException ex) (false);
  //@ ensures arg1 == null ==> \result;
  //@ ensures arg1 == null ==> !\result;
  //@ ensures arg1 != null ==> \result;
  //@ ensures arg1 != null ==> !\result;
  //@ ensures arg2 == null ==> \result;
  //@ ensures arg2 == null ==> !\result;
  //@ ensures arg2 != null ==> \result;
  //@ ensures arg2 != null ==> !\result;
  public static boolean f(String arg1, String arg2) {
    String s1 = new String(arg1);
    String s2 = arg2;
    return s2.compareTo(s1) == 13; // false
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    f("#$%^&*123", "#$%^&*123");
    f("#$%^#*123", "#$%^#*123");
    f("fsgdhj", "fsgdhj");
    f("fsgdhj", "fsadhj");
    f("DiffBlue L1mitted", "DiffBlue L1mitted");
    f("DiffBlue Limitted", "DiffBlue L1mitted");
    f("HiiffblTe Limited", "");
  }
}


OpenJML not responding. Aborted.
