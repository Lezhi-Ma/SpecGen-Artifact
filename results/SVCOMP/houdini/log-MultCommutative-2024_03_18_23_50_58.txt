public class MultCommutative {

  //@ requires n < 1;
  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:91: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:77:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:91:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: n < 1
  //@ requires n < 1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires n <= 1;
  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:76:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:90:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: n <= 1
  //@ requires n <= 1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires n == 1;
  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:89: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:75:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:89:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: n == 1
  //@ requires n == 1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires n != 1;
  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:88: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:74:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:88:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: n != 1
  //@ requires n != 1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires n >= 1;
  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:87: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:73:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:87:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: n >= 1
  //@ requires n >= 1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires n > 1;
  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:86: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:72:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:86:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: n > 1
  //@ requires n > 1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires n < 0;
  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:85: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:71:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:85:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: n < 0
  //@ requires n < 0;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires n <= 0;
  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:70:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:84:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: n <= 0
  //@ requires n <= 0;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires n == 0;
  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:83: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:69:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:83:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: n == 0
  //@ requires n == 0;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires n != 0;
  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:68:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:82:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: n != 0
  //@ requires n != 0;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires n >= 0;
  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:81: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:67:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:81:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: n >= 0
  //@ requires n >= 0;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires n > 0;
  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:66:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:80:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: n > 0
  //@ requires n > 0;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires n < -1;
  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:65:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:79:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: n < -1
  //@ requires n < -1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires n <= -1;
  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:64:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:78:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: n <= -1
  //@ requires n <= -1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires n == -1;
  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:77: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:63:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:77:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: n == -1
  //@ requires n == -1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires n != -1;
  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:62:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:76:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: n != -1
  //@ requires n != -1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires n >= -1;
  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:61:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:75:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: n >= -1
  //@ requires n >= -1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires n > -1;
  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:60:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:74:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: n > -1
  //@ requires n > -1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m < 1;
  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:73: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:59:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:73:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m < 1
  //@ requires m < 1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m <= 1;
  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:58:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:72:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m <= 1
  //@ requires m <= 1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m == 1;
  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:71: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:57:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:71:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m == 1
  //@ requires m == 1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m != 1;
  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:70: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:56:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:70:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m != 1
  //@ requires m != 1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m >= 1;
  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:55:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:69:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m >= 1
  //@ requires m >= 1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m > 1;
  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:54:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:68:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m > 1
  //@ requires m > 1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m < 0;
  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:53:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:67:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m < 0
  //@ requires m < 0;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m <= 0;
  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:66: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:52:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:66:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m <= 0
  //@ requires m <= 0;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m == 0;
  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:51:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:65:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m == 0
  //@ requires m == 0;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m != 0;
  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:50:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:64:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m != 0
  //@ requires m != 0;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m >= 0;
  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:63: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:49:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:63:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m >= 0
  //@ requires m >= 0;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m > 0;
  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:48:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:62:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m > 0
  //@ requires m > 0;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m < -1;
  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:47:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:61:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m < -1
  //@ requires m < -1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m <= -1;
  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:60: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:46:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:60:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m <= -1
  //@ requires m <= -1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m == -1;
  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:45:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:59:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m == -1
  //@ requires m == -1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m != -1;
  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:58: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:44:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:58:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m != -1
  //@ requires m != -1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m >= -1;
  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:57: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:43:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:57:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m >= -1
  //@ requires m >= -1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m > -1;
  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:56: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:42:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:56:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m > -1
  //@ requires m > -1;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m < n;
  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:41:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:55:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m < n
  //@ requires m < n;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m <= n;
  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:54: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:40:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:54:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m <= n
  //@ requires m <= n;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m == n;
  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:39:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:53:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m == n
  //@ requires m == n;
                 ^
3 verification failures

public class MultCommutative {

  //@ requires m != n;
  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:38:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:52:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m != n
  //@ requires m != n;
                 ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:38:) in method mult
    return n + mult(n, m - 1);
                   ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:45:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m != n
  //@ requires m != n;
                 ^
6 verification failures

public class MultCommutative {

  //@ requires m >= n;
  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:51: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:37:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:51:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m >= n
  //@ requires m >= n;
                 ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:37:) in method mult
    return n + mult(n, m - 1);
                   ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:44:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:4: verify: Precondition conjunct is false: m > n
  //@ requires m > n;
                 ^
6 verification failures

public class MultCommutative {

  //@ requires m > n;
  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:36:) in method main
        mult(i, j);
            ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:50:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m > n
  //@ requires m > n;
                 ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:36:) in method mult
    return n + mult(n, m - 1);
                   ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:43:
  static int mult(int n, int m) {
             ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Precondition conjunct is false: m > n
  //@ requires m > n;
                 ^
6 verification failures

public class MultCommutative {

  //@ ensures \result < m;
  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:40: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:3:) in method mult
      return 0;
      ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:40:
  //@ ensures \result < m;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result != m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:39: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:5:) in method mult
      return 0;
      ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:39:
  //@ ensures \result != m;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result >= m;
  //@ ensures \result > m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:38: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:6:) in method mult
      return 0;
      ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:38:
  //@ ensures \result > m;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result == 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:37: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:8:) in method mult
      return 0;
      ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:37:
  //@ ensures \result == 1;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result >= 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:36: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:9:) in method mult
      return 0;
      ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:36:
  //@ ensures \result >= 1;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result > 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:35: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:9:) in method mult
      return 0;
      ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:35:
  //@ ensures \result > 1;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result < 0;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:9:) in method mult
      return 0;
      ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:34:
  //@ ensures \result < 0;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result != 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:33: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:11:) in method mult
      return 0;
      ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:33:
  //@ ensures \result != 0;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result > 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:12:) in method mult
      return 0;
      ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:32:
  //@ ensures \result > 0;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result < -1;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:31: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:12:) in method mult
      return 0;
      ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:31:
  //@ ensures \result < -1;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result <= -1;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:12:) in method mult
      return 0;
      ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:30:
  //@ ensures \result <= -1;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result == -1;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:29: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:12:) in method mult
      return 0;
      ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:29:
  //@ ensures \result == -1;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result < n;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:15:) in method mult
      return 0;
      ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:28:
  //@ ensures \result < n;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result <= n;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:15:) in method mult
      return 0;
      ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:27:
  //@ ensures \result <= n;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result == n;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:15:) in method mult
      return 0;
      ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:26:
  //@ ensures \result == n;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= m;
  //@ ensures \result == m;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:4:) in method mult
    return n + mult(n, m - 1);
    ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:27:
  //@ ensures \result == m;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= m;
  //@ ensures \result >= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:4:) in method mult
    return n + mult(n, m - 1);
    ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:26:
  //@ ensures \result >= m;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= m;
  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:3:) in method mult
      return mult(n, -m);
      ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:20:
  //@ ensures \result <= m;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result == 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:7:) in method mult
    return n + mult(n, m - 1);
    ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:24:
  //@ ensures \result == 0;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:7:) in method mult
    return n + mult(n, m - 1);
    ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:23:
  //@ ensures \result >= 0;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result != -1;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:7:) in method mult
    return n + mult(n, m - 1);
    ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:22:
  //@ ensures \result != -1;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= -1;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:7:) in method mult
    return n + mult(n, m - 1);
    ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:21:
  //@ ensures \result >= -1;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result > -1;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:7:) in method mult
    return n + mult(n, m - 1);
    ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:20:
  //@ ensures \result > -1;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result != n;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:7:) in method mult
    return n + mult(n, m - 1);
    ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:19:
  //@ ensures \result != n;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= n;
  //@ ensures \result > n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:8:) in method mult
    return n + mult(n, m - 1);
    ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:18:
  //@ ensures \result > n;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  //@ ensures m >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:9:) in method mult
    return n + mult(n, m - 1);
    ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:17:
  //@ ensures m >= 0 ==> \result >= 0;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures \result >= n;
  //@ ensures n >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:7:) in method mult
    return n + mult(n, m - 1);
    ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:16:
  //@ ensures \result >= n;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result < 1;
  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:15: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:3:) in method mult
    return n + mult(n, m - 1);
    ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:15:
  //@ ensures \result < 1;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= 1;
  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:14: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:3:) in method mult
    return n + mult(n, m - 1);
    ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:14:
  //@ ensures \result <= 1;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result != 1;
  //@ ensures \result <= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:13: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:3:) in method mult
    return n + mult(n, m - 1);
    ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:13:
  //@ ensures \result != 1;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result <= 0;
  //@ ensures n >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/MultCommutative.java:12: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:3:) in method mult
    return n + mult(n, m - 1);
    ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:12:
  //@ ensures \result <= 0;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures n >= 0 ==> \result >= 0;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++){
      for(int j = -5; j <= 5; j++){
        mult(i, j);
        mult(j, i);
      }
    }
  }
}



