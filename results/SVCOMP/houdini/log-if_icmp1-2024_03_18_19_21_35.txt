class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:104: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:96:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:104:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: Precondition conjunct is false: i < 1
  //@ requires i < 1;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:103: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:95:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:103:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: Precondition conjunct is false: i <= 1
  //@ requires i <= 1;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:102: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:94:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:102:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: Precondition conjunct is false: i == 1
  //@ requires i == 1;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:101: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:93:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:101:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: Precondition conjunct is false: i != 1
  //@ requires i != 1;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:100: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:92:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:100:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: Precondition conjunct is false: i >= 1
  //@ requires i >= 1;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:99: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:91:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:99:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: Precondition conjunct is false: i > 1
  //@ requires i > 1;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:98: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:90:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:98:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: Precondition conjunct is false: i < 0
  //@ requires i < 0;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:97: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:89:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:97:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: Precondition conjunct is false: i <= 0
  //@ requires i <= 0;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:96: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:88:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:96:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: Precondition conjunct is false: i == 0
  //@ requires i == 0;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:95: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:87:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:95:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: Precondition conjunct is false: i != 0
  //@ requires i != 0;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:94: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:86:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:94:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: Precondition conjunct is false: i >= 0
  //@ requires i >= 0;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:93: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:85:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:93:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: Precondition conjunct is false: i > 0
  //@ requires i > 0;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:92: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:84:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:92:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: Precondition conjunct is false: i < -1
  //@ requires i < -1;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:91: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:83:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:91:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: Precondition conjunct is false: i <= -1
  //@ requires i <= -1;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:82:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:90:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: Precondition conjunct is false: i == -1
  //@ requires i == -1;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:83: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:50:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:83:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:4: verify: Precondition conjunct is false: i == 1
  //@ requires i == 1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:89: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:81:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:89:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:49:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:82:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:5: verify: Precondition conjunct is false: i >= 1
  //@ requires i >= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:88: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:80:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:88:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:73: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:81: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:48:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:81:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:5: verify: Precondition conjunct is false: i > 1
  //@ requires i > 1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:87: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:79:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:87:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:72: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:47:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:80:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:5: verify: Precondition conjunct is false: i < 0
  //@ requires i < 0;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:86: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:78:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:86:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:71: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:46:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:79:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:7: verify: Precondition conjunct is false: i != 0
  //@ requires i != 0;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:85: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:77:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:85:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:70: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:45:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:78:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:8: verify: Precondition conjunct is false: i > 0
  //@ requires i > 0;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:76:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:84:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:69: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:77: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:44:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:77:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:8: verify: Precondition conjunct is false: i < -1
  //@ requires i < -1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:83: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:75:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:83:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:68: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:43:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:76:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:8: verify: Precondition conjunct is false: i <= -1
  //@ requires i <= -1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:74:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:82:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:67: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:42:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:75:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:8: verify: Precondition conjunct is false: i == -1
  //@ requires i == -1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:81: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:73:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:81:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:66: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:41:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:74:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:11: verify: Precondition conjunct is false: j < i
  //@ requires j < i;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:72:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:80:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:65: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:73: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:40:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:73:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:11: verify: Precondition conjunct is false: j <= i
  //@ requires j <= i;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:71:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:79:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:64: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:39:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:72:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:11: verify: Precondition conjunct is false: j == i
  //@ requires j == i;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:70:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:78:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:63: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:71: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:38:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:71:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:14: verify: Precondition conjunct is false: j < 1
  //@ requires j < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:77: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:69:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:77:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:62: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:70: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:37:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:70:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:16: verify: Precondition conjunct is false: j != 1
  //@ requires j != 1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:68:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:76:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:61: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:36:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:69:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:17: verify: Precondition conjunct is false: j > 1
  //@ requires j > 1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:67:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:75:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:60: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:35:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:68:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:17: verify: Precondition conjunct is false: j < 0
  //@ requires j < 0;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:66:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:74:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:59: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:34:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:67:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:17: verify: Precondition conjunct is false: j <= 0
  //@ requires j <= 0;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:73: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:65:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:73:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:58: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:66: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:33:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:66:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:17: verify: Precondition conjunct is false: j == 0
  //@ requires j == 0;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:64:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:72:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:57: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:32:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:65:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:20: verify: Precondition conjunct is false: j < -1
  //@ requires j < -1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:71: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:63:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:71:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:56: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:31:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:64:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:20: verify: Precondition conjunct is false: j <= -1
  //@ requires j <= -1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:70: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:62:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:70:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:55: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:63: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:30:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:63:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:20: verify: Precondition conjunct is false: j == -1
  //@ requires j == -1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:61:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:69:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:54: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:38: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:24:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:38:
  //@ ensures !\result;
      ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:29:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:62:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:2: verify: Precondition conjunct is false: i < 1
  //@ requires i < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:60:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:68:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:53: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
8 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:37: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:25:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:37:
  //@ ensures i >= 0 ==> !\result;
      ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:28:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:61:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:2: verify: Precondition conjunct is false: i < 1
  //@ requires i < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:59:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:67:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:52: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
8 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  //@ ensures j >= 0 ==> !\result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:36: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:26:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:36:
  //@ ensures j >= 0 ==> !\result;
      ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:60: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:27:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:60:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:2: verify: Precondition conjunct is false: i < 1
  //@ requires i < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:66: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:58:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:66:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:51: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
8 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures !\result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:59: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:54:) in method fun
    return f(i, i + 1);
    ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:59:
  //@ ensures !\result;
      ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:57:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:65:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:50: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
5 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures i >= 0 ==> !\result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:58: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:55:) in method fun
    return f(i, i + 1);
    ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:58:
  //@ ensures i >= 0 ==> !\result;
      ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:56:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:64:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:50: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
5 verification failures

class if_icmp1 {
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:57: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:26:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:57:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:2: verify: Precondition conjunct is false: i < 1
  //@ requires i < 1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:63: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:55:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:63:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:50: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i <= 1;
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:56: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:25:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:56:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:2: verify: Precondition conjunct is false: i <= 1
  //@ requires i <= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:54:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:62:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:49: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i != 1;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:24:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:55:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:2: verify: Precondition conjunct is false: i != 1
  //@ requires i != 1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:53:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:61:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:48: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:54: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:23:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:54:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:2: verify: Precondition conjunct is false: i <= 0
  //@ requires i <= 0;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:60: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:52:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:60:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:47: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i == 0;
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:22:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:53:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:2: verify: Precondition conjunct is false: i == 0
  //@ requires i == 0;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:51:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:59:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:46: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:21:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:52:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:9: verify: Precondition conjunct is false: j <= 1
  //@ requires j <= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:58: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:50:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:58:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:45: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j == 1;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:51: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:20:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:51:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:9: verify: Precondition conjunct is false: j == 1
  //@ requires j == 1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:57: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:49:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:57:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:44: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:56: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:48:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:56:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:43: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i >= -1;
  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:47:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:55:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:43: verify: Precondition conjunct is false: i >= -1
  //@ requires i >= -1;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:54: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:46:) in method main
      fun(i);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:54:
  public static boolean fun(int i) {
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:43: verify: Precondition conjunct is false: i > -1
  //@ requires i > -1;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i >= 0;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:19:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:47:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:2: verify: Precondition conjunct is false: i >= 0
  //@ requires i >= 0;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:19:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:55:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:6: verify: Precondition conjunct is false: j != i
  //@ requires j != i;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:18:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:46:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:2: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:54: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:18:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:54:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:5: verify: Precondition conjunct is false: j != i
  //@ requires j != i;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:17:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:45:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:3: verify: Precondition conjunct is false: i > -1
  //@ requires i > -1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:17:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:53:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:4: verify: Precondition conjunct is false: j != i
  //@ requires j != i;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i >= -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j >= 1;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:16:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:44:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:6: verify: Precondition conjunct is false: j >= 1
  //@ requires j >= 1;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:16:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:52:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:3: verify: Precondition conjunct is false: j != i
  //@ requires j != i;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i >= -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:15:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:43:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:6: verify: Precondition conjunct is false: j != 0
  //@ requires j != 0;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:51: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:15:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:51:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:3: verify: Precondition conjunct is false: j != i
  //@ requires j != i;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i >= -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j >= 0;
  //@ requires j > 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:14:) in method fun
    return f(i, i + 1);
            ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:42:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:7: verify: Precondition conjunct is false: j > 0
  //@ requires j > 0;
                 ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:14:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:50:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:3: verify: Precondition conjunct is false: j != i
  //@ requires j != i;
                 ^
6 verification failures

class if_icmp1 {
  //@ requires i >= -1;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j >= 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:49: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:13:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:49:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:3: verify: Precondition conjunct is false: j != i
  //@ requires j != i;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i >= -1;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j >= 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:12:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:48:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:3: verify: Precondition conjunct is false: j >= i
  //@ requires j >= i;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i >= -1;
  //@ requires j > i;
  //@ requires j >= 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:11:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:47:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:3: verify: Precondition conjunct is false: j > i
  //@ requires j > i;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires i >= -1;
  //@ requires j >= 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:12: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:7:) in method f
      return false;
      ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:12:
  //@ ensures \result;
      ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:10:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:46:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:3: verify: Precondition conjunct is false: j >= 0
  //@ requires j >= 0;
                 ^
5 verification failures

class if_icmp1 {
  //@ requires i >= -1;
  //@ requires j >= 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures i >= 0 ==> \result;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:11: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:7:) in method f
      return false;
      ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:11:
  //@ ensures i >= 0 ==> \result;
      ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:9:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:45:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:3: verify: Precondition conjunct is false: j >= 0
  //@ requires j >= 0;
                 ^
5 verification failures

class if_icmp1 {
  //@ requires i >= -1;
  //@ requires j >= 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ ensures j >= 0 ==> \result;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:10: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:7:) in method f
      return false;
      ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:10:
  //@ ensures j >= 0 ==> \result;
      ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:8:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:44:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:3: verify: Precondition conjunct is false: j >= 0
  //@ requires j >= 0;
                 ^
5 verification failures

class if_icmp1 {
  //@ requires i >= -1;
  //@ requires j >= 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ ensures \result;
  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:35: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:31:) in method fun
    return f(i, i + 1);
    ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:35:
  //@ ensures \result;
      ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:7:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:43:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:3: verify: Precondition conjunct is false: j >= 0
  //@ requires j >= 0;
                 ^
5 verification failures

class if_icmp1 {
  //@ requires i >= -1;
  //@ requires j >= 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ ensures i >= 0 ==> \result;
  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:31:) in method fun
    return f(i, i + 1);
    ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:34:
  //@ ensures i >= 0 ==> \result;
      ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:7:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:42:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:3: verify: Precondition conjunct is false: j >= 0
  //@ requires j >= 0;
                 ^
5 verification failures

class if_icmp1 {
  //@ requires i >= -1;
  //@ requires j >= 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:7:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:41:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:2: verify: Precondition conjunct is false: i >= -1
  //@ requires i >= -1;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires j >= 0;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:6:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:40:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:2: verify: Precondition conjunct is false: j >= 0
  //@ requires j >= 0;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:5:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:39:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:2: verify: Precondition conjunct is false: j != -1
  //@ requires j != -1;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires j >= -1;
  //@ requires j > -1;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:4:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:38:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:2: verify: Precondition conjunct is false: j >= -1
  //@ requires j >= -1;
                 ^
3 verification failures

class if_icmp1 {
  //@ requires j > -1;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}


/home/max/Documents/JMLGPT/tmp/if_icmp1.java:37: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:3:) in method main
        f(i, j);
         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:37:
  private static boolean f(int i, int j) {
                         ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:2: verify: Precondition conjunct is false: j > -1
  //@ requires j > -1;
                 ^
3 verification failures

class if_icmp1 {
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (2 > 1) {
      if (j > i) {
        return true;
      } else {
        return false;
      }
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  public static boolean fun(int i) {
    if (i + 1 < 0) return true;
    return f(i, i + 1);
  }

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
    for(int i = -5; i <= 5; i++) {
      fun(i);
      for(int j = -5; j <= 5; j++) {
        f(i, j);
        f(j, i);
      }
    }
  }
}



