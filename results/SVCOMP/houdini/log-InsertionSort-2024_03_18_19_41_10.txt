public class InsertionSort {

  //@ non_null
  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ non_null
  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ non_null
  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:3: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:63: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:222: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
3 errors

public class InsertionSort {

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ non_null
  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ non_null
  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:62: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:221: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
2 errors

public class InsertionSort {

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ non_null
  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:220: error: No modifiers are allowed prior to a lightweight specification case
  //@ non_null
      ^
1 error

public class InsertionSort {

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:519: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:45:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:519:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:3: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:518: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:44:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:518:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:3: verify: Precondition conjunct is false: 5 <= arr.length
  //@ requires 5 <= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:517: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:43:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:517:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:3: verify: Precondition conjunct is false: 5 == arr.length
  //@ requires 5 == arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:516: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:42:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:516:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:6: verify: Precondition conjunct is false: 4 < arr.length
  //@ requires 4 < arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:515: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:41:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:515:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:6: verify: Precondition conjunct is false: 4 <= arr.length
  //@ requires 4 <= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:514: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:40:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:514:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:6: verify: Precondition conjunct is false: 4 == arr.length
  //@ requires 4 == arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:513: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:39:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:513:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:9: verify: Precondition conjunct is false: 3 < arr.length
  //@ requires 3 < arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:512: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:38:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:512:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:9: verify: Precondition conjunct is false: 3 <= arr.length
  //@ requires 3 <= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:511: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:37:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:511:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:9: verify: Precondition conjunct is false: 3 == arr.length
  //@ requires 3 == arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:510: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:36:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:510:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:12: verify: Precondition conjunct is false: 2 < arr.length
  //@ requires 2 < arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:509: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:35:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:509:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:12: verify: Precondition conjunct is false: 2 <= arr.length
  //@ requires 2 <= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:508: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:34:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:508:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:12: verify: Precondition conjunct is false: 2 == arr.length
  //@ requires 2 == arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:507: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:33:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:507:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:15: verify: Precondition conjunct is false: 1 < arr.length
  //@ requires 1 < arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:506: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:32:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:506:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:15: verify: Precondition conjunct is false: 1 <= arr.length
  //@ requires 1 <= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:505: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:31:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:505:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:15: verify: Precondition conjunct is false: 1 == arr.length
  //@ requires 1 == arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:504: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:30:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:504:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:20: verify: Precondition conjunct is false: -1 == arr.length
  //@ requires -1 == arr.length;
                  ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:503: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:29:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:503:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:21: verify: Precondition conjunct is false: -1 >= arr.length
  //@ requires -1 >= arr.length;
                  ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:502: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:28:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:502:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:21: verify: Precondition conjunct is false: -1 > arr.length
  //@ requires -1 > arr.length;
                  ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:501: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:27:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:501:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:21: verify: Precondition conjunct is false: 7 < arr.length
  //@ requires 7 < arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:500: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:26:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:500:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:21: verify: Precondition conjunct is false: 7 <= arr.length
  //@ requires 7 <= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:499: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:25:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:499:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:21: verify: Precondition conjunct is false: 7 == arr.length
  //@ requires 7 == arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:500: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:24:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:500:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:15: verify: Precondition conjunct is false: 1 != arr.length
  //@ requires 1 != arr.length;
                 ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:197:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:197: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:27:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:41: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
6 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:499: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:23:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:499:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:16: verify: Precondition conjunct is false: 1 > arr.length
  //@ requires 1 > arr.length;
                 ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:196:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:196: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:26:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:40: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
6 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 >= arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:500: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:22:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:500:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:12: verify: Precondition conjunct is false: 2 != arr.length
  //@ requires 2 != arr.length;
                 ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:195:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:195: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:25:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:39: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
6 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 >= arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:499: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:21:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:499:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:13: verify: Precondition conjunct is false: 2 > arr.length
  //@ requires 2 > arr.length;
                 ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:194:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:194: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:24:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:38: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
6 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 1 >= arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:498: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:20:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:498:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:13: verify: Precondition conjunct is false: 1 >= arr.length
  //@ requires 1 >= arr.length;
                 ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:193:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:193: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:23:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:37: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
6 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 >= arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:501: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:19:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:501:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:9: verify: Precondition conjunct is false: 3 != arr.length
  //@ requires 3 != arr.length;
                 ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:22: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:192:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:192: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:22:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:36: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
6 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 >= arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:500: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:18:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:500:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: Precondition conjunct is false: 3 > arr.length
  //@ requires 3 > arr.length;
                 ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:191:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:191: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:21:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:35: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
6 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 2 >= arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:499: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:17:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:499:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: Precondition conjunct is false: 2 >= arr.length
  //@ requires 2 >= arr.length;
                 ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:190:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:190: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:20:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
6 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 >= arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:506: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:16:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:506:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:6: verify: Precondition conjunct is false: 4 != arr.length
  //@ requires 4 != arr.length;
                 ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:189:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:189: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:19:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:33: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
6 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 >= arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:505: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:15:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:505:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:7: verify: Precondition conjunct is false: 4 > arr.length
  //@ requires 4 > arr.length;
                 ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:188:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:188: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:18:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:32: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
6 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 3 >= arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:504: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:14:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:504:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:7: verify: Precondition conjunct is false: 3 >= arr.length
  //@ requires 3 >= arr.length;
                 ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:187:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:187: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:17:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:31: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
6 verification failures

public class InsertionSort {

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 >= arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:505: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:13:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:505:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:3: verify: Precondition conjunct is false: 5 != arr.length
  //@ requires 5 != arr.length;
                 ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:186:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:186: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:16:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:30: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
6 verification failures

public class InsertionSort {

  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 >= arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:504: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:12:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:504:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Precondition conjunct is false: 5 > arr.length
  //@ requires 5 > arr.length;
                 ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:185:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:185: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:15:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:29: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
6 verification failures

public class InsertionSort {

  //@ requires 5 >= arr.length;
  //@ requires 4 >= arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:503: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:11:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:503:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Precondition conjunct is false: 4 >= arr.length
  //@ requires 4 >= arr.length;
                 ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:184:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:184: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:14:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:28: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
6 verification failures

public class InsertionSort {

  //@ requires 5 >= arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:508: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:508:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:3: verify: Precondition conjunct is false: 5 >= arr.length
  //@ requires 5 >= arr.length;
                 ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:183:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:183: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:13:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:27: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
6 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:507: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:9:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:507:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:6: verify: Precondition conjunct is false: 7 != arr.length
  //@ requires 7 != arr.length;
                 ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:182:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:182: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:12:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:26: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
6 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:506: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:8:) in method main
      sort(arr);
          ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:506:
  public static void sort(int[] arr) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:7: verify: Precondition conjunct is false: 7 > arr.length
  //@ requires 7 > arr.length;
                 ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:181:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:181: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:11:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:25: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
6 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:180:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:180: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:179:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:179: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 5 <= arr.length
  //@ requires 5 <= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:178:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:178: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 5 == arr.length
  //@ requires 5 == arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:177:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:177: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 5 != arr.length
  //@ requires 5 != arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:176:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:176: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 5 >= arr.length
  //@ requires 5 >= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:175:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:175: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 5 > arr.length
  //@ requires 5 > arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:174:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:174: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 4 < arr.length
  //@ requires 4 < arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:173:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:173: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 4 <= arr.length
  //@ requires 4 <= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:172:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:172: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 4 == arr.length
  //@ requires 4 == arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:171:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:171: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 4 != arr.length
  //@ requires 4 != arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:170:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:170: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 4 >= arr.length
  //@ requires 4 >= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:169:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:169: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 4 > arr.length
  //@ requires 4 > arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:168:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:168: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 3 < arr.length
  //@ requires 3 < arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:167:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:167: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 3 <= arr.length
  //@ requires 3 <= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:166:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:166: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 3 == arr.length
  //@ requires 3 == arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:165:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:165: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 3 != arr.length
  //@ requires 3 != arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:164:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:164: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 3 >= arr.length
  //@ requires 3 >= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:163:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:163: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 3 > arr.length
  //@ requires 3 > arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:162:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:162: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 2 < arr.length
  //@ requires 2 < arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:161:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:161: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 2 <= arr.length
  //@ requires 2 <= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:160:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:160: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 2 == arr.length
  //@ requires 2 == arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:159:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:159: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 2 != arr.length
  //@ requires 2 != arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:158:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:158: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 2 >= arr.length
  //@ requires 2 >= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:157:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:157: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 2 > arr.length
  //@ requires 2 > arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:156:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:156: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 1 < arr.length
  //@ requires 1 < arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:155:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 1 <= arr.length
  //@ requires 1 <= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:154:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:154: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 1 == arr.length
  //@ requires 1 == arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:153:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:153: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 1 != arr.length
  //@ requires 1 != arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:152:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 1 >= arr.length
  //@ requires 1 >= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:151:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:151: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:24: verify: Precondition conjunct is false: 1 > arr.length
  //@ requires 1 > arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:150:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:150: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:26: verify: Precondition conjunct is false: -1 == arr.length
  //@ requires -1 == arr.length;
                  ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:149:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:27: verify: Precondition conjunct is false: -1 >= arr.length
  //@ requires -1 >= arr.length;
                  ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:148:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:148: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:27: verify: Precondition conjunct is false: -1 > arr.length
  //@ requires -1 > arr.length;
                  ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:147:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:147: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:27: verify: Precondition conjunct is false: 7 < arr.length
  //@ requires 7 < arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:146:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:27: verify: Precondition conjunct is false: 7 <= arr.length
  //@ requires 7 <= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:145:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:27: verify: Precondition conjunct is false: 7 == arr.length
  //@ requires 7 == arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:144:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:144: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:27: verify: Precondition conjunct is false: 7 != arr.length
  //@ requires 7 != arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:143:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:28: verify: Precondition conjunct is false: 7 > arr.length
  //@ requires 7 > arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:142:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:28: verify: Precondition conjunct is false: i < -1
  //@ requires i < -1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:141:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:141: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:28: verify: Precondition conjunct is false: i <= -1
  //@ requires i <= -1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:140:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:28: verify: Precondition conjunct is false: i == -1
  //@ requires i == -1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:139:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:139: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:28: verify: Precondition conjunct is false: i != -1
  //@ requires i != -1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:138:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:28: verify: Precondition conjunct is false: i >= -1
  //@ requires i >= -1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:137:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:28: verify: Precondition conjunct is false: i > -1
  //@ requires i > -1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:136:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:30: verify: Precondition conjunct is false: i == arr.length
  //@ requires i == arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:135:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:31: verify: Precondition conjunct is false: i >= arr.length
  //@ requires i >= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:134:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:31: verify: Precondition conjunct is false: i > arr.length
  //@ requires i > arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:133:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:33: verify: Precondition conjunct is false: i == 7
  //@ requires i == 7;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:132:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i >= 7
  //@ requires i >= 7;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:131:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i > 7
  //@ requires i > 7;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:130:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i < 5
  //@ requires i < 5;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:129:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i <= 5
  //@ requires i <= 5;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:128:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i == 5
  //@ requires i == 5;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:127:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i != 5
  //@ requires i != 5;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:126:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i >= 5
  //@ requires i >= 5;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:125:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i > 5
  //@ requires i > 5;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:124:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i < 4
  //@ requires i < 4;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:123:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i <= 4
  //@ requires i <= 4;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:122:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i == 4
  //@ requires i == 4;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:121:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i != 4
  //@ requires i != 4;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:120:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i >= 4
  //@ requires i >= 4;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:119:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i > 4
  //@ requires i > 4;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:118:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i < 3
  //@ requires i < 3;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:117:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i <= 3
  //@ requires i <= 3;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:116:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i == 3
  //@ requires i == 3;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:115:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i != 3
  //@ requires i != 3;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:114:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i >= 3
  //@ requires i >= 3;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:113:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i > 3
  //@ requires i > 3;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:112:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i < 2
  //@ requires i < 2;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:111:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i <= 2
  //@ requires i <= 2;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:110:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i == 2
  //@ requires i == 2;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:109:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i != 2
  //@ requires i != 2;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:108:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i >= 2
  //@ requires i >= 2;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:107:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i > 2
  //@ requires i > 2;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:106:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i < 1
  //@ requires i < 1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:105:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i <= 1
  //@ requires i <= 1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:104:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i == 1
  //@ requires i == 1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:103:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i != 1
  //@ requires i != 1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:102:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i >= 1
  //@ requires i >= 1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:101:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i > 1
  //@ requires i > 1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:100:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i < 0
  //@ requires i < 0;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:99:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i <= 0
  //@ requires i <= 0;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:98:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i == 0
  //@ requires i == 0;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:97:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i != 0
  //@ requires i != 0;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:96:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i >= 0
  //@ requires i >= 0;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:95:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: i > 0
  //@ requires i > 0;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:94:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: N < -1
  //@ requires N < -1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:93:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: N <= -1
  //@ requires N <= -1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:92:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:34: verify: Precondition conjunct is false: N == -1
  //@ requires N == -1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:91:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:37: verify: Precondition conjunct is false: N < i
  //@ requires N < i;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:90:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:37: verify: Precondition conjunct is false: N <= i
  //@ requires N <= i;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:89:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:37: verify: Precondition conjunct is false: N == i
  //@ requires N == i;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:88:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:40: verify: Precondition conjunct is false: N < arr.length
  //@ requires N < arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:87:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:42: verify: Precondition conjunct is false: N != arr.length
  //@ requires N != arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:86:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:43: verify: Precondition conjunct is false: N > arr.length
  //@ requires N > arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:85:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:43: verify: Precondition conjunct is false: N < 7
  //@ requires N < 7;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:84:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N == 7
  //@ requires N == 7;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:83:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N != 7
  //@ requires N != 7;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:82:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N >= 7
  //@ requires N >= 7;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:81:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N > 7
  //@ requires N > 7;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:80:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N < 5
  //@ requires N < 5;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:79:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N <= 5
  //@ requires N <= 5;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:78:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N == 5
  //@ requires N == 5;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:77:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N != 5
  //@ requires N != 5;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:76:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N >= 5
  //@ requires N >= 5;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:75:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N > 5
  //@ requires N > 5;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:74:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N < 4
  //@ requires N < 4;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:73:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N <= 4
  //@ requires N <= 4;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:72:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N == 4
  //@ requires N == 4;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:71:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N != 4
  //@ requires N != 4;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:70:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N >= 4
  //@ requires N >= 4;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:69:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N > 4
  //@ requires N > 4;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:68:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N < 3
  //@ requires N < 3;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:67:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N <= 3
  //@ requires N <= 3;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:66:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N == 3
  //@ requires N == 3;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:65:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N != 3
  //@ requires N != 3;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:64:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N >= 3
  //@ requires N >= 3;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:63:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N > 3
  //@ requires N > 3;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:62:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N < 2
  //@ requires N < 2;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:61:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N <= 2
  //@ requires N <= 2;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:60:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N == 2
  //@ requires N == 2;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:59:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N != 2
  //@ requires N != 2;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:58:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N >= 2
  //@ requires N >= 2;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:57:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N > 2
  //@ requires N > 2;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:56:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N < 1
  //@ requires N < 1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:55:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N <= 1
  //@ requires N <= 1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:54:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N == 1
  //@ requires N == 1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:53:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N != 1
  //@ requires N != 1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:52:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N >= 1
  //@ requires N >= 1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:51:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N > 1
  //@ requires N > 1;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:50:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N < 0
  //@ requires N < 0;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:49:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N <= 0
  //@ requires N <= 0;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:48:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N == 0
  //@ requires N == 0;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:47:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:44: verify: Precondition conjunct is false: N != 0
  //@ requires N != 0;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N >= 0;
  //@ requires N > 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:46:) in method sort
      __Loop_Invariant_Dummy1(arr, i, N);
                             ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:10:
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:45: verify: Precondition conjunct is false: N > 0
  //@ requires N > 0;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N >= 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 < arr.length;
  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:341:) in method sort
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
                               ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:341: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:16:
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:47: verify: Precondition conjunct is false: 5 < arr.length
  //@ requires 5 < arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N >= 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 <= arr.length;
  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:340:) in method sort
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
                               ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:340: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:16:
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:47: verify: Precondition conjunct is false: 5 <= arr.length
  //@ requires 5 <= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N >= 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 == arr.length;
  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:339:) in method sort
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
                               ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:339: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:16:
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:47: verify: Precondition conjunct is false: 5 == arr.length
  //@ requires 5 == arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N >= 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 != arr.length;
  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:338:) in method sort
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
                               ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:338: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:16:
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:47: verify: Precondition conjunct is false: 5 != arr.length
  //@ requires 5 != arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N >= 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 >= arr.length;
  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:337:) in method sort
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
                               ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:337: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:16:
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:47: verify: Precondition conjunct is false: 5 >= arr.length
  //@ requires 5 >= arr.length;
                 ^
3 verification failures

public class InsertionSort {

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i != arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i != 7;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N >= arr.length;
  //@ requires N <= 7;
  //@ requires N >= 0;
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  //@ requires 5 > arr.length;
  //@ requires 4 < arr.length;
  //@ requires 4 <= arr.length;
  //@ requires 4 == arr.length;
  //@ requires 4 != arr.length;
  //@ requires 4 >= arr.length;
  //@ requires 4 > arr.length;
  //@ requires 3 < arr.length;
  //@ requires 3 <= arr.length;
  //@ requires 3 == arr.length;
  //@ requires 3 != arr.length;
  //@ requires 3 >= arr.length;
  //@ requires 3 > arr.length;
  //@ requires 2 < arr.length;
  //@ requires 2 <= arr.length;
  //@ requires 2 == arr.length;
  //@ requires 2 != arr.length;
  //@ requires 2 >= arr.length;
  //@ requires 2 > arr.length;
  //@ requires 1 < arr.length;
  //@ requires 1 <= arr.length;
  //@ requires 1 == arr.length;
  //@ requires 1 != arr.length;
  //@ requires 1 >= arr.length;
  //@ requires 1 > arr.length;
  //@ requires -1 < arr.length;
  //@ requires -1 <= arr.length;
  //@ requires -1 == arr.length;
  //@ requires -1 != arr.length;
  //@ requires -1 >= arr.length;
  //@ requires -1 > arr.length;
  //@ requires 7 < arr.length;
  //@ requires 7 <= arr.length;
  //@ requires 7 == arr.length;
  //@ requires 7 != arr.length;
  //@ requires 7 >= arr.length;
  //@ requires 7 > arr.length;
  //@ requires i < -1;
  //@ requires i <= -1;
  //@ requires i == -1;
  //@ requires i != -1;
  //@ requires i >= -1;
  //@ requires i > -1;
  //@ requires i < arr.length;
  //@ requires i <= arr.length;
  //@ requires i == arr.length;
  //@ requires i != arr.length;
  //@ requires i >= arr.length;
  //@ requires i > arr.length;
  //@ requires i < 7;
  //@ requires i <= 7;
  //@ requires i == 7;
  //@ requires i != 7;
  //@ requires i >= 7;
  //@ requires i > 7;
  //@ requires i < 5;
  //@ requires i <= 5;
  //@ requires i == 5;
  //@ requires i != 5;
  //@ requires i >= 5;
  //@ requires i > 5;
  //@ requires i < 4;
  //@ requires i <= 4;
  //@ requires i == 4;
  //@ requires i != 4;
  //@ requires i >= 4;
  //@ requires i > 4;
  //@ requires i < 3;
  //@ requires i <= 3;
  //@ requires i == 3;
  //@ requires i != 3;
  //@ requires i >= 3;
  //@ requires i > 3;
  //@ requires i < 2;
  //@ requires i <= 2;
  //@ requires i == 2;
  //@ requires i != 2;
  //@ requires i >= 2;
  //@ requires i > 2;
  //@ requires i < 1;
  //@ requires i <= 1;
  //@ requires i == 1;
  //@ requires i != 1;
  //@ requires i >= 1;
  //@ requires i > 1;
  //@ requires i < 0;
  //@ requires i <= 0;
  //@ requires i == 0;
  //@ requires i != 0;
  //@ requires i >= 0;
  //@ requires i > 0;
  //@ requires N < -1;
  //@ requires N <= -1;
  //@ requires N == -1;
  //@ requires N != -1;
  //@ requires N >= -1;
  //@ requires N > -1;
  //@ requires N < i;
  //@ requires N <= i;
  //@ requires N == i;
  //@ requires N != i;
  //@ requires N >= i;
  //@ requires N > i;
  //@ requires N < arr.length;
  //@ requires N <= arr.length;
  //@ requires N == arr.length;
  //@ requires N != arr.length;
  //@ requires N >= arr.length;
  //@ requires N > arr.length;
  //@ requires N < 7;
  //@ requires N <= 7;
  //@ requires N == 7;
  //@ requires N != 7;
  //@ requires N >= 7;
  //@ requires N > 7;
  //@ requires N < 5;
  //@ requires N <= 5;
  //@ requires N == 5;
  //@ requires N != 5;
  //@ requires N >= 5;
  //@ requires N > 5;
  //@ requires N < 4;
  //@ requires N <= 4;
  //@ requires N == 4;
  //@ requires N != 4;
  //@ requires N >= 4;
  //@ requires N > 4;
  //@ requires N < 3;
  //@ requires N <= 3;
  //@ requires N == 3;
  //@ requires N != 3;
  //@ requires N >= 3;
  //@ requires N > 3;
  //@ requires N < 2;
  //@ requires N <= 2;
  //@ requires N == 2;
  //@ requires N != 2;
  //@ requires N >= 2;
  //@ requires N > 2;
  //@ requires N < 1;
  //@ requires N <= 1;
  //@ requires N == 1;
  //@ requires N != 1;
  //@ requires N >= 1;
  //@ requires N > 1;
  //@ requires N < 0;
  //@ requires N <= 0;
  //@ requires N == 0;
  //@ requires N != 0;
  //@ requires N >= 0;
  //@ requires N > 0;
  //@ requires x < -1;
  //@ requires x <= -1;
  //@ requires x == -1;
  //@ requires x != -1;
  //@ requires x >= -1;
  //@ requires x > -1;
  //@ requires x < i;
  //@ requires x <= i;
  //@ requires x == i;
  //@ requires x != i;
  //@ requires x >= i;
  //@ requires x > i;
  //@ requires x < arr.length;
  //@ requires x <= arr.length;
  //@ requires x == arr.length;
  //@ requires x != arr.length;
  //@ requires x >= arr.length;
  //@ requires x > arr.length;
  //@ requires x < N;
  //@ requires x <= N;
  //@ requires x == N;
  //@ requires x != N;
  //@ requires x >= N;
  //@ requires x > N;
  //@ requires x < 7;
  //@ requires x <= 7;
  //@ requires x == 7;
  //@ requires x != 7;
  //@ requires x >= 7;
  //@ requires x > 7;
  //@ requires x < 5;
  //@ requires x <= 5;
  //@ requires x == 5;
  //@ requires x != 5;
  //@ requires x >= 5;
  //@ requires x > 5;
  //@ requires x < 4;
  //@ requires x <= 4;
  //@ requires x == 4;
  //@ requires x != 4;
  //@ requires x >= 4;
  //@ requires x > 4;
  //@ requires x < 3;
  //@ requires x <= 3;
  //@ requires x == 3;
  //@ requires x != 3;
  //@ requires x >= 3;
  //@ requires x > 3;
  //@ requires x < 2;
  //@ requires x <= 2;
  //@ requires x == 2;
  //@ requires x != 2;
  //@ requires x >= 2;
  //@ requires x > 2;
  //@ requires x < 1;
  //@ requires x <= 1;
  //@ requires x == 1;
  //@ requires x != 1;
  //@ requires x >= 1;
  //@ requires x > 1;
  //@ requires x < 0;
  //@ requires x <= 0;
  //@ requires x == 0;
  //@ requires x != 0;
  //@ requires x >= 0;
  //@ requires x > 0;
  //@ requires j < -1;
  //@ requires j <= -1;
  //@ requires j == -1;
  //@ requires j != -1;
  //@ requires j >= -1;
  //@ requires j > -1;
  //@ requires j < i;
  //@ requires j <= i;
  //@ requires j == i;
  //@ requires j != i;
  //@ requires j >= i;
  //@ requires j > i;
  //@ requires j < arr.length;
  //@ requires j <= arr.length;
  //@ requires j == arr.length;
  //@ requires j != arr.length;
  //@ requires j >= arr.length;
  //@ requires j > arr.length;
  //@ requires j < N;
  //@ requires j <= N;
  //@ requires j == N;
  //@ requires j != N;
  //@ requires j >= N;
  //@ requires j > N;
  //@ requires j < 7;
  //@ requires j <= 7;
  //@ requires j == 7;
  //@ requires j != 7;
  //@ requires j >= 7;
  //@ requires j > 7;
  //@ requires j < 5;
  //@ requires j <= 5;
  //@ requires j == 5;
  //@ requires j != 5;
  //@ requires j >= 5;
  //@ requires j > 5;
  //@ requires j < 4;
  //@ requires j <= 4;
  //@ requires j == 4;
  //@ requires j != 4;
  //@ requires j >= 4;
  //@ requires j > 4;
  //@ requires j < x;
  //@ requires j <= x;
  //@ requires j == x;
  //@ requires j != x;
  //@ requires j >= x;
  //@ requires j > x;
  //@ requires j < 3;
  //@ requires j <= 3;
  //@ requires j == 3;
  //@ requires j != 3;
  //@ requires j >= 3;
  //@ requires j > 3;
  //@ requires j < 2;
  //@ requires j <= 2;
  //@ requires j == 2;
  //@ requires j != 2;
  //@ requires j >= 2;
  //@ requires j > 2;
  //@ requires j < 1;
  //@ requires j <= 1;
  //@ requires j == 1;
  //@ requires j != 1;
  //@ requires j >= 1;
  //@ requires j > 1;
  //@ requires j < 0;
  //@ requires j <= 0;
  //@ requires j == 0;
  //@ requires j != 0;
  //@ requires j >= 0;
  //@ requires j > 0;
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  //@ requires \nonnullelements(args);
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}


/home/max/Documents/JMLGPT/tmp/InsertionSort.java:15: verify: The prover cannot establish an assertion (PossiblyTooLargeIndex) in method sort
      while ((j >= 0) && (arr[j] > x)) {
                             ^
1 verification failure

