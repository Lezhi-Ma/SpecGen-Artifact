class Hanoi {

    //@ spec_public
    //@ invariant 0 <= counter;
    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:3: error: This JML modifier is not allowed for a invariant clause
    //@ spec_public
        ^
1 error

class Hanoi {

    //@ invariant 0 <= counter;
    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:1: verify: The prover cannot establish an assertion (InvariantExit: /home/max/Documents/JMLGPT/tmp/Hanoi.java:3:) in method Hanoi
class Hanoi {
^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:1:
    //@ invariant 0 <= counter;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:219: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:200:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:200: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:219:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:68: verify: Precondition conjunct is false: n < counter
    //@ requires n < counter;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:218: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:199:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:199: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:218:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n < counter
    //@ requires n < counter;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:217: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:198:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:198: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:217:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n <= counter
    //@ requires n <= counter;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:216: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:197:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:197: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:216:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n == counter
    //@ requires n == counter;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:215: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:196:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:196: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:215:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n != counter
    //@ requires n != counter;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:214: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:195:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:195: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:214:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n >= counter
    //@ requires n >= counter;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:213: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:194:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:194: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:213:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n > counter
    //@ requires n > counter;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:193:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:193: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:212:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n < 1
    //@ requires n < 1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:211: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:192:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:192: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:211:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:210: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:191:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:191: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:210:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n == 1
    //@ requires n == 1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:209: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:190:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:190: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:209:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n != 1
    //@ requires n != 1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:208: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:189:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:189: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:208:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n >= 1
    //@ requires n >= 1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:207: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:188:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:188: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:207:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n > 1
    //@ requires n > 1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:206: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:187:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:187: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:206:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n < 0
    //@ requires n < 0;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:205: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:186:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:186: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:205:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n <= 0
    //@ requires n <= 0;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:204: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:185:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:185: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:204:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n == 0
    //@ requires n == 0;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:203: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:184:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:184: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:203:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n != 0
    //@ requires n != 0;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:202: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:183:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:183: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:202:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n >= 0
    //@ requires n >= 0;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:201: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:182:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:182: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:201:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n > 0
    //@ requires n > 0;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:200: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:181:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:181: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:200:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n < -1
    //@ requires n < -1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:199: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:180:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:180: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:199:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n <= -1
    //@ requires n <= -1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:198: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:179:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:179: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:198:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n == -1
    //@ requires n == -1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:197: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:178:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:178: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:197:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:196: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:177:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:177: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:196:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n >= -1
    //@ requires n >= -1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n > -1;
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:195: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:176:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:176: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:195:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: n > -1
    //@ requires n > -1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from < counter;
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:194: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:175:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:175: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:194:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from < counter
    //@ requires from < counter;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from <= counter;
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:193: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:174:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:174: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:193:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from <= counter
    //@ requires from <= counter;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from == counter;
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:192: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:173:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:173: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:192:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from == counter
    //@ requires from == counter;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from != counter;
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:191: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:172:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:172: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:191:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from != counter
    //@ requires from != counter;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from >= counter;
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:190: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:171:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:171: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:190:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from >= counter
    //@ requires from >= counter;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from > counter;
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:189: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:170:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:170: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:189:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from > counter
    //@ requires from > counter;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from < 1;
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:188: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:169:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:169: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:188:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from < 1
    //@ requires from < 1;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from <= 1;
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:187: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:168:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:168: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:187:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from <= 1
    //@ requires from <= 1;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from == 1;
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:186: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:167:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:167: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:186:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from == 1
    //@ requires from == 1;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from != 1;
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:185: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:166:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:166: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:185:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from != 1
    //@ requires from != 1;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from >= 1;
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:184: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:165:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:165: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:184:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from >= 1
    //@ requires from >= 1;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from > 1;
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:183: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:164:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:164: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:183:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from > 1
    //@ requires from > 1;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from < 0;
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:182: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:163:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:163: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:182:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from < 0
    //@ requires from < 0;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from <= 0;
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:181: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:162:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:162: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:181:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from <= 0
    //@ requires from <= 0;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from == 0;
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:180: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:161:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:161: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:180:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from == 0
    //@ requires from == 0;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from != 0;
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:179: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:160:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:160: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:179:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from != 0
    //@ requires from != 0;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from >= 0;
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:178: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:159:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:159: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:178:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from >= 0
    //@ requires from >= 0;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from > 0;
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:177: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:158:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:158: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:177:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from > 0
    //@ requires from > 0;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from < -1;
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:176: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:157:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:157: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:176:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from < -1
    //@ requires from < -1;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from <= -1;
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:175: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:156:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:156: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:175:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from <= -1
    //@ requires from <= -1;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from == -1;
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:174: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:155:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:174:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from == -1
    //@ requires from == -1;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from != -1;
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:173: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:154:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:154: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:173:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from != -1
    //@ requires from != -1;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from >= -1;
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:172: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:153:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:153: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:172:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from >= -1
    //@ requires from >= -1;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from > -1;
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:171: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:152:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:171:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from > -1
    //@ requires from > -1;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from < n;
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:170: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:151:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:151: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:170:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from < n
    //@ requires from < n;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from <= n;
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:169: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:150:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:150: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:169:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from <= n
    //@ requires from <= n;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from == n;
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:168: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:149:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:168:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from == n
    //@ requires from == n;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from != n;
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:167: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:148:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:148: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:167:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from != n
    //@ requires from != n;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from >= n;
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:166: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:147:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:147: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:166:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from >= n
    //@ requires from >= n;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires from > n;
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:165: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:146:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:165:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: from > n
    //@ requires from > n;
                      ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < counter;
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:164: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:145:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:164:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: to < counter
    //@ requires to < counter;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to <= counter;
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:163: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:144:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:144: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:163:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: to <= counter
    //@ requires to <= counter;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to == counter;
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:162: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:143:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:162:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: to == counter
    //@ requires to == counter;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to != counter;
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:161: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:142:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:161:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: to != counter
    //@ requires to != counter;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to >= counter;
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:160: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:141:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:141: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:160:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: to >= counter
    //@ requires to >= counter;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to > counter;
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:159: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:140:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:159:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: to > counter
    //@ requires to > counter;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to == 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:139:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:139: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:158:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:69: verify: Precondition conjunct is false: to == 1
    //@ requires to == 1;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to >= 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:157: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:138:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:157:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:70: verify: Precondition conjunct is false: to >= 1
    //@ requires to >= 1;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to > 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:156: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:137:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:156:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:70: verify: Precondition conjunct is false: to > 1
    //@ requires to > 1;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to == 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:155: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:136:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:155:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:72: verify: Precondition conjunct is false: to == 0
    //@ requires to == 0;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to >= 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:154: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:135:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:154:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:73: verify: Precondition conjunct is false: to >= 0
    //@ requires to >= 0;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to > 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:153: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:134:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:153:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:73: verify: Precondition conjunct is false: to > 0
    //@ requires to > 0;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to < -1;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:152: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:133:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:152:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:73: verify: Precondition conjunct is false: to < -1
    //@ requires to < -1;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires to == -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:151: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:132:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:151:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: to == -1
    //@ requires to == -1;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires to != -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:150: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:131:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:150:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: to != -1
    //@ requires to != -1;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires to >= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:149: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:130:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:149:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: to >= -1
    //@ requires to >= -1;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires to > -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:148: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:129:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:148:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: to > -1
    //@ requires to > -1;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires to < from;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:147: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:128:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:147:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: to < from
    //@ requires to < from;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires to <= from;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:146: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:127:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:146:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: to <= from
    //@ requires to <= from;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires to == from;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:145: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:126:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:145:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: to == from
    //@ requires to == from;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires to != from;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:144: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:125:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:144:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: to != from
    //@ requires to != from;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires to >= from;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:143: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:124:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:143:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: to >= from
    //@ requires to >= from;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires to > from;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:142: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:123:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:142:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: to > from
    //@ requires to > from;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires to < n;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:141: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:122:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:141:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: to < n
    //@ requires to < n;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires to <= n;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:140: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:121:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:140:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: to <= n
    //@ requires to <= n;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires to == n;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:139: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:120:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:139:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: to == n
    //@ requires to == n;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires to != n;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:138: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:119:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:138:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: to != n
    //@ requires to != n;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires to >= n;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:137: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:118:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:137:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: to >= n
    //@ requires to >= n;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires to > n;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:136: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:117:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:136:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: to > n
    //@ requires to > n;
                    ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via < counter;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:135: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:116:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:135:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via < counter
    //@ requires via < counter;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via <= counter;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:134: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:115:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:134:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via <= counter
    //@ requires via <= counter;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via == counter;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:133: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:114:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:133:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via == counter
    //@ requires via == counter;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via != counter;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:132: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:113:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:132:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via != counter
    //@ requires via != counter;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via >= counter;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:131: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:112:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:131:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via >= counter
    //@ requires via >= counter;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via > counter;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:130: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:111:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:130:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via > counter
    //@ requires via > counter;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via < 1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:129: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:110:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:129:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via < 1
    //@ requires via < 1;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via <= 1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:128: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:109:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:128:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via <= 1
    //@ requires via <= 1;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via == 1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:127: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:108:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:127:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via == 1
    //@ requires via == 1;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via != 1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:126: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:107:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:126:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via != 1
    //@ requires via != 1;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via >= 1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:125: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:106:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:125:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via >= 1
    //@ requires via >= 1;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via > 1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:124: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:105:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:124:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via > 1
    //@ requires via > 1;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via < 0;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:123: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:104:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:123:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via < 0
    //@ requires via < 0;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via <= 0;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:122: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:103:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:122:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via <= 0
    //@ requires via <= 0;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via == 0;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:121: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:102:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:121:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via == 0
    //@ requires via == 0;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via != 0;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:120: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:101:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:120:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via != 0
    //@ requires via != 0;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via >= 0;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:119: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:100:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:119:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via >= 0
    //@ requires via >= 0;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via > 0;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:118: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:99:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:118:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via > 0
    //@ requires via > 0;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via < -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:117: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:98:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:117:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via < -1
    //@ requires via < -1;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:116: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:97:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:116:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via <= -1
    //@ requires via <= -1;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via == -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:115: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:96:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:115:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via == -1
    //@ requires via == -1;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via != -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:114: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:95:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:114:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via != -1
    //@ requires via != -1;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via >= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:113: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:94:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:113:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via >= -1
    //@ requires via >= -1;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via > -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:112: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:93:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:112:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via > -1
    //@ requires via > -1;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via < to;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:111: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:92:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:111:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via < to
    //@ requires via < to;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via <= to;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:110: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:91:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:110:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via <= to
    //@ requires via <= to;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via == to;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:109: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:90:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:109:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via == to
    //@ requires via == to;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via != to;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:108: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:89:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:108:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via != to
    //@ requires via != to;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via >= to;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:107: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:88:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:107:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via >= to
    //@ requires via >= to;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via > to;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:106: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:87:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:106:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via > to
    //@ requires via > to;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via < from;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:105: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:86:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:105:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via < from
    //@ requires via < from;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via <= from;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:104: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:85:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:104:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via <= from
    //@ requires via <= from;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via == from;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:103: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:84:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:103:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via == from
    //@ requires via == from;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via != from;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:102: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:83:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:102:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via != from
    //@ requires via != from;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via >= from;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:101: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:82:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:101:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via >= from
    //@ requires via >= from;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via > from;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:100: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:81:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:100:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via > from
    //@ requires via > from;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via < n;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:99: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:80:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:99:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via < n
    //@ requires via < n;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via <= n;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:98: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:79:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:98:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via <= n
    //@ requires via <= n;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via == n;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:97: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:78:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:97:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via == n
    //@ requires via == n;
                     ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to < 1;
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:83: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:77:) in method applyHanoi
        applyHanoi(n - 1, from, via, to);
                  ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:83:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: to < 1
    //@ requires to < 1;
                    ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:96: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:77:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:96:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Precondition conjunct is false: via != n
    //@ requires via != n;
                     ^
6 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to <= 1;
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:76:) in method applyHanoi
        applyHanoi(n - 1, from, via, to);
                  ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:82:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: to <= 1
    //@ requires to <= 1;
                    ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:95: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:76:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:95:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:73: verify: Precondition conjunct is false: via != n
    //@ requires via != n;
                     ^
6 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to != 1;
    //@ requires to < 0;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:81: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:75:) in method applyHanoi
        applyHanoi(n - 1, from, via, to);
                  ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:81:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:68: verify: Precondition conjunct is false: to < 0
    //@ requires to < 0;
                    ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:94: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:75:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:94:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:72: verify: Precondition conjunct is false: via != n
    //@ requires via != n;
                     ^
6 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to != 1;
    //@ requires to <= 0;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:74:) in method applyHanoi
        applyHanoi(n - 1, from, via, to);
                  ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:80:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:68: verify: Precondition conjunct is false: to <= 0
    //@ requires to <= 0;
                    ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:93: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:74:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:93:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:71: verify: Precondition conjunct is false: via != n
    //@ requires via != n;
                     ^
6 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to != 1;
    //@ requires to != 0;
    //@ requires to <= -1;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:73:) in method applyHanoi
        applyHanoi(n - 1, from, via, to);
                  ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:79:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:69: verify: Precondition conjunct is false: to <= -1
    //@ requires to <= -1;
                    ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:92: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:73:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:92:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:70: verify: Precondition conjunct is false: via != n
    //@ requires via != n;
                     ^
6 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to != 1;
    //@ requires to != 0;
    //@ requires via != n;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:72:) in method applyHanoi
        applyHanoi(n - 1, from, via, to);
                  ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:78:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:69: verify: Precondition conjunct is false: via != n
    //@ requires via != n;
                     ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:91: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:72:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:91:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:69: verify: Precondition conjunct is false: via != n
    //@ requires via != n;
                     ^
6 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to != 1;
    //@ requires to != 0;
    //@ requires via >= n;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:77: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:71:) in method applyHanoi
        applyHanoi(n - 1, from, via, to);
                  ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:77:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:69: verify: Precondition conjunct is false: via >= n
    //@ requires via >= n;
                     ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:71:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:90:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:69: verify: Precondition conjunct is false: via >= n
    //@ requires via >= n;
                     ^
6 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to != 1;
    //@ requires to != 0;
    //@ requires via > n;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:70:) in method applyHanoi
        applyHanoi(n - 1, from, via, to);
                  ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:76:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:69: verify: Precondition conjunct is false: via > n
    //@ requires via > n;
                     ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:89: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:70:) in method main
              applyHanoi(n, i, j, k);
                        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:89:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:69: verify: Precondition conjunct is false: via > n
    //@ requires via > n;
                     ^
6 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to != 1;
    //@ requires to != 0;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:69:) in method applyHanoi
        applyHanoi(n - 1, from, via, to);
                  ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:75:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: to != 1
    //@ requires to != 1;
                    ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:60:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:82:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n < counter
    //@ requires n < counter;
                   ^
6 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires to != 0;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:68:) in method applyHanoi
        applyHanoi(n - 1, from, via, to);
                  ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:74:
    static void applyHanoi(int n, int from, int to, int via) {
                ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: Precondition conjunct is false: to != 0
    //@ requires to != 0;
                    ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:81: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:60:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:81:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n < counter
    //@ requires n < counter;
                   ^
6 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < counter;
    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:60:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:80:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n < counter
    //@ requires n < counter;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n <= counter;
    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:59:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:79:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n <= counter
    //@ requires n <= counter;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n == counter;
    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:58:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:78:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n == counter
    //@ requires n == counter;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != counter;
    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:77: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:57:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:77:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != counter
    //@ requires n != counter;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n >= counter;
    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:56:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:76:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n >= counter
    //@ requires n >= counter;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n > counter;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:55:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:75:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n > counter
    //@ requires n > counter;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:54:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:74:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n < 1
    //@ requires n < 1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:73: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:53:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:73:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:52:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:72:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n == 1
    //@ requires n == 1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:71: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:51:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:71:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != 1
    //@ requires n != 1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:70: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:50:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:70:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n >= 1
    //@ requires n >= 1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:49:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:69:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n > 1
    //@ requires n > 1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:48:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:68:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n < 0
    //@ requires n < 0;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:47:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:67:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n <= 0
    //@ requires n <= 0;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:66: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:46:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:66:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n == 0
    //@ requires n == 0;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:45:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:65:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != 0
    //@ requires n != 0;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:44:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:64:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n >= 0
    //@ requires n >= 0;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:63: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:43:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:63:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n > 0
    //@ requires n > 0;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:42:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:62:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n < -1
    //@ requires n < -1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:41:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:61:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n <= -1
    //@ requires n <= -1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:60: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:40:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:60:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n == -1
    //@ requires n == -1;
                   ^
3 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < counter;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:41: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:8:) in method hanoi
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:41:
    //@ ensures \result < counter;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:39:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:59:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= counter;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:40: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:8:) in method hanoi
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:40:
    //@ ensures \result <= counter;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:58: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:38:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:58:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result == counter;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:39: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:8:) in method hanoi
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:39:
    //@ ensures \result == counter;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:57: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:37:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:57:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != counter;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:38: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:8:) in method hanoi
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:38:
    //@ ensures \result != counter;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:56: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:36:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:56:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result >= counter;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:37: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:8:) in method hanoi
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:37:
    //@ ensures \result >= counter;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:35:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:55:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result > counter;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:36: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:8:) in method hanoi
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:36:
    //@ ensures \result > counter;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:54: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:34:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:54:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:35: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:8:) in method hanoi
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:35:
    //@ ensures \result < 1;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:33:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:53:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:10:) in method hanoi
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:34:
    //@ ensures \result != 1;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:32:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:52:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:33: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:11:) in method hanoi
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:33:
    //@ ensures \result > 1;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:51: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:31:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:51:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result >= 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:11:) in method hanoi
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:32:
    //@ ensures \result < 0;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:30:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:50:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result >= 1;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:31: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:11:) in method hanoi
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:31:
    //@ ensures \result <= 0;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:49: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:29:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:49:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result >= 1;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:11:) in method hanoi
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:30:
    //@ ensures \result == 0;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:28:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:48:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:29: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:14:) in method hanoi
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:29:
    //@ ensures \result < -1;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:27:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:47:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:14:) in method hanoi
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:28:
    //@ ensures \result <= -1;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:26:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:46:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:14:) in method hanoi
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:27:
    //@ ensures \result == -1;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:25:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:45:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:17:) in method hanoi
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:26:
    //@ ensures \result < n;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:24:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:44:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:19:) in method hanoi
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:25:
    //@ ensures \result != n;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:23:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:43:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:20:) in method hanoi
          return 1;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:24:
    //@ ensures \result > n;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:22:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:42:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
5 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result >= n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:21:) in method hanoi
        return 2 * (hanoi(n - 1)) + 1;
                         ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:25:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:21:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:41:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
6 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result >= n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:20:) in method hanoi
        return 2 * (hanoi(n - 1)) + 1;
                         ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:24:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:6: verify: Precondition conjunct is false: n > -1
    //@ requires n > -1;
                   ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:20:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:40:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n >= -1
    //@ requires n >= -1;
                   ^
6 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n >= -1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result >= n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:19:) in method hanoi
        return 2 * (hanoi(n - 1)) + 1;
                         ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:23:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n >= -1
    //@ requires n >= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:19:) in method main
        hanoi(i);
             ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:39:
    static int hanoi(int n) {
               ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Precondition conjunct is false: n >= -1
    //@ requires n >= -1;
                   ^
6 verification failures

class Hanoi {

    static int counter = 0;

    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result >= n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:5:) in method hanoi
        return 2 * (hanoi(n - 1)) + 1;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:22:
    //@ ensures \result <= 1;
        ^
2 verification failures

class Hanoi {

    static int counter = 0;

    //@ ensures \result == 1;
    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result >= n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:5:) in method hanoi
        return 2 * (hanoi(n - 1)) + 1;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:21:
    //@ ensures \result == 1;
        ^
2 verification failures

class Hanoi {

    static int counter = 0;

    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result >= n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:12:) in method hanoi
        return 2 * (hanoi(n - 1)) + 1;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:20:
    //@ ensures \result <= n;
        ^
2 verification failures

class Hanoi {

    static int counter = 0;

    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result == n;
    //@ ensures \result >= n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:12:) in method hanoi
        return 2 * (hanoi(n - 1)) + 1;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:19:
    //@ ensures \result == n;
        ^
2 verification failures

class Hanoi {

    static int counter = 0;

    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result >= n;
    //@ ensures n >= 0 ==> \result >= 0;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
    
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
      for(int i = 1; i <= 5; i++) {
        hanoi(i);
      }
      for(int i = 0; i < 3; i++) {
        for(int j = -3; j < 0; j++) {
          for(int k = 9; k < 12; k++) {
            for(int n = 0; n <= 4; n++) {
              applyHanoi(n, i, j, k);
            }
          }
        }
      }
    }
}


