public class ValidateInput01 {
  //@ requires firstName != null;
  //@ ensures \result == true || \result == false;
  public static boolean validateFirstName(String firstName) {
    // Checks if the input firstName starts with an uppercase letter followed by zero or more letters
    return firstName.matches("[A-Z][a-zA-Z]*");
  }

  //@ requires lastName != null;
  //@ ensures \result == true || \result == false;
  public static boolean validateLastName(String lastName) {
    // Checks if the input lastName contains one or more letters, optionally followed by an apostrophe or hyphen and more letters
    return lastName.matches("[a-zA-z]+(['-][a-zA-Z]+)*");
  }

  //@ requires address != null;
  //@ ensures \result == true || \result == false;
  public static boolean validateAddress(String address) {
    // Checks if the input address contains digits followed by one or more spaces and a word or a word followed by a space and another word
    return address.matches("\\d+\\s+([a-zA-Z]+|[a-zA-Z]+\\s[a-zA-Z]+)");
  }

  //@ requires city != null;
  //@ ensures \result == true || \result == false;
  public static boolean validateCity(String city) {
    // Checks if the input city contains one or more words, optionally followed by a space and another word
    return city.matches("([a-zA-Z]+|[a-zA-Z]+\\s[a-zA-Z]+)");
  }

  //@ requires state != null;
  //@ ensures \result == true || \result == false;
  public static boolean validateState(String state) {
    // Checks if the input state contains one or more words, optionally followed by a space and another word
    return state.matches("([a-zA-Z]+|[a-zA-Z]+\\s[a-zA-Z]+)");
  }

  //@ requires zip != null;
  //@ ensures \result == true || \result == false;
  public static boolean validateZip(String zip) {
    // Checks if the input zip contains exactly 5 digits
    return zip.matches("\\d{5}");
  }

  //@ requires phone != null;
  //@ ensures \result == true || \result == false;
  public static boolean validatePhone(String phone) {
    // Checks if the input phone matches the format of XXX-XXX-XXXX where X is a digit and the first digit is not 0
    return phone.matches("[1-9]\\d{2}-[1-9]\\d{2}-\\d{4}");
  }
}

