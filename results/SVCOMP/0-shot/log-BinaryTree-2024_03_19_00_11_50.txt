public class BinaryTree {
  private class Node {
    int value;
    Node left;
    Node right;

    //@ public invariant left != this && right != this;
    //@ public invariant left != right;
    //@ public invariant left != null && right != null;
    //@ public invariant value >= left.value && value <= right.value;
    
    Node(int v, Node l, Node r) {
      value = v;
      left = l;
      right = r;
    }
  }

  private Node root = null;

  //@ ensures (\forall int i; search(i) <==> i != v);
  public void insert(int v) {
    // implementation not specified
  }

  //@ ensures \result <==> (\exists Node n; n != null && n.value == v);
  public boolean search(int v) {
    // implementation not specified
  }
}
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:7: error: An identifier with package visibility may not be used in a invariant clause with public visibility
    //@ public invariant left != this && right != this;
                         ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:7: error: An identifier with package visibility may not be used in a invariant clause with public visibility
    //@ public invariant left != this && right != this;
                                         ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:8: error: An identifier with package visibility may not be used in a invariant clause with public visibility
    //@ public invariant left != right;
                         ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:8: error: An identifier with package visibility may not be used in a invariant clause with public visibility
    //@ public invariant left != right;
                                 ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:9: error: An identifier with package visibility may not be used in a invariant clause with public visibility
    //@ public invariant left != null && right != null;
                         ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:9: error: An identifier with package visibility may not be used in a invariant clause with public visibility
    //@ public invariant left != null && right != null;
                                         ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:10: error: An identifier with package visibility may not be used in a invariant clause with public visibility
    //@ public invariant value >= left.value && value <= right.value;
                         ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:10: error: An identifier with package visibility may not be used in a invariant clause with public visibility
    //@ public invariant value >= left.value && value <= right.value;
                                  ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:10: error: An identifier with package visibility may not be used in a invariant clause with public visibility
    //@ public invariant value >= left.value && value <= right.value;
                                      ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:10: error: An identifier with package visibility may not be used in a invariant clause with public visibility
    //@ public invariant value >= left.value && value <= right.value;
                                                ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:10: error: An identifier with package visibility may not be used in a invariant clause with public visibility
    //@ public invariant value >= left.value && value <= right.value;
                                                         ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:10: error: An identifier with package visibility may not be used in a invariant clause with public visibility
    //@ public invariant value >= left.value && value <= right.value;
                                                              ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:26: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result <==> (\exists Node n; n != null && n.value == v);
                                                          ^
13 errors

