import java.io.*;
import java.sql.*;
import java.util.regex.*;

public class IO {

  /*@
    requires str != null;
    ensures System.out has not changed;
  @*/
  public static void writeString(String str) {
    // implementation not provided
  }

  /*@
    requires line != null;
    ensures System.out has not changed;
  @*/
  public static void writeLine(String line) {
    // implementation not provided
  }

  /*@
    requires true;
    ensures System.out has not changed;
  @*/
  public static void writeLine(int intNumber) {
    // implementation not provided
  }

  /*@
    requires true;
    ensures System.out has not changed;
  @*/
  public static void writeLine(long longNumber) {
    // implementation not provided
  }

  /*@
    requires true;
    ensures System.out has not changed;
  @*/
  public static void writeLine(double doubleNumber) {
    // implementation not provided
  }

  /*@
    requires true;
    ensures System.out has not changed;
  @*/
  public static void writeLine(float floatNumber) {
    // implementation not provided
  }

  /*@
    requires true;
    ensures System.out has not changed;
  @*/
  public static void writeLine(short shortNumber) {
    // implementation not provided
  }

  /*@
    requires true;
    ensures System.out has not changed;
  @*/
  public static void writeLine(byte byteHex) {
    // implementation not provided
  }

  /*@
    requires dbUrl != null && dbUsername != null && dbPassword != null;
    ensures \result != null;
    signals (SQLException e) true;
  @*/
  public static Connection getDBConnection() throws SQLException {
    // implementation not provided
  }

  /* The variables below are declared "final", so a tool doing whole
  program analysis should be able to identify that reads of these
  will always return their initialized values. */
  public static final boolean STATIC_FINAL_TRUE = true;
  public static final boolean STATIC_FINAL_FALSE = false;
  public static final int STATIC_FINAL_FIVE = 5;

  /* The variables below are not defined as "final", but are never
  assigned any other value, so a tool doing whole program analysis
  should be able to identify that reads of these will always return
  their initialized values. */
  public static boolean staticTrue = true;
  public static boolean staticFalse = false;
  public static int staticFive = 5;

  /*@
    requires true;
    ensures \result == true;
  @*/
  public static boolean staticReturnsTrue() {
    // implementation not provided
  }

  /*@
    requires true;
    ensures \result == false;
  @*/
  public static boolean staticReturnsFalse() {
    // implementation not provided
  }

  /*@
    requires true;
    ensures \result == true || \result == false;
  @*/
  public static boolean staticReturnsTrueOrFalse() {
    // implementation not provided
  }

  /*@
    requires byteBuffer != null;
    ensures \result != null;
  @*/
  public static String toHex(byte byteBuffer[]) {
    // implementation not provided
  }
}

