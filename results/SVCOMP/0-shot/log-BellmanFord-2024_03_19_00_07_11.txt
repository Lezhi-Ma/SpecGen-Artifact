public class BellmanFord {

  static final int INFINITY = Integer.MAX_VALUE;

  //@ requires N > 0;
  //@ requires D != null && D.length == N * N;
  //@ requires src >= 0 && src < N;
  //@ ensures \result != null && \result.length == N;
  static int[] runBellmanFord(int N, int D[], int src) {
    int dist[] = new int[N];
    boolean infinite[] = new boolean[N];
    //@ maintaining (\forall int i; 0 <= i && i < k; dist[i] <= INFINITY);
    //@ maintaining (\forall int i; 0 <= i && i < k; infinite[i] == true);
    //@ decreases N - k;
    for (int i = 0; i < N; i++) {
      dist[i] = INFINITY;
      infinite[i] = true;
    }
    dist[src] = 0;
    infinite[src] = false;

    int k;
    //@ maintaining k >= 0 && k <= N;
    //@ maintaining (\forall int i; 0 <= i && i < N; dist[i] <= INFINITY);
    //@ maintaining (\forall int i; 0 <= i && i < N; infinite[i] == true ==> dist[i] == INFINITY);
    //@ decreases N - k;
    for (k = 0; k < N; k++) {
      boolean relaxed = false;
      //@ maintaining relaxed == false ==> (\forall int j; 0 <= j && j < N; dist[j] <= dist[\old(j)]);
      //@ decreases N - i;
      for (int i = 0; i < N; i++) {
        //@ maintaining (\forall int j; 0 <= j && j < N; dist[j] <= dist[\old(j)]);
        //@ decreases N - j;
        for (int j = 0; j < N; j++) {
          if (i == j) continue;
          if (!infinite[i]) {
            if (dist[j] > dist[i] + D[i * N + j]) {
              dist[j] = dist[i] + D[i * N + j];
              infinite[j] = false;
              relaxed = true;
            }
          }
        }
      }
      if (!relaxed)
        break;
    }

    if (k == N) {
      // We relaxed during the N-th iteration, so there must be a negative-weight cycle.
    }

    return dist;
  }
}
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:12: error: variable i is already defined in method runBellmanFord(int,int[],int)
    //@ maintaining (\forall int i; 0 <= i && i < k; dist[i] <= INFINITY);
                                 ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:12: error: cannot find symbol
    //@ maintaining (\forall int i; 0 <= i && i < k; dist[i] <= INFINITY);
                                                  ^
  symbol:   variable k
  location: class BellmanFord
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:13: error: variable i is already defined in method runBellmanFord(int,int[],int)
    //@ maintaining (\forall int i; 0 <= i && i < k; infinite[i] == true);
                                 ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:13: error: cannot find symbol
    //@ maintaining (\forall int i; 0 <= i && i < k; infinite[i] == true);
                                                  ^
  symbol:   variable k
  location: class BellmanFord
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:14: error: cannot find symbol
    //@ decreases N - k;
                      ^
  symbol:   variable k
  location: class BellmanFord
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:32: error: variable j is already defined in method runBellmanFord(int,int[],int)
        //@ maintaining (\forall int j; 0 <= j && j < N; dist[j] <= dist[\old(j)]);
                                     ^
6 errors

