public class MergeSortIterative {

  //@ requires a != null;
  //@ requires (\forall int i; 0 <= i && i < a.length; a[i] >= Integer.MIN_VALUE && a[i] <= Integer.MAX_VALUE);
  //@ ensures (\forall int i; 0 <= i && i < \result.length; \result[i] >= Integer.MIN_VALUE && \result[i] <= Integer.MAX_VALUE);
  public static void iterativeMergesort(int[] a) {
    // Implementation not provided for iterativeMergesort
  }

  //@ requires a != null;
  //@ requires (\forall int i; 0 <= i && i < a.length; a[i] >= Integer.MIN_VALUE && a[i] <= Integer.MAX_VALUE);
  //@ ensures (\forall int i; 0 <= i && i < \result.length; \result[i] >= Integer.MIN_VALUE && \result[i] <= Integer.MAX_VALUE);
  public static void iterativeMergesortWithoutCopy(int[] a) {
    // Implementation not provided for iterativeMergesortWithoutCopy
  }

  //@ requires a != null;
  //@ requires aux != null;
  //@ requires lo >= 0 && hi <= a.length && lo <= hi;
  //@ requires (\forall int i; 0 <= i && i < a.length; a[i] >= Integer.MIN_VALUE && a[i] <= Integer.MAX_VALUE);
  //@ requires (\forall int i; 0 <= i && i < aux.length; aux[i] >= Integer.MIN_VALUE && aux[i] <= Integer.MAX_VALUE);
  //@ ensures (\forall int i; 0 <= i && i < a.length; a[i] >= Integer.MIN_VALUE && a[i] <= Integer.MAX_VALUE);
  private static void merge(int[] a, int[] aux, int lo, int mid, int hi) {
    // Implementation not provided for merge
  }

  //@ requires from != null;
  //@ requires to != null;
  //@ requires lo >= 0 && hi <= from.length && lo <= hi;
  //@ requires (\forall int i; 0 <= i && i < from.length; from[i] >= Integer.MIN_VALUE && from[i] <= Integer.MAX_VALUE);
  //@ requires (\forall int i; 0 <= i && i < to.length; to[i] >= Integer.MIN_VALUE && to[i] <= Integer.MAX_VALUE);
  //@ ensures (\forall int i; 0 <= i && i < to.length; to[i] >= Integer.MIN_VALUE && to[i] <= Integer.MAX_VALUE);
  private static void mergeWithoutCopy(int[] from, int[] to, int lo, int mid, int hi) {
    // Implementation not provided for mergeWithoutCopy
  }

  //@ requires a != null;
  //@ requires aux != null;
  //@ requires lo >= 0 && hi <= a.length && lo <= hi;
  //@ requires (\forall int i; 0 <= i && i < a.length; a[i] >= Integer.MIN_VALUE && a[i] <= Integer.MAX_VALUE);
  //@ requires (\forall int i; 0 <= i && i < aux.length; aux[i] >= Integer.MIN_VALUE && aux[i] <= Integer.MAX_VALUE);
  //@ ensures (\forall int i; 0 <= i && i < a.length; a[i] >= Integer.MIN_VALUE && a[i] <= Integer.MAX_VALUE);
  public static void recursiveMergesort(int[] a, int[] aux, int lo, int hi) {
    // Implementation not provided for recursiveMergesort
  }

  //@ requires a != null;
  //@ requires (\forall int i; 0 <= i && i < a.length; a[i] >= Integer.MIN_VALUE && a[i] <= Integer.MAX_VALUE);
  //@ ensures (\forall int i; 0 <= i && i < \result.length; \result[i] >= Integer.MIN_VALUE && \result[i] <= Integer.MAX_VALUE);
  public static void recursiveMergesort(int[] a) {
    // Implementation not provided for recursiveMergesort
  }
}

