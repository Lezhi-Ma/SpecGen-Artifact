public class MergeSortIterative {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 <= i && i < a.length - 1; a[i] <= a[i + 1]);
  public static void iterativeMergesort(int[] a) {
    // Implementation not specified in JML
  }

  //@ requires a != null;
  //@ ensures (\forall int i; 0 <= i && i < a.length - 1; a[i] <= a[i + 1]);
  public static void iterativeMergesortWithoutCopy(int[] a) {
    // Implementation not specified in JML
  }

  //@ requires from != null && to != null && lo >= 0 && lo < from.length && mid >= 0 && mid <= from.length && hi >= 0 && hi <= from.length;
  //@ ensures (\forall int i; lo <= i && i < hi - 1; to[i] <= to[i + 1]);
  private static void mergeWithoutCopy(int[] from, int[] to, int lo, int mid, int hi) {
    // Implementation not specified in JML
  }

  //@ requires a != null && aux != null && lo >= 0 && lo < a.length && mid >= 0 && mid <= a.length && hi >= 0 && hi <= a.length;
  //@ ensures (\forall int i; lo <= i && i < hi - 1; a[i] <= a[i + 1]);
  private static void merge(int[] a, int[] aux, int lo, int mid, int hi) {
    // Implementation not specified in JML
  }

  //@ requires a != null && aux != null && lo >= 0 && hi >= 0 && lo <= hi && hi <= a.length;
  //@ ensures (\forall int i; lo <= i && i < hi - 1; a[i] <= a[i + 1]);
  public static void recursiveMergesort(int[] a, int[] aux, int lo, int hi) {
    // Implementation not specified in JML
  }

  //@ requires a != null;
  //@ ensures (\forall int i; 0 <= i && i < a.length - 1; a[i] <= a[i + 1]);
  public static void recursiveMergesort(int[] a) {
    // Implementation not specified in JML
  }
}

