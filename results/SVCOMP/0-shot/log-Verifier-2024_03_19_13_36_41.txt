/**
 * The Verifier class provides utility methods for generating non-deterministic values
 * and for making assumptions about conditions.
 */
public final class Verifier {

  /**
   * Assume the given boolean condition to be true. If the condition is false,
   * the program will halt with exit code 1.
   * 
   * @param condition the boolean condition to assume
   */
  public static void assume(boolean condition) {
    // Ensures: if the condition is false, the program halts with exit code 1
  }

  /**
   * Generate a non-deterministic boolean value.
   * 
   * @return a non-deterministic boolean value
   */
  public static boolean nondetBoolean() {
    // Ensures: the returned value is non-deterministic
  }

  /**
   * Generate a non-deterministic byte value.
   * 
   * @return a non-deterministic byte value
   */
  public static byte nondetByte() {
    // Ensures: the returned value is a non-deterministic byte value
  }

  /**
   * Generate a non-deterministic char value.
   * 
   * @return a non-deterministic char value
   */
  public static char nondetChar() {
    // Ensures: the returned value is a non-deterministic char value
  }

  /**
   * Generate a non-deterministic short value.
   * 
   * @return a non-deterministic short value
   */
  public static short nondetShort() {
    // Ensures: the returned value is a non-deterministic short value
  }

  /**
   * Generate a non-deterministic int value.
   * 
   * @return a non-deterministic int value
   */
  public static int nondetInt() {
    // Ensures: the returned value is a non-deterministic int value
  }

  /**
   * Generate a non-deterministic long value.
   * 
   * @return a non-deterministic long value
   */
  public static long nondetLong() {
    // Ensures: the returned value is a non-deterministic long value
  }

  /**
   * Generate a non-deterministic float value.
   * 
   * @return a non-deterministic float value
   */
  public static float nondetFloat() {
    // Ensures: the returned value is a non-deterministic float value
  }

  /**
   * Generate a non-deterministic double value.
   * 
   * @return a non-deterministic double value
   */
  public static double nondetDouble() {
    // Ensures: the returned value is a non-deterministic double value
  }

  /**
   * Generate a non-deterministic string value.
   * 
   * @return a non-deterministic string value
   */
  public static String nondetString() {
    // Ensures: the returned value is a non-deterministic string value
  }
}

