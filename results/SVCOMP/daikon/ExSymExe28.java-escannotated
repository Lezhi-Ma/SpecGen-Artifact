class Main {

  /*@ ensures \result == true; */
  public static boolean f() {
    int x = 3;
    int y = 5;
    Main inst = new Main();
    return inst.test(x, y, 9);
  }

  /*@ ensures (\result == false)  ==  (\old(x) == \old(z)); */
  /*@ ensures (\result == false)  ==>  (\old(this) != null); */
  /*@ ensures (\result == true)  ==  (\old(x) != \old(z)); */
  /*
   * test IF_ICMPNE  bytecode  (Note: javac compiles "==" to IF_ICMPNE)
   */
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe28");
    if (z == x) {
      return false;
    } else System.out.println("branch FOO2");
    if (x == r) System.out.println("branch BOO1");
    else
      System.out.println("branch BOO2");
    return true;
  }
  
}

class ExSymExe28 {
  /*@ requires args != null; */
  /*@ requires \typeof(args) == \type(java.lang.String[]); */
  /*@ requires (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
  /*@ ensures (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
  public static void main(String[] args) {
    Main e = new Main();
    for(int i = -5; i <= 5; i++) {
      for(int j = -5; j <= 5; j++) {
        Main.f();
        e.test(i, j, i - j);
        e.test(j, i, j + i);
      }
    }
  }
}
