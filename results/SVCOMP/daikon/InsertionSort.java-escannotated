public class InsertionSort {

  /*@ requires arr != null; */
  /*@ modifies arr[*]; */
  /*@ ensures (\forall int i, j; (0 <= i && i <= arr.length-1 && 0 <= j && j <= arr.length-1) ==> ((i+1 == j) ==> (arr[i] <= arr[j]))); */
  public static void sort(int[] arr) {
    final int N = arr.length;
    for (int i = 1; i < N; i++) { // N branches
      __Loop_Invariant_Dummy1(arr, i, N);
      int j = i - 1;
      int x = arr[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (arr[j] > x)) {
        __Loop_Invariant_Dummy2(arr, i, N, x, j);
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = x;
    }
  }

  /*@ requires N == arr.length; */
  /*@ requires arr != null; */
  /*@ requires i >= 1; */
  /*@ requires i <= arr.length-1; */
  /*@ ensures \old(i) <= arr.length-1; */
  public static void __Loop_Invariant_Dummy1(int[] arr, int i, int N) {}

  /*@ requires N == arr.length; */
  /*@ requires arr != null; */
  /*@ requires i >= 1; */
  /*@ requires j >= 0; */
  /*@ requires i > j; */
  /*@ requires i <= arr.length-1; */
  /*@ requires x <= arr[i]; */
  /*@ requires x < arr[i-1]; */
  /*@ requires x < arr[j]; */
  /*@ requires j < arr.length-1; */
  /*@ requires arr[i] != arr[j]; */
  /*@ requires arr[i-1] >= arr[j]; */
  /*@ ensures \old(i) <= arr.length-1; */
  /*@ ensures \old(x) <= arr[\old(i)]; */
  /*@ ensures \old(x) < arr[\old(i)-1]; */
  /*@ ensures \old(x) < arr[\old(j)]; */
  /*@ ensures \old(j) < arr.length-1; */
  /*@ ensures arr[\old(i)] != arr[\old(j)]; */
  /*@ ensures arr[\old(i)-1] >= arr[\old(j)]; */
  public static void __Loop_Invariant_Dummy2(int[] arr, int i, int N, int x, int j) {}

  /*@ requires args != null; */
  /*@ requires \typeof(args) == \type(java.lang.String[]); */
  /*@ requires (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
  /*@ ensures (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
  public static void main(String[] args) {
      int[] arr = new int[]{};
      sort(arr);
      arr = new int[]{1};
      sort(arr);
      arr = new int[]{1, -2};
      sort(arr);
      arr = new int[]{1, 1};
      sort(arr);
      arr = new int[]{1, 2, -7};
      sort(arr);
      arr = new int[]{1, 1, 2};
      sort(arr);
      arr = new int[]{7, 1, 3};
      sort(arr);
      arr = new int[]{7, 3, 1};
      sort(arr);
      arr = new int[]{-8, 1, 0, 1};
      sort(arr);
      arr = new int[]{9, 0, 8, -1, 8};
      sort(arr);
      arr = new int[]{9, 0, 114, -1, 114};
      sort(arr);
      arr = new int[]{9, -23, 8, -23, 8};
      sort(arr);
      arr = new int[]{9, -23, 8, 23, -8, 3, 514};
      sort(arr);
  }

}
