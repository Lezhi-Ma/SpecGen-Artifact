class Main {
  /*@ spec_public */ static int field;
  /*@ spec_public */ static int field2;

  /*@ modifies Main.field; */
  /*@ ensures Main.field == \old(arg); */
  /*@ ensures (Main.field <= -1)  ==  (Main.field < Main.field2); */
  /*@ ensures (Main.field <= -1)  ==>  (Main.field2 >= \old(Main.field)); */
  /*@ ensures (Main.field >= 0)  ==  (Main.field >= Main.field2); */
  /*@ ensures (Main.field >= 0)  ==>  (Main.field >= \old(Main.field)); */
  /*@ ensures \result == true; */
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be
                  symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  /*@ ensures \result == true; */
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}


class ExSymExe19 {
  /*@ requires args != null; */
  /*@ requires \typeof(args) == \type(java.lang.String[]); */
  /*@ requires (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
  /*@ ensures (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
  public static void main(String[] args) {
    Main e = new Main();
    for(int i = -5; i <= 5; i++) {
      for(int j = -5; j <= 5; j++) {
        Main.f(i);
        e.test(i, j, i - j);
        e.test(j, i, j + i);
      }
    }
  }
}
