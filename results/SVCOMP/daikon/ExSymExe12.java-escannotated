class Main {
  /*@ spec_public */ static int field;
  /*@ spec_public */ static int field2;

  /*@ modifies Main.field; */
  /*@ ensures (\old(arg) <= -1)  ==>  (\old(Main.field) == 0 || \old(Main.field) == 9); */
  /*@ ensures (\old(arg) >= 0)  ==>  (Main.field == \old(Main.field)); */
  /*@ ensures (\old(arg) >= 0)  ==>  (\old(Main.field) == 9); */
  /*@ ensures Main.field == 9; */
  /*@ ensures \result == true; */
  /*@ ensures Main.field >= \old(Main.field); */
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be
                  symbolic */

    Main inst = new Main();
    field = 9;
    if (arg < 0) return true;
    return inst.test(x, arg, field2);
    // test(x,x);
  }
  /*@ requires Main.field == 9; */
  /*@ ensures (\result == false)  ==  (\old(x) == -5 || \old(x) == -4 || \old(x) == -3); */
  /*@ ensures (\result == false)  ==  (x >= z); */
  /*@ ensures (\result == false)  ==>  (\old(this) != null); */
  /*@ ensures (\result == false)  ==>  (\old(z) != \old(r)); */
  /*@ ensures (\result == false)  ==>  (z < \old(z)); */
  /*@ ensures (\result == false)  ==>  (z <= \old(r)); */
  /*@ ensures (\result == true)  ==  (x < z); */
  /*@ ensures Main.field == 9; */
  /* we want to let the user specify that this method should be symbolic */

  /*
   * test IF_ICMPGE, IADD & ISUB  bytecodes
   */
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe12");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z < x) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < r) System.out.println("branch BOO1");
    else {
      System.out.println("branch BOO2");
      return false;
    }
    return true;
  }
}

class ExSymExe12 {
  /*@ requires args != null; */
  /*@ requires \typeof(args) == \type(java.lang.String[]); */
  /*@ requires (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
  /*@ ensures (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
  public static void main(String[] args) {
    Main e = new Main();
    for(int i = -5; i <= 5; i++) {
      for(int j = -5; j <= 5; j++) {
        Main.f(i);
        e.test(i, j, i + j);
        e.test(j, i, i - j);
      }
    }
  }
}
