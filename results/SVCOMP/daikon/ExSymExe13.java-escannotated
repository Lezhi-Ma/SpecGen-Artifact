class Main {
  /*@ spec_public */ static int field;
  /*@ spec_public */ static int field2;

  /*@ modifies Main.field; */
  /*@ ensures (Main.field == 0)  ==  (\old(arg) <= -1); */
  /*@ ensures (Main.field == 0)  ==>  (Main.field == \old(Main.field)); */
  /*@ ensures (Main.field == 0)  ==>  (\old(Main.field) == 0); */
  /*@ ensures (Main.field == 9)  ==  (\old(arg) >= 0); */
  /*@ ensures (Main.field == 9)  ==>  (\old(Main.field) == 0 || \old(Main.field) == 9); */
  /*@ ensures \result == true; */
  /*@ ensures Main.field >= \old(Main.field); */
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = 9;
    return inst.test(x, arg, field2);
  }
  
  /*@ ensures \result == true; */
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}

class ExSymExe13 {
  /*@ requires args != null; */
  /*@ requires \typeof(args) == \type(java.lang.String[]); */
  /*@ requires (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
  /*@ ensures (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
  public static void main(String[] args) {
    Main e = new Main();
    for(int i = -5; i <= 5; i++) {
      for(int j = -5; j <= 5; j++) {
        Main.f(i);
        e.test(i, j, i + j);
        e.test(j, i, i - j);
      }
    }
  }
}
