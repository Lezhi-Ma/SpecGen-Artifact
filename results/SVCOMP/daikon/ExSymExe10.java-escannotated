class Main {
  /*@ spec_public */ static int field;

  /*@ requires Main.field == 0; */
  /*@ modifies Main.field; */
  /*@ ensures Main.field == 9; */
  /*@ ensures \result == true; */
  public static boolean f() {
    int x = 3; /* we want to specify in an annotation that this param should be
                  symbolic */

    Main inst = new Main();
    field = 9;
    return inst.test(x, field);
  }
  /*@ ensures (x <= 2)  ==  (Main.field < z); */
  /*@ ensures (x <= 2)  ==  (\result == false); */
  /*@ ensures (x <= 2)  ==  (z >= 1); */
  /*@ ensures (x <= 2)  ==>  (Main.field == 0); */
  /*@ ensures (x <= 2)  ==>  (\old(this) != null); */
  /*@ ensures (z <= 0)  ==  (Main.field >= z); */
  /*@ ensures (z <= 0)  ==  (\result == true); */
  /*@ ensures (z <= 0)  ==>  (Main.field != \old(x)); */
  /*@ ensures (z <= 0)  ==>  (Main.field % \old(x) == 0); */
  /*@ ensures (z <= 0)  ==>  (Main.field % \old(z) == 0); */
  /*@ ensures (z <= 0)  ==>  (Main.field < x); */
  /*@ ensures (z <= 0)  ==>  (Main.field == 0 || Main.field == 9); */
  /*@ ensures (z <= 0)  ==>  (\old(x) != 0); */
  /*@ ensures (z <= 0)  ==>  (\old(z) != 0); */
  /*@ ensures (z <= 0)  ==>  (x % \old(x) == 0); */
  /*@ ensures (z <= 0)  ==>  (x % \old(z) == 0); */
  /*@ ensures (z <= 0)  ==>  (x > z); */
  /*@ ensures (z <= 0)  ==>  (x >= \old(x)); */
  /*@ ensures (z <= 0)  ==>  (x >= \old(z)); */
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe10");
    int y = 3;
    x = x * z;
    z = -x + y;
    if (z <= 0) System.out.println("branch FOO1");
    else {
      System.out.println("branch FOO2");
      return false;
    }
    if (x <= 0) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

class ExSymExe10 {
  /*@ requires args != null; */
  /*@ requires \typeof(args) == \type(java.lang.String[]); */
  /*@ requires (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
  /*@ ensures (args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null))); */
  public static void main(String[] args) {
    Main e = new Main();
    for(int i = -5; i <= 5; i++) {
      for(int j = -5; j <= 5; j++) {
        e.test(i, j);
        e.test(j, i);
      }
    }
    e.f();
  }
}
