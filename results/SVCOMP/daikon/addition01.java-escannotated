public class addition01 {

  /*@ requires m >= 0; */
  /*@ requires n >= 0; */
  /*@ requires c >= 0; */
  /*@ ensures \result >= \old(m); */
  public static int addition(int m, int n, int c) {
    if (n == 0) {
      return m;
    }

    if (c >= 150) {
      assert false;
    }

    if (n > 0) {
      return addition(m + 1, n - 1, ++c);
    } else {
      return addition(m - 1, n + 1, ++c);
    }
  }

  /*@ requires m >= 0; */
  /*@ requires n >= 0; */
  /*@ ensures \result == 1; */
  public static int f(int m, int n) {
    if (m < 0 || m >= 10000) {
      return -1;
    }
    if (n < 0 || n >= 10000) {
      return -1;
    }
    int c = 0;
    int result = addition(m, n, c);
    return (result == m + n) ? 1 : 0;
  }

  /*@ modifies addition01.$assertionsDisabled, args[*], args[].toString; */
  public static void main(String[] args) {
    f(0, 0);
    f(1, 0);
    f(0, 1);
    f(1, 1);
    f(1, 2);
    f(2, 1);
    f(2, 2);
    f(0, 2);
    f(2, 0);
    f(2, 3);
    f(3, 2);
    f(1, 3);
    f(3, 1);
    f(3, 0);
    f(3, 2);
    f(2, 3);
    f(0, 3);
    f(3, 3);
    f(114, 514);
    f(10, 9);
    f(4, 4);
    f(3, 65);
    f(2, 115);
    f(1919, 810);
    f(-1, 0);
    f(0, -1);
    f(-1, -1);
    f(-1, 1);        
    f(1, -1);
    f(1, -2);
    f(-2, 1);
    f(-2, -2);
    f(0, -2);
    f(-2, 0);
    f(-2, 3);
    f(-3, 2);
    f(1, -3);
    f(3, -1);
    f(3, 0);
    f(-3, 2);
    f(2, -3);
    f(0, -3);
    f(-3, 3);
    f(114, -514);
    f(-10, 9);
    f(-4, 4);
    f(-3, 65);
    f(2, -115);
    f(-1919, -810);
  }
}
