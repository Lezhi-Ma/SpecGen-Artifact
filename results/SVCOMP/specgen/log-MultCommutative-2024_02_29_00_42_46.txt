public class MultCommutative {

  //@ ensures \result == n * m;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
}
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:3:) in method mult
      return mult(n, -m);
      ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:6:
  //@ ensures \result == n * m;
      ^
2 verification failures

public class MultCommutative {

  //@ ensures \result == n * m;  
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
}

/home/max/Documents/JMLGPT/tmp/MultCommutative.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:3:) in method mult
      return mult(n, -m);
      ^
/home/max/Documents/JMLGPT/tmp/MultCommutative.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MultCommutative.java:6:
  //@ ensures \result == n * m;  
      ^
2 verification failures

public class MultCommutative {

 
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    return n + mult(n, m - 1);
  }
  
}


