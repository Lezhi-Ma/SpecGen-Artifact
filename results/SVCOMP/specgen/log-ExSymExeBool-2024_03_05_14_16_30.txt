class Main {

  //@ ensures \result ==> test(y, x);
  //@ ensures !\result ==> !test(y, x);
  public static boolean f() {
    int x = 3;
    boolean y = true;
    Main inst = new Main();
    return inst.test(y, x);
  }

  /*
   * test IINC & IFLE bytecodes (Note: javac compiles ">" to IFLE)
   */
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
  public boolean test(boolean x, int z) {
    System.out.println("Testing ExSymExeBool");
    z++;
    if (x) System.out.println("branch FOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:3: error: cannot find symbol
  //@ ensures \result ==> test(y, x);
                               ^
  symbol:   variable y
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:3: error: cannot find symbol
  //@ ensures \result ==> test(y, x);
                                  ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: cannot find symbol
  //@ ensures !\result ==> !test(y, x);
                                 ^
  symbol:   variable y
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: cannot find symbol
  //@ ensures !\result ==> !test(y, x);
                                    ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: 'void' type not allowed here
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                                                      ^
6 errors

class Main {

  //@ ensures \result ==> test(true, 3);
  //@ ensures !\result ==> !test(true, 3);
  public static boolean f() {
    int x = 3;
    boolean y = true;
    Main inst = new Main();
    return inst.test(y, x);
  }

  /*
   * test IINC & IFLE bytecodes (Note: javac compiles ">" to IFLE)
   */
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
  public boolean test(boolean x, int z) {
    System.out.println("Testing ExSymExeBool");
    z++;
    if (x) System.out.println("branch FOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:3: error: non-static method test(boolean,int) cannot be referenced from a static context
  //@ ensures \result ==> test(true, 3);
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: non-static method test(boolean,int) cannot be referenced from a static context
  //@ ensures !\result ==> !test(true, 3);
                            ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: 'void' type not allowed here
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                                                      ^
4 errors

class Main {

  //@ ensures \result ==> test(true, 3);
  //@ ensures !\result ==> !test(true, 3);
  public static boolean f() {
    int x = 3;
    boolean y = true;
    Main inst = new Main();
    return inst.test(y, x);
  }

  /*
   * test IINC & IFLE bytecodes (Note: javac compiles ">" to IFLE)
   */
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
  public boolean test(boolean x, int z) {
    System.out.println("Testing ExSymExeBool");
    z++;
    if (x) System.out.println("branch FOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:3: error: non-static method test(boolean,int) cannot be referenced from a static context
  //@ ensures \result ==> test(true, 3);
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: non-static method test(boolean,int) cannot be referenced from a static context
  //@ ensures !\result ==> !test(true, 3);
                            ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: 'void' type not allowed here
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                                                      ^
4 errors

class Main {

  //@ ensures \result ==> test(true, 3);
  //@ ensures !\result ==> !test(true, 3);
  public static boolean f() {
    int x = 3;
    boolean y = true;
    Main inst = new Main();
    return inst.test(y, x);
  }

  /*
   * test IINC & IFLE bytecodes (Note: javac compiles ">" to IFLE)
   */
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
  public boolean test(boolean x, int z) {
    System.out.println("Testing ExSymExeBool");
    z++;
    if (x) System.out.println("branch FOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:3: error: non-static method test(boolean,int) cannot be referenced from a static context
  //@ ensures \result ==> test(true, 3);
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: non-static method test(boolean,int) cannot be referenced from a static context
  //@ ensures !\result ==> !test(true, 3);
                            ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: 'void' type not allowed here
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                                                      ^
4 errors

class Main {

  //@ requires x == true && z == 3;
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
  public static boolean f() {
    int x = 3;
    boolean y = true;
    Main inst = new Main();
    return inst.test(y, x);
  }

  /*
   * test IINC & IFLE bytecodes (Note: javac compiles ">" to IFLE)
   */
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
  public boolean test(boolean x, int z) {
    System.out.println("Testing ExSymExeBool");
    z++;
    if (x) System.out.println("branch FOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:3: error: cannot find symbol
  //@ requires x == true && z == 3;
               ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:3: error: cannot find symbol
  //@ requires x == true && z == 3;
                            ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: 'void' type not allowed here
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: cannot find symbol
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                         ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: cannot find symbol
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                   ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: cannot find symbol
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                              ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                                                      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: cannot find symbol
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                                                                            ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: 'void' type not allowed here
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                                                      ^
10 errors

class Main {

  //@ ensures \result ==> test(true, 3);
  //@ ensures !\result ==> !test(true, 3);
  public static boolean f() {
    int x = 3;
    boolean y = true;
    Main inst = new Main();
    return inst.test(y, x);
  }

  /*
   * test IINC & IFLE bytecodes (Note: javac compiles ">" to IFLE)
   */
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
  public boolean test(boolean x, int z) {
    System.out.println("Testing ExSymExeBool");
    z++;
    if (x) System.out.println("branch FOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:3: error: non-static method test(boolean,int) cannot be referenced from a static context
  //@ ensures \result ==> test(true, 3);
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: non-static method test(boolean,int) cannot be referenced from a static context
  //@ ensures !\result ==> !test(true, 3);
                            ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: 'void' type not allowed here
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                                                      ^
4 errors

class Main {

  //@ ensures \result ==> test(true, 3);
  //@ ensures !\result ==> !test(true, 3);
  public static boolean f() {
    int x = 3;
    boolean y = true;
    Main inst = new Main();
    return inst.test(y, x);
  }

  /*
   * test IINC & IFLE bytecodes (Note: javac compiles ">" to IFLE)
   */
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
  public boolean test(boolean x, int z) {
    System.out.println("Testing ExSymExeBool");
    z++;
    if (x) System.out.println("branch FOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:3: error: non-static method test(boolean,int) cannot be referenced from a static context
  //@ ensures \result ==> test(true, 3);
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: non-static method test(boolean,int) cannot be referenced from a static context
  //@ ensures !\result ==> !test(true, 3);
                            ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: 'void' type not allowed here
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                                                      ^
4 errors

class Main {

  //@ requires x == true && z == 3;
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
  public static boolean f() {
    int x = 3;
    boolean y = true;
    Main inst = new Main();
    return inst.test(y, x);
  }

  /*
   * test IINC & IFLE bytecodes (Note: javac compiles ">" to IFLE)
   */
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
  public boolean test(boolean x, int z) {
    System.out.println("Testing ExSymExeBool");
    z++;
    if (x) System.out.println("branch FOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:3: error: cannot find symbol
  //@ requires x == true && z == 3;
               ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:3: error: cannot find symbol
  //@ requires x == true && z == 3;
                            ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: 'void' type not allowed here
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: cannot find symbol
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                         ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: cannot find symbol
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                   ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: cannot find symbol
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                              ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                                                      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: cannot find symbol
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                                                                            ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: 'void' type not allowed here
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                                                      ^
10 errors

class Main {

  //@ requires x == true && z == 3;
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
  public static boolean f() {
    int x = 3;
    boolean y = true;
    Main inst = new Main();
    return inst.test(y, x);
  }

  /*
   * test IINC & IFLE bytecodes (Note: javac compiles ">" to IFLE)
   */
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
  public boolean test(boolean x, int z) {
    System.out.println("Testing ExSymExeBool");
    z++;
    if (x) System.out.println("branch FOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:3: error: cannot find symbol
  //@ requires x == true && z == 3;
               ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:3: error: cannot find symbol
  //@ requires x == true && z == 3;
                            ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: 'void' type not allowed here
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: cannot find symbol
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                         ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: cannot find symbol
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                   ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: cannot find symbol
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                              ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                                                      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: cannot find symbol
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                                                                            ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: 'void' type not allowed here
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (x ==> System.out.println("branch FOO1")) && (!x ==> \result == false));
                                                                                                                      ^
10 errors

class Main {

  //@ requires y == true && z == 3;
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (y ==> System.out.println("branch FOO1")) && (!y ==> \result == false));
  public static boolean f() {
    int x = 3;
    boolean y = true;
    Main inst = new Main();
    return inst.test(y, x);
  }

  /*
   * test IINC & IFLE bytecodes (Note: javac compiles ">" to IFLE)
   */
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (y ==> System.out.println("branch FOO1")) && (!y ==> \result == false));
  public boolean test(boolean y, int z) {
    System.out.println("Testing ExSymExeBool");
    z++;
    if (y) System.out.println("branch FOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:3: error: cannot find symbol
  //@ requires y == true && z == 3;
               ^
  symbol:   variable y
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:3: error: cannot find symbol
  //@ requires y == true && z == 3;
                            ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: 'void' type not allowed here
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (y ==> System.out.println("branch FOO1")) && (!y ==> \result == false));
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: cannot find symbol
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (y ==> System.out.println("branch FOO1")) && (!y ==> \result == false));
                                                                         ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: cannot find symbol
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (y ==> System.out.println("branch FOO1")) && (!y ==> \result == false));
                                                                                   ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: cannot find symbol
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (y ==> System.out.println("branch FOO1")) && (!y ==> \result == false));
                                                                                              ^
  symbol:   variable y
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (y ==> System.out.println("branch FOO1")) && (!y ==> \result == false));
                                                                                                                      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:4: error: cannot find symbol
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (y ==> System.out.println("branch FOO1")) && (!y ==> \result == false));
                                                                                                                                            ^
  symbol:   variable y
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: 'void' type not allowed here
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (y ==> System.out.println("branch FOO1")) && (!y ==> \result == false));
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeBool.java:15: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> (System.out.println("Testing ExSymExeBool") && z == \old(z) + 1 && (y ==> System.out.println("branch FOO1")) && (!y ==> \result == false));
                                                                                                                      ^
10 errors

