class Main {
  static int field;

  //@ requires arg >= 0;
  //@ ensures \result ==> test(3, arg % 100);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x == 3;
  //@ requires z == arg % 100;
  //@ ensures \result ==> (z <= 0);
  //@ ensures !\result ==> (y > 0);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result ==> test(3, arg % 100);
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:16: error: cannot find symbol
  //@ requires z == arg % 100;
                    ^
  symbol:   variable arg
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:18: error: cannot find symbol
  //@ ensures !\result ==> (y > 0);
                            ^
  symbol:   variable y
  location: class Main
3 errors

class Main {
  static int field;

  //@ requires arg >= 0;
  //@ ensures \result ==> test(3, field, arg % 100);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field, arg % 100);
  }
  
  //@ requires x == 3;
  //@ requires z == field;
  //@ requires arg >= 0;
  //@ ensures \result ==> (z <= 0);
  //@ ensures !\result ==> (y > 0);
  public boolean test(int x, int z, int arg) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> test(3, field, arg % 100);
                                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result ==> test(3, field, arg % 100);
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:16: error: An identifier with package visibility may not be used in a requires clause with public visibility
  //@ requires z == field;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:19: error: cannot find symbol
  //@ ensures !\result ==> (y > 0);
                            ^
  symbol:   variable y
  location: class Main
4 errors

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= 0;
  //@ ensures \result ==> test(3, field, arg % 100);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field, arg % 100);
  }
  
  //@ requires x == 3;
  //@ requires z == field;
  //@ requires arg >= 0;
  //@ ensures \result ==> (z <= 0);
  //@ ensures !\result ==> (y > 0);
  public boolean test(int x, int z, int arg) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result ==> test(3, field, arg % 100);
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:19: error: cannot find symbol
  //@ ensures !\result ==> (y > 0);
                            ^
  symbol:   variable y
  location: class Main
2 errors

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= 0;
  //@ ensures \result ==> new Main().test(3, field, arg % 100);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field, arg % 100);
  }
  
  //@ requires x == 3;
  //@ requires z == field;
  //@ requires arg >= 0;
  //@ ensures \result ==> (z <= 0);
  //@ ensures !\result ==> (y > 0);
  public boolean test(int x, int z, int arg) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().test(3, field, arg % 100);
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:19: error: cannot find symbol
  //@ ensures !\result ==> (y > 0);
                            ^
  symbol:   variable y
  location: class Main
2 errors

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= 0;
  //@ ensures \result ==> new Main().test(3, field, arg % 100);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field, arg % 100);
  }
  
  //@ requires x == 3;
  //@ requires z == field;
  //@ requires arg >= 0;
  //@ ensures \result ==> (z <= 0);
  //@ ensures !\result ==> (z > 0);
  public boolean test(int x, int z, int arg) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().test(3, field, arg % 100);
                          ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= 0;
  //@ ensures \result ==> new Main().test(3, field, arg % 100);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field, arg % 100);
  }
  
  //@ requires x == 3;
  //@ requires z == field;
  //@ requires arg >= 0;
  //@ ensures \result ==> (z <= 0);
  //@ ensures !\result ==> (z > 0);
  public boolean test(int x, int z, int arg) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().test(3, field, arg % 100);
                          ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= 0;
  //@ ensures \result ==> field <= 0;
  //@ ensures !\result ==> field > 0;
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field, arg % 100);
  }
  
  //@ requires x == 3;
  //@ requires z == field;
  //@ requires arg >= 0;
  //@ ensures \result ==> (z <= 0);
  //@ ensures !\result ==> (z > 0);
  public boolean test(int x, int z, int arg) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
