import java.util.Random;

class assert2 {
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    public static int getRandomInt() {
        return new Random().nextInt();
    }

    //@ ensures getRandomInt() >= 1000 ==> \result > 1000;
    public static void main() {
        int i = getRandomInt();

        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:9: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures getRandomInt() >= 1000 ==> \result > 1000;
                                            ^
1 error

import java.util.Random;

class assert2 {
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    public static int getRandomInt() {
        return new Random().nextInt();
    }

    //@ ensures getRandomInt() >= 1000;
    public static void main() {
        int i = getRandomInt();

        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:13: verify: The prover cannot establish an assertion (Assert) in method main: i is greater 1000
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
                       ^
1 verification failure

import java.util.Random;

class assert2 {
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    public static int getRandomInt() {
        return new Random().nextInt();
    }

    //@ ensures getRandomInt() >= 1000 ==> \result > 1000;
    public static void main() {
        int i = getRandomInt();

        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:9: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures getRandomInt() >= 1000 ==> \result > 1000;
                                            ^
1 error

import java.util.Random;

class assert2 {
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    public static int getRandomInt() {
        return new Random().nextInt();
    }

    //@ ensures getRandomInt() >= 1000;
    public static void main() {
        int i = getRandomInt();

        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:13: verify: The prover cannot establish an assertion (Assert) in method main: i is greater 1000
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
                       ^
1 verification failure

import java.util.Random;

class assert2 {
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    public static int getRandomInt() {
        return new Random().nextInt();
    }

    //@ ensures getRandomInt() >= 1000;
    public static void main() {
        int i = getRandomInt();

        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:13: verify: The prover cannot establish an assertion (Assert) in method main: i is greater 1000
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
                       ^
1 verification failure

import java.util.Random;

class assert2 {
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    public static int getRandomInt() {
        return new Random().nextInt();
    }

    //@ ensures getRandomInt() >= 1000;
    public static void main() {
        int i = getRandomInt();

        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:13: verify: The prover cannot establish an assertion (Assert) in method main: i is greater 1000
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
                       ^
1 verification failure

import java.util.Random;

class assert2 {
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    public static int getRandomInt() {
        return new Random().nextInt();
    }

    //@ ensures getRandomInt() >= 1000;
    public static void main() {
        int i = getRandomInt();

        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:13: verify: The prover cannot establish an assertion (Assert) in method main: i is greater 1000
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
                       ^
1 verification failure

import java.util.Random;

class assert2 {
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    public static int getRandomInt() {
        return new Random().nextInt();
    }

    //@ ensures getRandomInt() >= 1000;
    public static void main() {
        int i = getRandomInt();

        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:13: verify: The prover cannot establish an assertion (Assert) in method main: i is greater 1000
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
                       ^
1 verification failure

import java.util.Random;

class assert2 {
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    public static int getRandomInt() {
        return new Random().nextInt();
    }

    //@ ensures getRandomInt() >= 1000;
    public static void main() {
        int i = getRandomInt();

        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:13: verify: The prover cannot establish an assertion (Assert) in method main: i is greater 1000
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
                       ^
1 verification failure

import java.util.Random;

class assert2 {
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    public static int getRandomInt() {
        return new Random().nextInt();
    }

    //@ ensures getRandomInt() >= 1000;
    public static void main() {
        int i = getRandomInt();

        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:13: verify: The prover cannot establish an assertion (Assert) in method main: i is greater 1000
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
                       ^
1 verification failure

