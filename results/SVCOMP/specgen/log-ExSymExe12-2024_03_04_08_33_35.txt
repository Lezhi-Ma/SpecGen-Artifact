class Main {
  static int field;
  static int field2;

  //@ requires \symbolic arg;
  //@ ensures \result ==> (arg < 0);
  //@ ensures !\result ==> test(3, arg, field2);
  public static boolean f(int arg) {
    int x = 3; 

    Main inst = new Main();
    field = 9;
    if (arg < 0) return true;
    return inst.test(x, arg, field2);
  }

  //@ ensures \result ==> (z < x);
  //@ ensures !\result ==> (x < r);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe12");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z < x) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < r) System.out.println("branch BOO1");
    else {
      System.out.println("branch BOO2");
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:5: error: This backslash token is unknown: \symbolic
  //@ requires \symbolic arg;
               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires true; // symbolic argument
  //@ requires arg < 0 ==> \result;
  //@ requires arg >= 0 ==> test(3, arg, field2);
  public static boolean f(int arg) {
    int x = 3; 

    Main inst = new Main();
    field = 9;
    if (arg < 0) return true;
    return inst.test(x, arg, field2);
  }

  //@ ensures z < x ==> \result;
  //@ ensures !(z < x) ==> (x < r);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe12");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z < x) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < r) System.out.println("branch BOO1");
    else {
      System.out.println("branch BOO2");
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:6: error: A \result expression may not be in a requires clause
  //@ requires arg < 0 ==> \result;
                            ^
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:7: error: An identifier with package visibility may not be used in a requires clause with public visibility
  //@ requires arg >= 0 ==> test(3, arg, field2);
                                         ^
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:7: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ requires arg >= 0 ==> test(3, arg, field2);
                            ^
3 errors

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires true; // symbolic argument
  //@ requires arg < 0;
  //@ requires arg >= 0;
  public static boolean f(int arg) {
    int x = 3; 

    Main inst = new Main();
    field = 9;
    if (arg < 0) return true;
    return inst.test(x, arg, field2);
  }

  //@ ensures z < x ==> \result;
  //@ ensures !(z < x) ==> (x < r);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe12");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z < x) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < r) System.out.println("branch BOO1");
    else {
      System.out.println("branch BOO2");
      return false;
    }
    return true;
  }
}
