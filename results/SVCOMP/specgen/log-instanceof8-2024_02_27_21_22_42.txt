class Main {
    //@ requires i == null || i instanceof Integer;
    //@ ensures \result == (i == null || i instanceof Integer);
    public static boolean test(Integer i) {
        if (i instanceof Integer) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result == (!test(null)) && (test(new Integer(1)));
    public static boolean f() {
        return (!test(null)) && (test(new Integer(1));
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:14: error: ')' expected
        return (!test(null)) && (test(new Integer(1));
                                                     ^
1 error

class Main {
    //@ requires i == null || i instanceof Integer;
    //@ ensures \result == (i == null || i instanceof Integer);
    public static boolean test(Integer i) {
        if (i instanceof Integer) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result == (!test(null)) && (test(new Integer(1)));
    public static boolean f() {
        return (!test(null)) && (test(new Integer(1)));
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:12: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == (!test(null)) && (test(new Integer(1)));
                                                  ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
1 error

class Main {
    //@ requires i == null || i instanceof Integer;
    //@ ensures \result == (i == null || i instanceof Integer);
    public static boolean test(Integer i) {
        if (i instanceof Integer) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result == (!test(null)) && (testInteger());
    public static boolean f() {
        return (!test(null)) && (testInteger());
    }

    //@ ensures \result == true;
    private static boolean testInteger() {
        return test(new Integer(1));
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:12: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == (!test(null)) && (testInteger());
                                             ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
1 error

class Main {
    //@ requires i == null || i instanceof Integer;
    //@ ensures \result == (i == null || i instanceof Integer);
    public static boolean test(Integer i) {
        if (i instanceof Integer) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result == (!test(null)) && (testInteger());
    public static boolean f() {
        return (!test(null)) && (testInteger());
    }

    //@ ensures \result == true;
    private /*@ spec_public @*/ static boolean testInteger() {
        return test(new Integer(1));
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:14: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/instanceof8.java:4:) in method f: i in test(java.lang.Integer)
        return (!test(null)) && (testInteger());
                      ^
/home/max/Documents/JMLGPT/tmp/instanceof8.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/instanceof8.java:14:
    public static boolean test(Integer i) {
                               ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
2 verification failures

class Main {
    //@ requires i == null || i instanceof Integer;
    //@ ensures \result == (i == null || i instanceof Integer);
    public static boolean test(Integer i) {
        if (i instanceof Integer) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result == (!test(null)) && (testInteger());
    public static boolean f() {
        return (!test(null)) && (test(new Integer(1));
    }

    //@ ensures \result == true;
    private /*@ spec_public @*/ static boolean testInteger() {
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:14: error: ')' expected
        return (!test(null)) && (test(new Integer(1));
                                                     ^
1 error

class Main {
    //@ requires i == null || i instanceof Integer;
    //@ ensures \result == (i == null || i instanceof Integer);
    public static boolean test(Integer i) {
        if (i instanceof Integer) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result == (!test(null)) && (testInteger());
    public static boolean f() {
        return (!test(null)) && (testInteger());
    }

    //@ ensures \result == true;
    private /*@ spec_public @*/ static boolean testInteger() {
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:14: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/instanceof8.java:4:) in method f: i in test(java.lang.Integer)
        return (!test(null)) && (testInteger());
                      ^
/home/max/Documents/JMLGPT/tmp/instanceof8.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/instanceof8.java:14:
    public static boolean test(Integer i) {
                               ^
2 verification failures

class Main {
    //@ requires i == null || i instanceof Integer;
    //@ ensures \result == (i == null || i instanceof Integer);
    public static boolean test(Integer i) {
        if (i instanceof Integer) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result == (!test(null)) && (testInteger());
    public static boolean f() {
        return (!test(null)) && (testInteger());
    }

    //@ ensures \result == true;
    private /*@ spec_public @*/ static boolean testInteger() {
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:14: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/instanceof8.java:4:) in method f: i in test(java.lang.Integer)
        return (!test(null)) && (testInteger());
                      ^
/home/max/Documents/JMLGPT/tmp/instanceof8.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/instanceof8.java:14:
    public static boolean test(Integer i) {
                               ^
2 verification failures

class Main {
    //@ requires i == null || i instanceof Integer;
    //@ ensures \result == (i == null || i instanceof Integer);
    public static boolean test(Integer i) {
        if (i instanceof Integer) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result == (!test(null)) && (test(new Integer(1)));
    public static boolean f() {
        return (!test(null)) && (test(new Integer(1)));
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:12: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == (!test(null)) && (test(new Integer(1)));
                                                  ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
1 error

class Main {
    //@ requires i == null || i instanceof Integer;
    //@ ensures \result == (i == null || i instanceof Integer);
    public static boolean test(Integer i) {
        if (i instanceof Integer) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result == (!test(null)) && (testInteger());
    public static boolean f() {
        return (!test(null)) && (testInteger());
    }

    //@ ensures \result == true;
    private /*@ spec_public @*/ static boolean testInteger() {
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:14: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/instanceof8.java:4:) in method f: i in test(java.lang.Integer)
        return (!test(null)) && (testInteger());
                      ^
/home/max/Documents/JMLGPT/tmp/instanceof8.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/instanceof8.java:14:
    public static boolean test(Integer i) {
                               ^
2 verification failures

class Main {
    //@ requires i == null || i instanceof Integer;
    //@ ensures \result == (i == null || i instanceof Integer);
    public static boolean test(Integer i) {
        if (i instanceof Integer) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result == (!test(null)) && (test(new Integer(1)));
    public static boolean f() {
        return (!test(null)) && (test(new Integer(1)));
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:12: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == (!test(null)) && (test(new Integer(1)));
                                                  ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
1 error

class Main {
    //@ requires i == null || i instanceof Integer;
    //@ ensures \result == (i == null || i instanceof Integer);
    public static boolean test(Integer i) {
        if (i instanceof Integer) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result == (!test(null)) && (test(new Integer(1)));  
    public static boolean f() {
        return (!test(null)) && (test(new Integer(1)));
    }
}

/home/max/Documents/JMLGPT/tmp/instanceof8.java:12: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == (!test(null)) && (test(new Integer(1)));  
                                                  ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
1 error

class Main {
    //@ requires i == null || i instanceof Integer;
    //@ ensures \result == (i == null || i instanceof Integer);
    public static boolean test(Integer i) {
        if (i instanceof Integer) {
            return true;
        } else {
            return false;
        }
    }

 
    public static boolean f() {
        return (!test(null)) && (test(new Integer(1)));
    }
}

/home/max/Documents/JMLGPT/tmp/instanceof8.java:14: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/instanceof8.java:4:) in method f: i in test(java.lang.Integer)
        return (!test(null)) && (test(new Integer(1)));
                      ^
/home/max/Documents/JMLGPT/tmp/instanceof8.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/instanceof8.java:14:
    public static boolean test(Integer i) {
                               ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
2 verification failures

