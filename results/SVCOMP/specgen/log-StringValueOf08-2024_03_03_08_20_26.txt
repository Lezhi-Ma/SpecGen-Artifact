public class StringValueOf08 {
    //@ requires arg != null;
    //@ requires (\forall int i; 0 <= i && i < arg.length(); Character.isDigit(arg.charAt(i)) || arg.charAt(i) == '.' || arg.charAt(i) == '-');
    //@ ensures \result ==> Float.parseFloat(arg) == 2.50;
    //@ ensures !\result ==> Float.parseFloat(arg) != 2.50;
    public static boolean f(String arg) {
        float floatValue = Float.parseFloat(arg);
        String tmp = String.valueOf(floatValue);
        return tmp.equals("2.50");
    }
}
error: An error while executing a proof script for f: (error "Solver has unexpectedly terminated")
1 error

public class StringValueOf08 {
    //@ requires arg != null;
    //@ requires (\forall int i; 0 <= i && i < arg.length(); Character.isDigit(arg.charAt(i)) || arg.charAt(i) == '.' || arg.charAt(i) == '-');
    //@ ensures \result ==> {
    //@     float floatValue = Float.parseFloat(arg);
    //@     String tmp = String.valueOf(floatValue);
    //@     tmp.equals("2.50");
    //@ };
    //@ ensures !\result ==> {
    //@     float floatValue = Float.parseFloat(arg);
    //@     String tmp = String.valueOf(floatValue);
    //@     !tmp.equals("2.50");
    //@ };
    public static boolean f(String arg) {
        float floatValue = Float.parseFloat(arg);
        String tmp = String.valueOf(floatValue);
        return tmp.equals("2.50");
    }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:5: error: '}' expected
    //@     float floatValue = Float.parseFloat(arg);
                 ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:14: error: illegal start of expression
    public static boolean f(String arg) {
    ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:16: error: Method specs may not precede a variable declaration
        String tmp = String.valueOf(floatValue);
               ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:17: error: illegal start of type
        return tmp.equals("2.50");
        ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:17: error: <identifier> expected
        return tmp.equals("2.50");
                         ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:17: error: illegal start of type
        return tmp.equals("2.50");
                          ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:19: error: class, interface, enum, or record expected
}
^
7 errors

public class StringValueOf08 {
    //@ requires arg != null;
    //@ requires (\forall int i; 0 <= i && i < arg.length(); Character.isDigit(arg.charAt(i)) || arg.charAt(i) == '.' || arg.charAt(i) == '-');
    //@ ensures \result <==> {
    //@     float floatValue = Float.parseFloat(arg);
    //@     String tmp = String.valueOf(floatValue);
    //@     tmp.equals("2.50");
    //@ };
    public static boolean f(String arg) {
        float floatValue = Float.parseFloat(arg);
        String tmp = String.valueOf(floatValue);
        return tmp.equals("2.50");
    }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:5: error: '}' expected
    //@     float floatValue = Float.parseFloat(arg);
                 ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:9: error: illegal start of expression
    public static boolean f(String arg) {
    ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:11: error: Method specs may not precede a variable declaration
        String tmp = String.valueOf(floatValue);
               ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: illegal start of type
        return tmp.equals("2.50");
        ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: <identifier> expected
        return tmp.equals("2.50");
                         ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: illegal start of type
        return tmp.equals("2.50");
                          ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:14: error: class, interface, enum, or record expected
}
^
7 errors

public class StringValueOf08 {
    //@ requires arg != null;
    //@ requires (\forall int i; 0 <= i && i < arg.length(); Character.isDigit(arg.charAt(i)) || arg.charAt(i) == '.' || arg.charAt(i) == '-');
    //@ ensures \result <==> {
    //@     float floatValue = Float.parseFloat(arg);
    //@     String tmp = String.valueOf(floatValue);
    //@     tmp.equals("2.50");
    //@ };
    public static boolean f(String arg) {
        float floatValue = Float.parseFloat(arg);
        String tmp = String.valueOf(floatValue);
        return tmp.equals("2.50");
    }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:5: error: '}' expected
    //@     float floatValue = Float.parseFloat(arg);
                 ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:9: error: illegal start of expression
    public static boolean f(String arg) {
    ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:11: error: Method specs may not precede a variable declaration
        String tmp = String.valueOf(floatValue);
               ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: illegal start of type
        return tmp.equals("2.50");
        ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: <identifier> expected
        return tmp.equals("2.50");
                         ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: illegal start of type
        return tmp.equals("2.50");
                          ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:14: error: class, interface, enum, or record expected
}
^
7 errors

public class StringValueOf08 {
    //@ requires arg != null;
    //@ requires (\forall int i; 0 <= i && i < arg.length(); Character.isDigit(arg.charAt(i)) || arg.charAt(i) == '.' || arg.charAt(i) == '-');
    //@ ensures \result <==> {
    //@     float floatValue = Float.parseFloat(arg);
    //@     String tmp = String.valueOf(floatValue);
    //@     tmp.equals("2.50");
    //@ };
    public static boolean f(String arg) {
        float floatValue = Float.parseFloat(arg);
        String tmp = String.valueOf(floatValue);
        return tmp.equals("2.50");
    }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:5: error: '}' expected
    //@     float floatValue = Float.parseFloat(arg);
                 ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:9: error: illegal start of expression
    public static boolean f(String arg) {
    ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:11: error: Method specs may not precede a variable declaration
        String tmp = String.valueOf(floatValue);
               ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: illegal start of type
        return tmp.equals("2.50");
        ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: <identifier> expected
        return tmp.equals("2.50");
                         ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: illegal start of type
        return tmp.equals("2.50");
                          ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:14: error: class, interface, enum, or record expected
}
^
7 errors

public class StringValueOf08 {
    //@ requires arg != null;
    //@ requires (\forall int i; 0 <= i && i < arg.length(); Character.isDigit(arg.charAt(i)) || arg.charAt(i) == '.' || arg.charAt(i) == '-');
    //@ ensures \result <==> {
    //@     float floatValue = Float.parseFloat(arg);
    //@     String tmp = String.valueOf(floatValue);
    //@     tmp.equals("2.50");
    //@ };
    public static boolean f(String arg) {
        float floatValue = Float.parseFloat(arg);
        String tmp = String.valueOf(floatValue);
        return tmp.equals("2.50");
    }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:5: error: '}' expected
    //@     float floatValue = Float.parseFloat(arg);
                 ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:9: error: illegal start of expression
    public static boolean f(String arg) {
    ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:11: error: Method specs may not precede a variable declaration
        String tmp = String.valueOf(floatValue);
               ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: illegal start of type
        return tmp.equals("2.50");
        ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: <identifier> expected
        return tmp.equals("2.50");
                         ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: illegal start of type
        return tmp.equals("2.50");
                          ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:14: error: class, interface, enum, or record expected
}
^
7 errors

public class StringValueOf08 {
    //@ requires arg != null;
    //@ requires (\forall int i; 0 <= i && i < arg.length(); Character.isDigit(arg.charAt(i)) || arg.charAt(i) == '.' || arg.charAt(i) == '-');
    //@ ensures \result <==> {
    //@     float floatValue = Float.parseFloat(arg);
    //@     String tmp = String.valueOf(floatValue);
    //@     tmp.equals("2.50");
    //@ };
    public static boolean f(String arg) {
        float floatValue = Float.parseFloat(arg);
        String tmp = String.valueOf(floatValue);
        return tmp.equals("2.50");
    }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:5: error: '}' expected
    //@     float floatValue = Float.parseFloat(arg);
                 ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:9: error: illegal start of expression
    public static boolean f(String arg) {
    ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:11: error: Method specs may not precede a variable declaration
        String tmp = String.valueOf(floatValue);
               ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: illegal start of type
        return tmp.equals("2.50");
        ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: <identifier> expected
        return tmp.equals("2.50");
                         ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: illegal start of type
        return tmp.equals("2.50");
                          ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:14: error: class, interface, enum, or record expected
}
^
7 errors

public class StringValueOf08 {
    //@ requires arg != null;
    //@ requires (\forall int i; 0 <= i && i < arg.length(); Character.isDigit(arg.charAt(i)) || arg.charAt(i) == '.' || arg.charAt(i) == '-');
    //@ ensures \result <==> {
    //@     float floatValue = Float.parseFloat(arg);
    //@     String tmp = String.valueOf(floatValue);
    //@     tmp.equals("2.50");
    //@ };
    public static boolean f(String arg) {
        float floatValue = Float.parseFloat(arg);
        String tmp = String.valueOf(floatValue);
        return tmp.equals("2.50");
    }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:5: error: '}' expected
    //@     float floatValue = Float.parseFloat(arg);
                 ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:9: error: illegal start of expression
    public static boolean f(String arg) {
    ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:11: error: Method specs may not precede a variable declaration
        String tmp = String.valueOf(floatValue);
               ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: illegal start of type
        return tmp.equals("2.50");
        ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: <identifier> expected
        return tmp.equals("2.50");
                         ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: illegal start of type
        return tmp.equals("2.50");
                          ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:14: error: class, interface, enum, or record expected
}
^
7 errors

public class StringValueOf08 {
    //@ requires arg != null;
    //@ requires (\forall int i; 0 <= i && i < arg.length(); Character.isDigit(arg.charAt(i)) || arg.charAt(i) == '.' || arg.charAt(i) == '-');
    //@ ensures \result <==> {
    //@     float floatValue = Float.parseFloat(arg);
    //@     String tmp = String.valueOf(floatValue);
    //@     tmp.equals("2.50");
    //@ };
    public static boolean f(String arg) {
        float floatValue = Float.parseFloat(arg);
        String tmp = String.valueOf(floatValue);
        return tmp.equals("2.50");
    }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:5: error: '}' expected
    //@     float floatValue = Float.parseFloat(arg);
                 ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:9: error: illegal start of expression
    public static boolean f(String arg) {
    ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:11: error: Method specs may not precede a variable declaration
        String tmp = String.valueOf(floatValue);
               ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: illegal start of type
        return tmp.equals("2.50");
        ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: <identifier> expected
        return tmp.equals("2.50");
                         ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: illegal start of type
        return tmp.equals("2.50");
                          ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:14: error: class, interface, enum, or record expected
}
^
7 errors

public class StringValueOf08 {
    //@ requires arg != null;
    //@ requires (\forall int i; 0 <= i && i < arg.length(); Character.isDigit(arg.charAt(i)) || arg.charAt(i) == '.' || arg.charAt(i) == '-');
    //@ ensures \result <==> {
    //@     float floatValue = Float.parseFloat(arg);
    //@     String tmp = String.valueOf(floatValue);
    //@     tmp.equals("2.50");
    //@ };
    public static boolean f(String arg) {
        float floatValue = Float.parseFloat(arg);
        String tmp = String.valueOf(floatValue);
        return tmp.equals("2.50");
    }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:5: error: '}' expected
    //@     float floatValue = Float.parseFloat(arg);
                 ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:9: error: illegal start of expression
    public static boolean f(String arg) {
    ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:11: error: Method specs may not precede a variable declaration
        String tmp = String.valueOf(floatValue);
               ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: illegal start of type
        return tmp.equals("2.50");
        ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: <identifier> expected
        return tmp.equals("2.50");
                         ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:12: error: illegal start of type
        return tmp.equals("2.50");
                          ^
/home/max/Documents/JMLGPT/tmp/StringValueOf08.java:14: error: class, interface, enum, or record expected
}
^
7 errors

