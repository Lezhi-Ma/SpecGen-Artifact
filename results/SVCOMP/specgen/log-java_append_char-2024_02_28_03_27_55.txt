class Main {
  //@ requires true;
  //@ ensures \result <==> tmp.equals("diffblue");
  //@ ensures !\result <==> !tmp.equals("diffblue");
  public static boolean f(boolean b) {
    char[] diff = {'d', 'i', 'f', 'f'};
    char[] blue = {'b', 'l', 'u', 'e'};

    StringBuilder buffer = new StringBuilder();

    buffer.append(diff).append(blue);

    String tmp = buffer.toString();
    if (b) return (tmp.equals("diffblue"));
    else return (!tmp.equals("diffblue"));
  }
}
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: cannot find symbol
  //@ ensures \result <==> tmp.equals("diffblue");
                           ^
  symbol:   variable tmp
  location: class Main
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: cannot find symbol
  //@ ensures !\result <==> !tmp.equals("diffblue");
                             ^
  symbol:   variable tmp
  location: class Main
2 errors

class Main {
  //@ requires true;
  //@ ensures \result <==> buffer.toString().equals("diffblue");
  //@ ensures !\result <==> !buffer.toString().equals("diffblue");
  public static boolean f(boolean b) {
    char[] diff = {'d', 'i', 'f', 'f'};
    char[] blue = {'b', 'l', 'u', 'e'};

    StringBuilder buffer = new StringBuilder();

    buffer.append(diff).append(blue);

    if (b) return (buffer.toString().equals("diffblue"));
    else return (!buffer.toString().equals("diffblue"));
  }
}
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: cannot find symbol
  //@ ensures \result <==> buffer.toString().equals("diffblue");
                           ^
  symbol:   variable buffer
  location: class Main
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: cannot find symbol
  //@ ensures !\result <==> !buffer.toString().equals("diffblue");
                             ^
  symbol:   variable buffer
  location: class Main
2 errors

class Main {
  //@ requires true;
  //@ ensures \result <==> buffer.toString().equals("diffblue");
  //@ ensures !\result <==> !buffer.toString().equals("diffblue");
  public static boolean f(boolean b) {
    char[] diff = {'d', 'i', 'f', 'f'};
    char[] blue = {'b', 'l', 'u', 'e'};

    StringBuilder buffer = new StringBuilder();

    buffer.append(diff).append(blue);

    if (b) return (buffer.toString().equals("diffblue"));
    else return (!buffer.toString().equals("diffblue"));
  }
}
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: cannot find symbol
  //@ ensures \result <==> buffer.toString().equals("diffblue");
                           ^
  symbol:   variable buffer
  location: class Main
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: cannot find symbol
  //@ ensures !\result <==> !buffer.toString().equals("diffblue");
                             ^
  symbol:   variable buffer
  location: class Main
2 errors

class Main {
  //@ requires true;
  //@ ensures \result <==> new StringBuilder().append(new char[]{'d', 'i', 'f', 'f'}).append(new char[]{'b', 'l', 'u', 'e'}).toString().equals("diffblue");
  //@ ensures !\result <==> !new StringBuilder().append(new char[]{'d', 'i', 'f', 'f'}).append(new char[]{'b', 'l', 'u', 'e'}).toString().equals("diffblue");
  public static boolean f(boolean b) {
    if (b) return new StringBuilder().append(new char[]{'d', 'i', 'f', 'f'}).append(new char[]{'b', 'l', 'u', 'e'}).toString().equals("diffblue");
    else return !new StringBuilder().append(new char[]{'d', 'i', 'f', 'f'}).append(new char[]{'b', 'l', 'u', 'e'}).toString().equals("diffblue");
  }
}
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> new StringBuilder().append(new char[]{'d', 'i', 'f', 'f'}).append(new char[]{'b', 'l', 'u', 'e'}).toString().equals("diffblue");
                           ^
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: Object allocation is not permitted in specification expressions
  //@ ensures !\result <==> !new StringBuilder().append(new char[]{'d', 'i', 'f', 'f'}).append(new char[]{'b', 'l', 'u', 'e'}).toString().equals("diffblue");
                             ^
2 errors

class Main {
  //@ requires true;
  //@ ensures \result <==> (new String(new char[]{'d', 'i', 'f', 'f'}) + new String(new char[]{'b', 'l', 'u', 'e'})).equals("diffblue");
  //@ ensures !\result <==> !(new String(new char[]{'d', 'i', 'f', 'f'}) + new String(new char[]{'b', 'l', 'u', 'e'})).equals("diffblue");
  public static boolean f(boolean b) {
    if (b) return (new String(new char[]{'d', 'i', 'f', 'f'}) + new String(new char[]{'b', 'l', 'u', 'e'})).equals("diffblue");
    else return !(new String(new char[]{'d', 'i', 'f', 'f'}) + new String(new char[]{'b', 'l', 'u', 'e'})).equals("diffblue");
  }
}
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> (new String(new char[]{'d', 'i', 'f', 'f'}) + new String(new char[]{'b', 'l', 'u', 'e'})).equals("diffblue");
                            ^
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> (new String(new char[]{'d', 'i', 'f', 'f'}) + new String(new char[]{'b', 'l', 'u', 'e'})).equals("diffblue");
                                                                         ^
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: Object allocation is not permitted in specification expressions
  //@ ensures !\result <==> !(new String(new char[]{'d', 'i', 'f', 'f'}) + new String(new char[]{'b', 'l', 'u', 'e'})).equals("diffblue");
                              ^
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: Object allocation is not permitted in specification expressions
  //@ ensures !\result <==> !(new String(new char[]{'d', 'i', 'f', 'f'}) + new String(new char[]{'b', 'l', 'u', 'e'})).equals("diffblue");
                                                                           ^
4 errors

class Main {
  //@ requires true;
  //@ ensures \result <==> ("" + 'd' + 'i' + 'f' + 'f' + 'b' + 'l' + 'u' + 'e').equals("diffblue");
  //@ ensures !\result <==> !("" + 'd' + 'i' + 'f' + 'f' + 'b' + 'l' + 'u' + 'e').equals("diffblue");
  public static boolean f(boolean b) {
    if (b) return ("" + 'd' + 'i' + 'f' + 'f' + 'b' + 'l' + 'u' + 'e').equals("diffblue");
    else return !("" + 'd' + 'i' + 'f' + 'f' + 'b' + 'l' + 'u' + 'e').equals("diffblue");
  }
}
/home/max/Documents/JMLGPT/tmp/java_append_char.java:6: verify: The prover cannot establish an assertion (PossiblyNullDeReference) in method f
    if (b) return ("" + 'd' + 'i' + 'f' + 'f' + 'b' + 'l' + 'u' + 'e').equals("diffblue");
                                                                      ^
1 verification failure

class Main {
  //@ requires true;
  //@ ensures \result <==> ("diff" + "blue").equals("diffblue");
  //@ ensures !\result <==> !("diff" + "blue").equals("diffblue");
  public static boolean f(boolean b) {
    if (b) return ("diff" + "blue").equals("diffblue");
    else return !("diff" + "blue").equals("diffblue");
  }
}
/home/max/Documents/JMLGPT/tmp/java_append_char.java:7: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/java_append_char.java:3:) in method f
    else return !("diff" + "blue").equals("diffblue");
         ^
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/java_append_char.java:7:
  //@ ensures \result <==> ("diff" + "blue").equals("diffblue");
      ^
2 verification failures

class Main {
  //@ requires true;
  //@ ensures \result <==> ("diff" + "blue").equals("diffblue");  
  //@ ensures !\result <==> !("diff" + "blue").equals("diffblue");
  public static boolean f(boolean b) {
    if (b) return ("diff" + "blue").equals("diffblue");
    else return !("diff" + "blue").equals("diffblue");
  }
}

/home/max/Documents/JMLGPT/tmp/java_append_char.java:7: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/java_append_char.java:3:) in method f
    else return !("diff" + "blue").equals("diffblue");
         ^
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/java_append_char.java:7:
  //@ ensures \result <==> ("diff" + "blue").equals("diffblue");  
      ^
2 verification failures

class Main {
  //@ requires true;
  //@ ensures \result <==> ("diff" - "blue").equals("diffblue");  
  //@ ensures !\result <==> !("diff" + "blue").equals("diffblue");
  public static boolean f(boolean b) {
    if (b) return ("diff" + "blue").equals("diffblue");
    else return !("diff" + "blue").equals("diffblue");
  }
}

/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: bad operand types for binary operator '-'
  //@ ensures \result <==> ("diff" - "blue").equals("diffblue");  
                                   ^
  first type:  String
  second type: String
1 error

class Main {
  //@ requires true;
 
  //@ ensures !\result <==> !("diff" + "blue").equals("diffblue");
  public static boolean f(boolean b) {
    if (b) return ("diff" + "blue").equals("diffblue");
    else return !("diff" + "blue").equals("diffblue");
  }
}

/home/max/Documents/JMLGPT/tmp/java_append_char.java:7: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/java_append_char.java:4:) in method f
    else return !("diff" + "blue").equals("diffblue");
         ^
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/java_append_char.java:7:
  //@ ensures !\result <==> !("diff" + "blue").equals("diffblue");
      ^
2 verification failures

class Main {
  //@ requires true;
 
  //@ ensures !\result <==> !("diff" + "blue").equals("diffblue");  
  public static boolean f(boolean b) {
    if (b) return ("diff" + "blue").equals("diffblue");
    else return !("diff" + "blue").equals("diffblue");
  }
}

/home/max/Documents/JMLGPT/tmp/java_append_char.java:7: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/java_append_char.java:4:) in method f
    else return !("diff" + "blue").equals("diffblue");
         ^
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/java_append_char.java:7:
  //@ ensures !\result <==> !("diff" + "blue").equals("diffblue");  
      ^
2 verification failures

class Main {
  //@ requires true;
 
  //@ ensures !\result <==> !("diff" - "blue").equals("diffblue");  
  public static boolean f(boolean b) {
    if (b) return ("diff" + "blue").equals("diffblue");
    else return !("diff" + "blue").equals("diffblue");
  }
}

/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: bad operand types for binary operator '-'
  //@ ensures !\result <==> !("diff" - "blue").equals("diffblue");  
                                     ^
  first type:  String
  second type: String
1 error

class Main {
  //@ requires true;
 
 
  public static boolean f(boolean b) {
    if (b) return ("diff" + "blue").equals("diffblue");
    else return !("diff" + "blue").equals("diffblue");
  }
}


