public class calc {
    //@ requires args.length >= 2;
    //@ ensures args.length < 2 ==> \result == "need two arguments";
    public static void fun(String[] args) {
        if (args.length < 2) {
            System.out.println("need two arguments");
            return;
        }
        new calc().do_stuff(args[0], args[1]);
    }

    //@ requires a != null && b != null;
    //@ requires (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b));
    //@ ensures (\forall int x; x == Integer.parseInt(a) && x != Integer.parseInt(b); x == y);
    public void do_stuff(String a, String b) {
        try {
            int x = Integer.parseInt(a);
            int y = Integer.parseInt(b);
            assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
        } catch (java.lang.NumberFormatException e) {
        }
    }
}
/home/max/Documents/JMLGPT/tmp/calc.java:3: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures args.length < 2 ==> \result == "need two arguments";
                                     ^
/home/max/Documents/JMLGPT/tmp/calc.java:14: error: cannot find symbol
    //@ ensures (\forall int x; x == Integer.parseInt(a) && x != Integer.parseInt(b); x == y);
                                                                                           ^
  symbol:   variable y
  location: class calc
2 errors

public class calc {
    //@ requires args.length >= 2;
    //@ ensures args.length < 2 ==> System.out.println("need two arguments");
    public static void fun(String[] args) {
        if (args.length < 2) {
            System.out.println("need two arguments");
            return;
        }
        new calc().do_stuff(args[0], args[1]);
    }

    //@ requires a != null && b != null;
    //@ requires (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b));
    //@ ensures (\forall int x; x == Integer.parseInt(a) && x != Integer.parseInt(b); x == y);
    public void do_stuff(String a, String b) {
        try {
            int x = Integer.parseInt(a);
            int y = Integer.parseInt(b);
            assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
        } catch (java.lang.NumberFormatException e) {
        }
    }
}
/home/max/Documents/JMLGPT/tmp/calc.java:3: error: incompatible types: void cannot be converted to boolean
    //@ ensures args.length < 2 ==> System.out.println("need two arguments");
                                                      ^
/home/max/Documents/JMLGPT/tmp/calc.java:14: error: cannot find symbol
    //@ ensures (\forall int x; x == Integer.parseInt(a) && x != Integer.parseInt(b); x == y);
                                                                                           ^
  symbol:   variable y
  location: class calc
2 errors

public class calc {
    //@ requires args.length >= 2;
    //@ ensures args.length < 2 ==> true;
    public static void fun(String[] args) {
        if (args.length < 2) {
            System.out.println("need two arguments");
            return;
        }
        new calc().do_stuff(args[0], args[1]);
    }

    //@ requires a != null && b != null;
    //@ requires (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b));
    //@ ensures (\forall int x; x == Integer.parseInt(a) && x != Integer.parseInt(b); x == y);
    public void do_stuff(String a, String b) {
        try {
            int x = Integer.parseInt(a);
            int y = Integer.parseInt(b);
            assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
        } catch (java.lang.NumberFormatException e) {
        }
    }
}
/home/max/Documents/JMLGPT/tmp/calc.java:14: error: cannot find symbol
    //@ ensures (\forall int x; x == Integer.parseInt(a) && x != Integer.parseInt(b); x == y);
                                                                                           ^
  symbol:   variable y
  location: class calc
1 error

public class calc {
    //@ requires args.length >= 2;
    //@ ensures args.length < 2 ==> true;
    public static void fun(String[] args) {
        if (args.length < 2) {
            System.out.println("need two arguments");
            return;
        }
        new calc().do_stuff(args[0], args[1]);
    }

    //@ requires a != null && b != null;
    //@ requires (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b));
    //@ ensures (\forall int x; x == Integer.parseInt(a) && x != Integer.parseInt(b); x == Integer.parseInt(b));
    public void do_stuff(String a, String b) {
        try {
            int x = Integer.parseInt(a);
            int y = Integer.parseInt(b);
            assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
        } catch (java.lang.NumberFormatException e) {
        }
    }
}
