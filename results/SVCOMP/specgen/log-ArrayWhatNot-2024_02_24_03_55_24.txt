class ArrayWhatNot {
    class what_not {
    };

    //@ requires size >= 8;
    //@ ensures \result == 1;
    public static int func(int size) {
        if (size < 8) return -1;

        int int_array[] = new int[size];

        //@ maintaining (\forall int i; 0 <= i && i < size; int_array[i] == i);
        for (int i = 0; i < size; i++)
            int_array[i] = i;

        if (int_array[7] != 7)
            return 0;

        what_not what_not_array[] = new what_not[size];

        //@ ensures what_not_array.length == size;
        if (what_not_array.length != size)
            return 0;
        return 1;
    }
}
/home/max/Documents/JMLGPT/tmp/ArrayWhatNot.java:12: error: variable i is already defined in method func(int)
        //@ maintaining (\forall int i; 0 <= i && i < size; int_array[i] == i);
                                     ^
1 error

class ArrayWhatNot {
    class what_not {
    };

    //@ requires size >= 8;
    //@ ensures \result == 1;
    public static int func(int size) {
        if (size < 8) return -1;

        int int_array[] = new int[size];

        //@ maintaining (\forall int j; 0 <= j && j < size; int_array[j] == j);
        for (int i = 0; i < size; i++)
            int_array[i] = i;

        if (int_array[7] != 7)
            return 0;

        what_not what_not_array[] = new what_not[size];

        //@ ensures what_not_array.length == size;
        if (what_not_array.length != size)
            return 0;
        return 1;
    }
}
/home/max/Documents/JMLGPT/tmp/ArrayWhatNot.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method func
        //@ maintaining (\forall int j; 0 <= j && j < size; int_array[j] == j);
            ^
/home/max/Documents/JMLGPT/tmp/ArrayWhatNot.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method func
        //@ maintaining (\forall int j; 0 <= j && j < size; int_array[j] == j);
            ^
2 verification failures

class ArrayWhatNot {
    class what_not {
    };

    //@ requires size >= 8;
    //@ ensures \result == 1;
    public static int func(int size) {
        if (size < 8) return -1;

        int int_array[] = new int[size];

        //@ maintaining (\forall int j; 0 < j && j <= size; int_array[j] == j);  
        for (int i = 0; i < size; i++)
            int_array[i] = i;

        if (int_array[7] != 7)
            return 0;

        what_not what_not_array[] = new what_not[size];

        //@ ensures what_not_array.length == size;
        if (what_not_array.length != size)
            return 0;
        return 1;
    }
}

/home/max/Documents/JMLGPT/tmp/ArrayWhatNot.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method func
        //@ maintaining (\forall int j; 0 < j && j <= size; int_array[j] == j);  
            ^
/home/max/Documents/JMLGPT/tmp/ArrayWhatNot.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method func
        //@ maintaining (\forall int j; 0 < j && j <= size; int_array[j] == j);  
            ^
2 verification failures

class ArrayWhatNot {
    class what_not {
    };

    //@ requires size >= 8;
    //@ ensures \result == 1;
    public static int func(int size) {
        if (size < 8) return -1;

        int int_array[] = new int[size];

        //@ maintaining (\forall int j; 0 <= j && j <= size; int_array[j] == j);  
        for (int i = 0; i < size; i++)
            int_array[i] = i;

        if (int_array[7] != 7)
            return 0;

        what_not what_not_array[] = new what_not[size];

        //@ ensures what_not_array.length == size;
        if (what_not_array.length != size)
            return 0;
        return 1;
    }
}

/home/max/Documents/JMLGPT/tmp/ArrayWhatNot.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method func
        //@ maintaining (\forall int j; 0 <= j && j <= size; int_array[j] == j);  
            ^
/home/max/Documents/JMLGPT/tmp/ArrayWhatNot.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method func
        //@ maintaining (\forall int j; 0 <= j && j <= size; int_array[j] == j);  
            ^
2 verification failures

class ArrayWhatNot {
    class what_not {
    };

    //@ requires size >= 8;
    //@ ensures \result == 1;
    public static int func(int size) {
        if (size < 8) return -1;

        int int_array[] = new int[size];

        //@ maintaining (\forall int j; 0 - 1 <= j && j <= size; int_array[j] == j);  
        for (int i = 0; i < size; i++)
            int_array[i] = i;

        if (int_array[7] != 7)
            return 0;

        what_not what_not_array[] = new what_not[size];

        //@ ensures what_not_array.length == size;
        if (what_not_array.length != size)
            return 0;
        return 1;
    }
}

/home/max/Documents/JMLGPT/tmp/ArrayWhatNot.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method func
        //@ maintaining (\forall int j; 0 - 1 <= j && j <= size; int_array[j] == j);  
            ^
/home/max/Documents/JMLGPT/tmp/ArrayWhatNot.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method func
        //@ maintaining (\forall int j; 0 - 1 <= j && j <= size; int_array[j] == j);  
            ^
2 verification failures

class ArrayWhatNot {
    class what_not {
    };

    //@ requires size >= 8;
    //@ ensures \result == 1;
    public static int func(int size) {
        if (size < 8) return -1;

        int int_array[] = new int[size];

        //@ maintaining (\exists int j; 0 < j && j <= size; int_array[j] == j);  
        for (int i = 0; i < size; i++)
            int_array[i] = i;

        if (int_array[7] != 7)
            return 0;

        what_not what_not_array[] = new what_not[size];

        //@ ensures what_not_array.length == size;
        if (what_not_array.length != size)
            return 0;
        return 1;
    }
}

/home/max/Documents/JMLGPT/tmp/ArrayWhatNot.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method func
        //@ maintaining (\exists int j; 0 < j && j <= size; int_array[j] == j);  
            ^
/home/max/Documents/JMLGPT/tmp/ArrayWhatNot.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method func
        //@ maintaining (\exists int j; 0 < j && j <= size; int_array[j] == j);  
            ^
2 verification failures

class ArrayWhatNot {
    class what_not {
    };

    //@ requires size >= 8;
    //@ ensures \result == 1;
    public static int func(int size) {
        if (size < 8) return -1;

        int int_array[] = new int[size];

        //@ maintaining (\exists int j; 0 <= j && j <= size; int_array[j] == j);  
        for (int i = 0; i < size; i++)
            int_array[i] = i;

        if (int_array[7] != 7)
            return 0;

        what_not what_not_array[] = new what_not[size];

        //@ ensures what_not_array.length == size;
        if (what_not_array.length != size)
            return 0;
        return 1;
    }
}

/home/max/Documents/JMLGPT/tmp/ArrayWhatNot.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method func
        //@ maintaining (\exists int j; 0 <= j && j <= size; int_array[j] == j);  
            ^
/home/max/Documents/JMLGPT/tmp/ArrayWhatNot.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method func
        //@ maintaining (\exists int j; 0 <= j && j <= size; int_array[j] == j);  
            ^
2 verification failures

class ArrayWhatNot {
    class what_not {
    };

    //@ requires size >= 8;
    //@ ensures \result == 1;
    public static int func(int size) {
        if (size < 8) return -1;

        int int_array[] = new int[size];

        //@ maintaining (\exists int j; 0 - 1 <= j && j <= size; int_array[j] == j);  
        for (int i = 0; i < size; i++)
            int_array[i] = i;

        if (int_array[7] != 7)
            return 0;

        what_not what_not_array[] = new what_not[size];

        //@ ensures what_not_array.length == size;
        if (what_not_array.length != size)
            return 0;
        return 1;
    }
}

/home/max/Documents/JMLGPT/tmp/ArrayWhatNot.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method func
        //@ maintaining (\exists int j; 0 - 1 <= j && j <= size; int_array[j] == j);  
            ^
/home/max/Documents/JMLGPT/tmp/ArrayWhatNot.java:12: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method func
        //@ maintaining (\exists int j; 0 - 1 <= j && j <= size; int_array[j] == j);  
            ^
2 verification failures

class ArrayWhatNot {
    class what_not {
    };

    //@ requires size >= 8;
    //@ ensures \result == 1;
    public static int func(int size) {
        if (size < 8) return -1;

        int int_array[] = new int[size];

 
        for (int i = 0; i < size; i++)
            int_array[i] = i;

        if (int_array[7] != 7)
            return 0;

        what_not what_not_array[] = new what_not[size];

        //@ ensures what_not_array.length == size;
        if (what_not_array.length != size)
            return 0;
        return 1;
    }
}

/home/max/Documents/JMLGPT/tmp/ArrayWhatNot.java:14: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method func
            int_array[i] = i;
                     ^
/home/max/Documents/JMLGPT/tmp/ArrayWhatNot.java:14: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method func
            int_array[i] = i;
                     ^
2 verification failures

