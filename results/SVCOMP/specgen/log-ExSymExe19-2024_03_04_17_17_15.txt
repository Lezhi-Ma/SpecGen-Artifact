class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                       ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                 ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                           ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                   ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                       ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                 ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                           ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                   ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                       ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                 ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                           ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                   ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                       ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                 ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                           ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                   ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                       ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                 ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                           ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                   ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                       ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                 ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                           ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                   ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                       ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                 ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                           ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                   ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                       ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                 ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                           ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z + r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                   ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                       ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                 ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                           ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                   ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                       ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                 ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                           ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                   ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                       ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                 ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                           ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                   ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                       ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                 ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                           ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z + r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                   ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                       ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                 ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                           ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                   ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                       ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                 ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                           ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == + (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                   ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                       ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                 ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                           ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z + r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                   ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                       ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                            ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                 ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x > 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                        ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x < 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                         ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                           ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                             ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r > z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                  ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r < z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                              ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                               ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:20: error: ')' expected
  //@ ensures \result ==> x == z - r && z == 3 * (z - r) && r == - (3 * (z - r)) && (x >= 99 ==> (System.out.println("branch FOO1") && \result == false)) && (x - 1 <= 99 ==> (System.out.println("branch FOO2") && (r >= z ==> (System.out.println("branch BOO1") && \result == true)) && (r - 1 <= z ==> (System.out.println("branch BOO2") && \result == true)));  
                                                                                                                                                                                                                                                                                                                                                                   ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
  //@ ensures \result ==> test(3, field, field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
 
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> field < 0;
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:7: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:7: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
                                                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:7: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> field == (arg % 10) && field2 == \old(field2);
                                                                ^
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:8: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> test(3, field, field2);
                                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:8: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> test(3, field, field2);
                                         ^
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:8: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result ==> test(3, field, field2);
                          ^
7 errors

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field < 0;  
 
 
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
 
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> field < 0;  
                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result ==> field <= 0;  
 
 
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
 
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> field <= 0;  
                          ^
1 error

class Main {
  static int field;
  static int field2;

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
 
 
 
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires true;
 
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}


