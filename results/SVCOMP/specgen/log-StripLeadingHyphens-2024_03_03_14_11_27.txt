import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i + 2]);
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        temp_Boolean = (str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = str[0] == '-';
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
    
}
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:17: verify: The prover cannot establish an assertion (PossiblyTooLargeIndex) in method stripLeadingHyphens
        temp_Boolean = (str[0] == '-' && str[1] == '-');
                           ^
1 verification failure

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i + 2]);
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        temp_Boolean = (str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = str[0] == '-';
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
    
}
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:18: verify: The prover cannot establish an assertion (PossiblyTooLargeIndex) in method stripLeadingHyphens
        temp_Boolean = (str[0] == '-' && str[1] == '-');
                           ^
1 verification failure

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i + 2]);
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i + 2]);
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 < i && i < \result.length; \result[i] == str[i + 2]);  
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 < i && i < \result.length; \result[i] == str[i + 2]);  
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 < i && i <= \result.length; \result[i] == str[i + 2]);  
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 < i && i <= \result.length; \result[i] == str[i + 2]);  
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i + 2]);  
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i + 2]);  
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i <= \result.length; \result[i] == str[i + 2]);  
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i <= \result.length; \result[i] == str[i + 2]);  
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 - 1 <= i && i < \result.length; \result[i] == str[i + 2]);  
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 - 1 <= i && i < \result.length; \result[i] == str[i + 2]);  
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 - 1 <= i && i <= \result.length; \result[i] == str[i + 2]);  
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 - 1 <= i && i <= \result.length; \result[i] == str[i + 2]);  
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\exists int i; 0 < i && i < \result.length; \result[i] == str[i + 2]);  
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\exists int i; 0 < i && i < \result.length; \result[i] == str[i + 2]);  
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\exists int i; 0 < i && i <= \result.length; \result[i] == str[i + 2]);  
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\exists int i; 0 < i && i <= \result.length; \result[i] == str[i + 2]);  
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\exists int i; 0 <= i && i < \result.length; \result[i] == str[i + 2]);  
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\exists int i; 0 <= i && i < \result.length; \result[i] == str[i + 2]);  
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\exists int i; 0 <= i && i <= \result.length; \result[i] == str[i + 2]);  
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\exists int i; 0 <= i && i <= \result.length; \result[i] == str[i + 2]);  
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\exists int i; 0 - 1 <= i && i < \result.length; \result[i] == str[i + 2]);  
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\exists int i; 0 - 1 <= i && i < \result.length; \result[i] == str[i + 2]);  
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\exists int i; 0 - 1 <= i && i <= \result.length; \result[i] == str[i + 2]);  
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\exists int i; 0 - 1 <= i && i <= \result.length; \result[i] == str[i + 2]);  
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
 
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:7:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
 
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';  
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:7:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';  
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
 
 
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:8:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
 
 
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);  
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:8:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 2, str.length);  
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
 
 
 
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:9:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> str[0] == '-';
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
 
 
 
    //@ ensures \result != null ==> str[0] == '-';  
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:9:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> str[0] == '-';  
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
 
 
 
 
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:10:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
 
 
 
 
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);  
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:10:) in method stripLeadingHyphens
        return str;
        ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:28:
    //@ ensures \result != null ==> \result == Arrays.copyOfRange(str, 1, str.length);  
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
 
 
 
 
 
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:11:) in method stripLeadingHyphens
                return Arrays.copyOfRange(str, 1, str.length);
                ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:25:
    //@ ensures \result == str;
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
 
 
 
 
 
    //@ ensures \result == str;  
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}

/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:11:) in method stripLeadingHyphens
                return Arrays.copyOfRange(str, 1, str.length);
                ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:25:
    //@ ensures \result == str;  
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
 
 
 
 
 
 
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= str.length;
        //@ assume 0 <= str.length - 1;
        temp_Boolean = (str.length >= 2 && str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = (str.length >= 1 && str[0] == '-');
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
}


