class Main {

  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ ensures \result == (x > 0 ? x % 10 : -(x % 10)) > 0;
  public static boolean main(int x) {
    x = x > 0 ? x % 10 : -(x % 10);

    Main inst = new Main();
    return inst.test(x);
  }

  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ ensures \result == ((double) (x + 1) > 0);
  public boolean test(int x) {
    double res = (double) ++x;
    if (res > 0) System.out.println("x >0");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeI2D.java:9: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeI2D.java:4:) in method main
    return inst.test(x);
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeI2D.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeI2D.java:9:
  //@ ensures \result == (x > 0 ? x % 10 : -(x % 10)) > 0;
      ^
2 verification failures

class Main {

  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ ensures \result == (x > 0 ? x % 10 : -(x % 10)) > 0;  
  public static boolean main(int x) {
    x = x > 0 ? x % 10 : -(x % 10);

    Main inst = new Main();
    return inst.test(x);
  }

  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ ensures \result == ((double) (x + 1) > 0);
  public boolean test(int x) {
    double res = (double) ++x;
    if (res > 0) System.out.println("x >0");
    else {
      return false;
    }
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeI2D.java:9: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeI2D.java:4:) in method main
    return inst.test(x);
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeI2D.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeI2D.java:9:
  //@ ensures \result == (x > 0 ? x % 10 : -(x % 10)) > 0;  
      ^
2 verification failures

class Main {

  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ ensures \result == (x > 0 ? x % 10 : -(x % 10)) >= 0;  
  public static boolean main(int x) {
    x = x > 0 ? x % 10 : -(x % 10);

    Main inst = new Main();
    return inst.test(x);
  }

  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ ensures \result == ((double) (x + 1) > 0);
  public boolean test(int x) {
    double res = (double) ++x;
    if (res > 0) System.out.println("x >0");
    else {
      return false;
    }
    return true;
  }
}


