import java.util.Random;

public class boolean2 {
    //@ ensures \result <==> f(b);
    public static boolean fun() {
        boolean b = new Random().nextBoolean();
        boolean result = f(b);
        return result == !b;
    }

    //@ ensures \result <==> !b;
    public static boolean f(boolean b) {
        return !b;
    }
}
/home/max/Documents/JMLGPT/tmp/boolean2.java:4: error: cannot find symbol
    //@ ensures \result <==> f(b);
                               ^
  symbol:   variable b
  location: class boolean2
1 error

import java.util.Random;

public class boolean2 {
    //@ ensures \result <==> f(\result);
    public static boolean fun() {
        boolean b = new Random().nextBoolean();
        boolean result = f(b);
        return result == !b;
    }

    //@ ensures \result <==> !b;
    public static boolean f(boolean b) {
        return !b;
    }
}
/home/max/Documents/JMLGPT/tmp/boolean2.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/boolean2.java:4:) in method fun
        return result == !b;
        ^
/home/max/Documents/JMLGPT/tmp/boolean2.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boolean2.java:8:
    //@ ensures \result <==> f(\result);
        ^
2 verification failures

import java.util.Random;

public class boolean2 {
    //@ ensures \result <==> f(\result);  
    public static boolean fun() {
        boolean b = new Random().nextBoolean();
        boolean result = f(b);
        return result == !b;
    }

    //@ ensures \result <==> !b;
    public static boolean f(boolean b) {
        return !b;
    }
}

/home/max/Documents/JMLGPT/tmp/boolean2.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/boolean2.java:4:) in method fun
        return result == !b;
        ^
/home/max/Documents/JMLGPT/tmp/boolean2.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/boolean2.java:8:
    //@ ensures \result <==> f(\result);  
        ^
2 verification failures

import java.util.Random;

public class boolean2 {
 
    public static boolean fun() {
        boolean b = new Random().nextBoolean();
        boolean result = f(b);
        return result == !b;
    }

    //@ ensures \result <==> !b;
    public static boolean f(boolean b) {
        return !b;
    }
}


