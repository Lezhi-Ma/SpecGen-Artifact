class SQLException extends Exception {
}

public class Statement {

  //@ requires !s.contains("<bad/>");
  //@ ensures SQLException is not thrown if the precondition is satisfied
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  //@ requires !s.contains("<bad/>");
  //@ ensures SQLException is not thrown if the precondition is satisfied
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  //@ requires !s.contains("<bad/>");
  //@ ensures SQLException is not thrown if the precondition is satisfied
  public void executeQuery(String s) {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }
}
/home/max/Documents/JMLGPT/tmp/Statement.java:7: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures SQLException is not thrown if the precondition is satisfied
                           ^
/home/max/Documents/JMLGPT/tmp/Statement.java:15: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures SQLException is not thrown if the precondition is satisfied
                           ^
/home/max/Documents/JMLGPT/tmp/Statement.java:23: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures SQLException is not thrown if the precondition is satisfied
                           ^
3 errors

class SQLException extends Exception {
}

public class Statement {

  //@ requires !s.contains("<bad/>");
  //@ ensures SQLException is not thrown if the precondition is satisfied
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  //@ requires !s.contains("<bad/>");
  //@ ensures SQLException is not thrown if the precondition is satisfied
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  //@ requires !s.contains("<bad/>");
  //@ ensures SQLException is not thrown if the precondition is satisfied
  public void executeQuery(String s) {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }
}
/home/max/Documents/JMLGPT/tmp/Statement.java:7: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures SQLException is not thrown if the precondition is satisfied
                           ^
/home/max/Documents/JMLGPT/tmp/Statement.java:15: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures SQLException is not thrown if the precondition is satisfied
                           ^
/home/max/Documents/JMLGPT/tmp/Statement.java:23: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures SQLException is not thrown if the precondition is satisfied
                           ^
3 errors

class SQLException extends Exception {
}

public class Statement {

  //@ requires !s.contains("<bad/>");
  //@ ensures \result == null;
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  //@ requires !s.contains("<bad/>");
  //@ ensures \result == null;
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  //@ requires !s.contains("<bad/>");
  //@ ensures \result == null;
  public void executeQuery(String s) {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }
}
/home/max/Documents/JMLGPT/tmp/Statement.java:7: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures \result == null;
               ^
/home/max/Documents/JMLGPT/tmp/Statement.java:15: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures \result == null;
               ^
/home/max/Documents/JMLGPT/tmp/Statement.java:23: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures \result == null;
               ^
3 errors

class SQLException extends Exception {
}

public class Statement {

  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void executeQuery(String s) {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }
}
/home/max/Documents/JMLGPT/tmp/Statement.java:10: verify: The prover cannot establish an assertion (Assert) in method execute
      assert false;
      ^
/home/max/Documents/JMLGPT/tmp/Statement.java:26: verify: The prover cannot establish an assertion (Assert) in method executeQuery
      assert false;
      ^
/home/max/Documents/JMLGPT/tmp/Statement.java:18: verify: The prover cannot establish an assertion (Assert) in method executeUpdate
      assert false;
      ^
3 verification failures

class SQLException extends Exception {
}

public class Statement {

  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void executeQuery(String s) {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }
}
/home/max/Documents/JMLGPT/tmp/Statement.java:26: error: unreported exception SQLException; must be caught or declared to be thrown
      throw new SQLException();
      ^
1 error

class SQLException extends Exception {
}

public class Statement {

  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void executeQuery(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }
}

