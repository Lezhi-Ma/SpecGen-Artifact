class Main {
  //@ ensures \result <==> (\forall int i; 0 <= i && i < as.length; !(as[i] instanceof B));
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: cannot find symbol
  //@ ensures \result <==> (\forall int i; 0 <= i && i < as.length; !(as[i] instanceof B));
                                                         ^
  symbol:   variable as
  location: class Main
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: cannot find symbol
  //@ ensures \result <==> (\forall int i; 0 <= i && i < as.length; !(as[i] instanceof B));
                                                                      ^
  symbol:   variable as
  location: class Main
2 errors

class Main {
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(as[i] instanceof B));
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: cannot find symbol
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(as[i] instanceof B));
                                                              ^
  symbol:   variable as
  location: class Main
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 && as[i] instanceof B));
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: cannot find symbol
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 && as[i] instanceof B));
                                                                        ^
  symbol:   variable as
  location: class Main
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 && (i == 0 && i instanceof B)));
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 && (i == 0 && i instanceof B)));
                                                                                   ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 && as[i] instanceof B));
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: cannot find symbol
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 && as[i] instanceof B));
                                                                        ^
  symbol:   variable as
  location: class Main
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 && i instanceof B));
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 && i instanceof B));
                                                                        ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 && i instanceof B));
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 && i instanceof B));
                                                                        ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 && i instanceof B));
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 && i instanceof B));
                                                                        ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 && i instanceof B));
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 && i instanceof B));
                                                                        ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 && i instanceof B));
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 && i instanceof B));
                                                                        ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 < i && i < 2; !(i == 0 && i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\forall int i; 0 < i && i < 2; !(i == 0 && i instanceof B));  
                                                                       ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 < i && i <= 2; !(i == 0 && i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\forall int i; 0 < i && i <= 2; !(i == 0 && i instanceof B));  
                                                                        ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 && i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 && i instanceof B));  
                                                                        ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 <= i && i <= 2; !(i == 0 && i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\forall int i; 0 <= i && i <= 2; !(i == 0 && i instanceof B));  
                                                                         ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 2; !(i == 0 && i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 2; !(i == 0 && i instanceof B));  
                                                                            ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 2; !(i == 0 && i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 2; !(i == 0 && i instanceof B));  
                                                                             ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\exists int i; 0 < i && i < 2; !(i == 0 && i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\exists int i; 0 < i && i < 2; !(i == 0 && i instanceof B));  
                                                                       ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\exists int i; 0 < i && i < 2; !(i == 0 || i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\exists int i; 0 < i && i < 2; !(i == 0 || i instanceof B));  
                                                                       ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\exists int i; 0 < i && i <= 2; !(i == 0 && i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\exists int i; 0 < i && i <= 2; !(i == 0 && i instanceof B));  
                                                                        ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\exists int i; 0 < i && i <= 2; !(i == 0 || i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\exists int i; 0 < i && i <= 2; !(i == 0 || i instanceof B));  
                                                                        ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\exists int i; 0 <= i && i < 2; !(i == 0 && i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\exists int i; 0 <= i && i < 2; !(i == 0 && i instanceof B));  
                                                                        ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\exists int i; 0 <= i && i < 2; !(i == 0 || i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\exists int i; 0 <= i && i < 2; !(i == 0 || i instanceof B));  
                                                                        ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\exists int i; 0 <= i && i <= 2; !(i == 0 && i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\exists int i; 0 <= i && i <= 2; !(i == 0 && i instanceof B));  
                                                                         ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\exists int i; 0 <= i && i <= 2; !(i == 0 || i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\exists int i; 0 <= i && i <= 2; !(i == 0 || i instanceof B));  
                                                                         ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 2; !(i == 0 && i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 2; !(i == 0 && i instanceof B));  
                                                                            ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 2; !(i == 0 || i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 2; !(i == 0 || i instanceof B));  
                                                                            ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 2; !(i == 0 && i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 2; !(i == 0 && i instanceof B));  
                                                                             ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 2; !(i == 0 || i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 2; !(i == 0 || i instanceof B));  
                                                                             ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 < i && i < 2; !(i == 0 || i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\forall int i; 0 < i && i < 2; !(i == 0 || i instanceof B));  
                                                                       ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 < i && i <= 2; !(i == 0 || i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\forall int i; 0 < i && i <= 2; !(i == 0 || i instanceof B));  
                                                                        ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 || i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\forall int i; 0 <= i && i < 2; !(i == 0 || i instanceof B));  
                                                                        ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 <= i && i <= 2; !(i == 0 || i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\forall int i; 0 <= i && i <= 2; !(i == 0 || i instanceof B));  
                                                                         ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 2; !(i == 0 || i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 2; !(i == 0 || i instanceof B));  
                                                                            ^
  required: reference
  found:    int
1 error

class Main {
  //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 2; !(i == 0 || i instanceof B));  
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}

/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: unexpected type
  //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 2; !(i == 0 || i instanceof B));  
                                                                             ^
  required: reference
  found:    int
1 error

class Main {
 
  public static boolean f() {
    A[] as = {new A(), new B()};
    if (!(!(as[0] instanceof B)))
      return false;
    if (!(as[1] instanceof B))
      return false;
    return true;
  }
}
;

class A {}

class B extends A {}


