import java.util.Random;

class assert1 {
    //@ ensures i >= 10 ==> \result == "my super assertion";
    //@ ensures i < 10 ==> \result == null;
    public static void func() {
        int i = new Random().nextInt();

        if (i >= 10) assert i >= 10 : "my super assertion"; // should hold

        if (i >= 20) assert i >= 10 : "my super assertion"; // should hold
    }
}
/home/max/Documents/JMLGPT/tmp/assert1.java:4: error: cannot find symbol
    //@ ensures i >= 10 ==> \result == "my super assertion";
                ^
  symbol:   variable i
  location: class assert1
/home/max/Documents/JMLGPT/tmp/assert1.java:4: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures i >= 10 ==> \result == "my super assertion";
                             ^
/home/max/Documents/JMLGPT/tmp/assert1.java:5: error: cannot find symbol
    //@ ensures i < 10 ==> \result == null;
                ^
  symbol:   variable i
  location: class assert1
/home/max/Documents/JMLGPT/tmp/assert1.java:5: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures i < 10 ==> \result == null;
                            ^
4 errors

import java.util.Random;

class assert1 {
    //@ ensures i >= 10 ==> true;
    //@ ensures i < 10 ==> true;
    public static void func() {
        int i = new Random().nextInt();

        if (i >= 10) assert i >= 10 : "my super assertion"; // should hold

        if (i >= 20) assert i >= 10 : "my super assertion"; // should hold
    }
}
/home/max/Documents/JMLGPT/tmp/assert1.java:4: error: cannot find symbol
    //@ ensures i >= 10 ==> true;
                ^
  symbol:   variable i
  location: class assert1
/home/max/Documents/JMLGPT/tmp/assert1.java:5: error: cannot find symbol
    //@ ensures i < 10 ==> true;
                ^
  symbol:   variable i
  location: class assert1
2 errors

import java.util.Random;

class assert1 {
    //@ ensures true;
    //@ ensures true;
    public static void func() {
        int i = new Random().nextInt();

        if (i >= 10) assert i >= 10 : "my super assertion"; // should hold

        if (i >= 20) assert i >= 10 : "my super assertion"; // should hold
    }
}

