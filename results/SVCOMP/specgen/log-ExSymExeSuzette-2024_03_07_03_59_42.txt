class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
  //@ ensures y > 10 ==> \result == y;
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || test(arg, 0);
                                                           ^
1 error

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
  //@ ensures y > 10 ==> \result == y;
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || new Main().test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || new Main().test(arg, 0);
                                                           ^
1 error

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
  //@ ensures y > 10 ==> \result == y;
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || test(arg, 0);
                                                           ^
1 error

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
  //@ ensures y > 10 ==> \result == y;
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || new Main().test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || new Main().test(arg, 0);
                                                           ^
1 error

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
  //@ ensures y > 10 ==> \result == y;
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || test(arg, 0);
                                                           ^
1 error

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
  //@ ensures y > 10 ==> \result == y;
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || new Main().test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || new Main().test(arg, 0);
                                                           ^
1 error

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
  //@ ensures y > 10 ==> \result == y;
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || test(arg, 0);
                                                           ^
1 error

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
  //@ ensures y > 10 ==> \result == y;
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || new Main().test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || new Main().test(arg, 0);
                                                           ^
1 error

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
  //@ ensures y > 10 ==> \result == y;
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || test(arg, 0);
                                                           ^
1 error

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
  //@ ensures y > 10 ==> \result == y;
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || test(arg, 0);
                                                           ^
1 error

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
  //@ ensures y > 10 ==> \result == y;
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || test(arg, 0);  
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result == true ==> (arg < 0 || arg > 10) || test(arg, 0);  
                                                           ^
1 error

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
  //@ ensures y > 10 ==> \result == y;
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
  //@ ensures \result == true ==> (arg < 0 || arg >= 10) || test(arg, 0);  
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result == true ==> (arg < 0 || arg >= 10) || test(arg, 0);  
                                                            ^
1 error

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
  //@ ensures y > 10 ==> \result == y;
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
  //@ ensures \result == true ==> (arg <= 0 || arg > 10) || test(arg, 0);  
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result == true ==> (arg <= 0 || arg > 10) || test(arg, 0);  
                                                            ^
1 error

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
  //@ ensures y > 10 ==> \result == y;
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
  //@ ensures \result == true ==> (arg <= 0 || arg >= 10) || test(arg, 0);  
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result == true ==> (arg <= 0 || arg >= 10) || test(arg, 0);  
                                                             ^
1 error

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
  //@ ensures y > 10 ==> \result == y;
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
 
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:20:
  //@ ensures y > 10 ==> \result == y;
      ^
2 verification failures

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
  //@ ensures y > 10 ==> \result == y;  
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
 
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:20:
  //@ ensures y > 10 ==> \result == y;  
      ^
2 verification failures

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
  //@ ensures y >= 10 ==> \result == y;  
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
 
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16:) in method method_a
    if (x > 10) return x;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:20:
  //@ ensures y >= 10 ==> \result == y;  
      ^
2 verification failures

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
 
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
 
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:9: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:3:) in method test
      return false;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:9:
  //@ ensures \result == method_a(x, y) > 0 ? false : true;
      ^
2 verification failures

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) > 0 ? false : true;  
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
 
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
 
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:9: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:3:) in method test
      return false;
      ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:9:
  //@ ensures \result == method_a(x, y) > 0 ? false : true;  
      ^
2 verification failures

class Main {
  //@ requires x >= 0 && y >= 0;
  //@ ensures \result == method_a(x, y) >= 0 ? false : true;  
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
 
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
 
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:11: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:3:) in method test
    return true;
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:11:
  //@ ensures \result == method_a(x, y) >= 0 ? false : true;  
      ^
2 verification failures

class Main {
  //@ requires x >= 0 && y >= 0;
 
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires x >= 0 && y >= 0;
  //@ ensures x > 10 ==> \result == x;
 
  //@ ensures !(x > 10 || y > 10) ==> \result == 0;
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ ensures z > 10 ==> \result == z + 1;
  //@ ensures !(z > 10) ==> \result == z - 1;
  public int method_b(int z) {

    if (z > 10) return z + 1;
    else return z - 1;
  }

  //@ requires arg >= 0 && arg <= 10;
 
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}


