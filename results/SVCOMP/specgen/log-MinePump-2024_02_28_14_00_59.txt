public class MinePump {

  boolean pumpRunning = false;

  boolean systemActive = true;

  Environment env;

  //@ requires env != null;
  public MinePump(Environment env) {
    super();
    this.env = env;
  }

  //@ ensures pumpRunning ==> env.lowerWaterLevel();
  //@ ensures systemActive ==> processEnvironment();
  public void timeShift() {
    if (pumpRunning) env.lowerWaterLevel();
    if (systemActive) processEnvironment();
  }

  private void processEnvironment__wrappee__base() {}

  //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
  //@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
  public void processEnvironment() {
    if (pumpRunning && isMethaneAlarm()) {
      deactivatePump();
    } else {
      processEnvironment__wrappee__base();
    }
  }

  //@ ensures pumpRunning;
  void activatePump() {
    pumpRunning = true;
  }

  //@ ensures !pumpRunning;
  public boolean isPumpRunning() {
    return pumpRunning;
  }

  //@ ensures !pumpRunning;
  void deactivatePump() {
    pumpRunning = false;
  }

  //@ ensures \result ==> env.isMethaneLevelCritical();
  boolean isMethaneAlarm() {
    return env.isMethaneLevelCritical();
  }

  @Override
  public String toString() {
    return "Pump(System:"
        + (systemActive ? "On" : "Off")
        + ",Pump:"
        + (pumpRunning ? "On" : "Off")
        + ") "
        + env.toString();
  }

  public Environment getEnv() {
    return env;
  }

  //@ ensures !pumpRunning;
  public void stopSystem() {
    if (pumpRunning) {
      deactivatePump();
    }
    assert !pumpRunning;
    systemActive = false;
  }

  //@ ensures !pumpRunning;
  public void startSystem() {
    assert !pumpRunning;
    systemActive = true;
  }

  //@ ensures \result;
  public boolean isSystemActive() {
    return systemActive;
  }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:7: error: cannot find symbol
  Environment env;
  ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:10: error: cannot find symbol
  public MinePump(Environment env) {
                  ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:64: error: cannot find symbol
  public Environment getEnv() {
         ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:15: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures pumpRunning ==> env.lowerWaterLevel();
              ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:15: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures pumpRunning ==> env.lowerWaterLevel();
                              ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures systemActive ==> processEnvironment();
              ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: incompatible types: void cannot be converted to boolean
  //@ ensures systemActive ==> processEnvironment();
                                                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:24: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
              ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:24: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:24: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
                                                   ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: An identifier with private visibility may not be used in a ensures clause with public visibility
  //@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: incompatible types: void cannot be converted to boolean
  //@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
                                                                ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:39: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures !pumpRunning;
               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:68: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures !pumpRunning;
               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:77: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures !pumpRunning;
               ^
16 errors

public class MinePump {

	private /*@ spec_public @*/ boolean pumpRunning = false;
	private /*@ spec_public @*/ boolean systemActive = true;
	private /*@ spec_public @*/ Environment env;

	//@ requires env != null;
	public MinePump(Environment env) {
		super();
		this.env = env;
	}

	//@ ensures pumpRunning ==> env.lowerWaterLevel();
	//@ ensures systemActive ==> processEnvironment();
	public void timeShift() {
		if (pumpRunning) env.lowerWaterLevel();
		if (systemActive) processEnvironment();
	}

	private void processEnvironment__wrappee__base() {}

	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	public void processEnvironment() {
		if (pumpRunning && isMethaneAlarm()) {
			deactivatePump();
		} else {
			processEnvironment__wrappee__base();
		}
	}

	//@ ensures pumpRunning;
	void activatePump() {
		pumpRunning = true;
	}

	//@ ensures !pumpRunning;
	public boolean isPumpRunning() {
		return pumpRunning;
	}

	//@ ensures !pumpRunning;
	void deactivatePump() {
		pumpRunning = false;
	}

	//@ ensures \result ==> env.isMethaneLevelCritical();
	boolean isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	@Override
	public String toString() {
		return "Pump(System:"
			+ (systemActive ? "On" : "Off")
			+ ",Pump:"
			+ (pumpRunning ? "On" : "Off")
			+ ") "
			+ env.toString();
	}

	public Environment getEnv() {
		return env;
	}

	//@ ensures !pumpRunning;
	public void stopSystem() {
		if (pumpRunning) {
			deactivatePump();
		}
		assert !pumpRunning;
		systemActive = false;
	}

	//@ ensures !pumpRunning;
	public void startSystem() {
		assert !pumpRunning;
		systemActive = true;
	}

	//@ ensures \result;
	public boolean isSystemActive() {
		return systemActive;
	}
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:5: error: cannot find symbol
	private /*@ spec_public @*/ Environment env;
	                            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:8: error: cannot find symbol
	public MinePump(Environment env) {
	                ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:62: error: cannot find symbol
	public Environment getEnv() {
	       ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:14: error: incompatible types: void cannot be converted to boolean
	//@ ensures systemActive ==> processEnvironment();
	                                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:22: error: An identifier with package visibility may not be used in a ensures clause with public visibility
	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	                           ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:23: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:23: error: incompatible types: void cannot be converted to boolean
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                                                              ^
7 errors

public class MinePump {

	private /*@ spec_public @*/ boolean pumpRunning = false;
	private /*@ spec_public @*/ boolean systemActive = true;
	private /*@ spec_public @*/ Environment env;

	//@ requires env != null;
	public MinePump(Environment env) {
		super();
		this.env = env;
	}

	//@ ensures pumpRunning ==> env.lowerWaterLevel();
	//@ ensures systemActive ==> processEnvironment();
	public void timeShift() {
		if (pumpRunning) env.lowerWaterLevel();
		if (systemActive) processEnvironment();
	}

	private void processEnvironment__wrappee__base() {}

	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	public void processEnvironment() {
		if (pumpRunning && isMethaneAlarm()) {
			deactivatePump();
		} else {
			processEnvironment__wrappee__base();
		}
	}

	//@ ensures pumpRunning;
	void activatePump() {
		pumpRunning = true;
	}

	//@ ensures !pumpRunning;
	/*@ pure @*/ public boolean isPumpRunning() {
		return pumpRunning;
	}

	//@ ensures !pumpRunning;
	void deactivatePump() {
		pumpRunning = false;
	}

	//@ ensures \result ==> env.isMethaneLevelCritical();
	/*@ pure @*/ public boolean isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	@Override
	public String toString() {
		return "Pump(System:"
			+ (systemActive ? "On" : "Off")
			+ ",Pump:"
			+ (pumpRunning ? "On" : "Off")
			+ ") "
			+ env.toString();
	}

	public Environment getEnv() {
		return env;
	}

	//@ ensures !pumpRunning;
	public void stopSystem() {
		if (pumpRunning) {
			deactivatePump();
		}
		assert !pumpRunning;
		systemActive = false;
	}

	//@ ensures !pumpRunning;
	public void startSystem() {
		assert !pumpRunning;
		systemActive = true;
	}

	//@ ensures \result;
	/*@ pure @*/ public boolean isSystemActive() {
		return systemActive;
	}
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:5: error: cannot find symbol
	private /*@ spec_public @*/ Environment env;
	                            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:8: error: cannot find symbol
	public MinePump(Environment env) {
	                ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:62: error: cannot find symbol
	public Environment getEnv() {
	       ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:14: error: incompatible types: void cannot be converted to boolean
	//@ ensures systemActive ==> processEnvironment();
	                                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:23: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:23: error: incompatible types: void cannot be converted to boolean
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                                                              ^
6 errors

public class MinePump {

	private /*@ spec_public @*/ boolean pumpRunning = false;
	private /*@ spec_public @*/ boolean systemActive = true;
	private /*@ spec_public @*/ Environment env;

	//@ requires env != null;
	public MinePump(/*@ spec_public @*/ Environment env) {
		super();
		this.env = env;
	}

	//@ ensures pumpRunning ==> env.lowerWaterLevel();
	//@ ensures systemActive ==> processEnvironment();
	public void timeShift() {
		if (pumpRunning) env.lowerWaterLevel();
		if (systemActive) processEnvironment();
	}

	private void processEnvironment__wrappee__base() {}

	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	public void processEnvironment() {
		if (pumpRunning && isMethaneAlarm()) {
			deactivatePump();
		} else {
			processEnvironment__wrappee__base();
		}
	}

	//@ ensures pumpRunning;
	void activatePump() {
		pumpRunning = true;
	}

	//@ ensures !pumpRunning;
	/*@ pure @*/ public boolean isPumpRunning() {
		return pumpRunning;
	}

	//@ ensures !pumpRunning;
	void deactivatePump() {
		pumpRunning = false;
	}

	//@ ensures \result ==> env.isMethaneLevelCritical();
	/*@ pure @*/ public boolean isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	@Override
	public String toString() {
		return "Pump(System:"
			+ (systemActive ? "On" : "Off")
			+ ",Pump:"
			+ (pumpRunning ? "On" : "Off")
			+ ") "
			+ env.toString();
	}

	public /*@ spec_public @*/ Environment getEnv() {
		return env;
	}

	//@ ensures !pumpRunning;
	public void stopSystem() {
		if (pumpRunning) {
			deactivatePump();
		}
		assert !pumpRunning;
		systemActive = false;
	}

	//@ ensures !pumpRunning;
	public void startSystem() {
		assert !pumpRunning;
		systemActive = true;
	}

	//@ ensures \result;
	/*@ pure @*/ public boolean isSystemActive() {
		return systemActive;
	}
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:5: error: cannot find symbol
	private /*@ spec_public @*/ Environment env;
	                            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:8: error: cannot find symbol
	public MinePump(/*@ spec_public @*/ Environment env) {
	                                    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:62: error: cannot find symbol
	public /*@ spec_public @*/ Environment getEnv() {
	                           ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:14: error: incompatible types: void cannot be converted to boolean
	//@ ensures systemActive ==> processEnvironment();
	                                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:23: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:23: error: incompatible types: void cannot be converted to boolean
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                                                              ^
6 errors

public class MinePump {

	private /*@ spec_public @*/ boolean pumpRunning = false;
	private /*@ spec_public @*/ boolean systemActive = true;
	private /*@ spec_public @*/ Environment env;

	//@ requires env != null;
	public MinePump(/*@ spec_public @*/ Environment env) {
		super();
		this.env = env;
	}

	//@ ensures pumpRunning ==> env.lowerWaterLevel();
	//@ ensures systemActive ==> processEnvironment();
	public void timeShift() {
		if (pumpRunning) env.lowerWaterLevel();
		if (systemActive) processEnvironment();
	}

	private void processEnvironment__wrappee__base() {}

	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	public void processEnvironment() {
		if (pumpRunning && isMethaneAlarm()) {
			deactivatePump();
		} else {
			processEnvironment__wrappee__base();
		}
	}

	//@ ensures pumpRunning;
	void activatePump() {
		pumpRunning = true;
	}

	//@ ensures !pumpRunning;
	/*@ pure @*/ public boolean isPumpRunning() {
		return pumpRunning;
	}

	//@ ensures !pumpRunning;
	void deactivatePump() {
		pumpRunning = false;
	}

	//@ ensures \result ==> env.isMethaneLevelCritical();
	/*@ pure @*/ public boolean isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	@Override
	public String toString() {
		return "Pump(System:"
			+ (systemActive ? "On" : "Off")
			+ ",Pump:"
			+ (pumpRunning ? "On" : "Off")
			+ ") "
			+ env.toString();
	}

	public /*@ spec_public @*/ Environment getEnv() {
		return env;
	}

	//@ ensures !pumpRunning;
	public void stopSystem() {
		if (pumpRunning) {
			deactivatePump();
		}
		assert !pumpRunning;
		systemActive = false;
	}

	//@ ensures !pumpRunning;
	public void startSystem() {
		assert !pumpRunning;
		systemActive = true;
	}

	//@ ensures \result;
	/*@ pure @*/ public boolean isSystemActive() {
		return systemActive;
	}
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:5: error: cannot find symbol
	private /*@ spec_public @*/ Environment env;
	                            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:8: error: cannot find symbol
	public MinePump(/*@ spec_public @*/ Environment env) {
	                                    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:62: error: cannot find symbol
	public /*@ spec_public @*/ Environment getEnv() {
	                           ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:14: error: incompatible types: void cannot be converted to boolean
	//@ ensures systemActive ==> processEnvironment();
	                                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:23: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:23: error: incompatible types: void cannot be converted to boolean
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                                                              ^
6 errors

public class MinePump {

	private /*@ spec_public @*/ boolean pumpRunning = false;
	private /*@ spec_public @*/ boolean systemActive = true;
	private /*@ spec_public @*/ Environment env;

	//@ requires env != null;
	public MinePump(/*@ spec_public @*/ Environment env) {
		super();
		this.env = env;
	}

	//@ ensures pumpRunning ==> env.lowerWaterLevel();
	//@ ensures systemActive ==> processEnvironment();
	public void timeShift() {
		if (pumpRunning) env.lowerWaterLevel();
		if (systemActive) processEnvironment();
	}

	private void processEnvironment__wrappee__base() {}

	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	public void processEnvironment() {
		if (pumpRunning && isMethaneAlarm()) {
			deactivatePump();
		} else {
			processEnvironment__wrappee__base();
		}
	}

	//@ ensures pumpRunning;
	void activatePump() {
		pumpRunning = true;
	}

	//@ ensures !pumpRunning;
	/*@ pure @*/ public boolean isPumpRunning() {
		return pumpRunning;
	}

	//@ ensures !pumpRunning;
	void deactivatePump() {
		pumpRunning = false;
	}

	//@ ensures \result ==> env.isMethaneLevelCritical();
	/*@ pure @*/ public boolean isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	@Override
	public String toString() {
		return "Pump(System:"
			+ (systemActive ? "On" : "Off")
			+ ",Pump:"
			+ (pumpRunning ? "On" : "Off")
			+ ") "
			+ env.toString();
	}

	public /*@ spec_public @*/ Environment getEnv() {
		return env;
	}

	//@ ensures !pumpRunning;
	public void stopSystem() {
		if (pumpRunning) {
			deactivatePump();
		}
		assert !pumpRunning;
		systemActive = false;
	}

	//@ ensures !pumpRunning;
	public void startSystem() {
		assert !pumpRunning;
		systemActive = true;
	}

	//@ ensures \result;
	/*@ pure @*/ public boolean isSystemActive() {
		return systemActive;
	}
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:5: error: cannot find symbol
	private /*@ spec_public @*/ Environment env;
	                            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:8: error: cannot find symbol
	public MinePump(/*@ spec_public @*/ Environment env) {
	                                    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:62: error: cannot find symbol
	public /*@ spec_public @*/ Environment getEnv() {
	                           ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:14: error: incompatible types: void cannot be converted to boolean
	//@ ensures systemActive ==> processEnvironment();
	                                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:23: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:23: error: incompatible types: void cannot be converted to boolean
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                                                              ^
6 errors

public class MinePump {

	private /*@ spec_public @*/ boolean pumpRunning = false;
	private /*@ spec_public @*/ boolean systemActive = true;
	private /*@ spec_public @*/ Environment env;

	//@ requires env != null;
	public MinePump(/*@ spec_public @*/ Environment env) {
		super();
		this.env = env;
	}

	//@ ensures pumpRunning ==> env.lowerWaterLevel();
	//@ ensures systemActive ==> processEnvironment();
	public void timeShift() {
		if (pumpRunning) env.lowerWaterLevel();
		if (systemActive) processEnvironment();
	}

	private void processEnvironment__wrappee__base() {}

	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	public void processEnvironment() {
		if (pumpRunning && isMethaneAlarm()) {
			deactivatePump();
		} else {
			processEnvironment__wrappee__base();
		}
	}

	//@ ensures pumpRunning;
	void activatePump() {
		pumpRunning = true;
	}

	//@ ensures !pumpRunning;
	/*@ pure @*/ public boolean isPumpRunning() {
		return pumpRunning;
	}

	//@ ensures !pumpRunning;
	void deactivatePump() {
		pumpRunning = false;
	}

	//@ ensures \result ==> env.isMethaneLevelCritical();
	/*@ pure @*/ public boolean isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	@Override
	public String toString() {
		return "Pump(System:"
			+ (systemActive ? "On" : "Off")
			+ ",Pump:"
			+ (pumpRunning ? "On" : "Off")
			+ ") "
			+ env.toString();
	}

	public /*@ spec_public @*/ Environment getEnv() {
		return env;
	}

	//@ ensures !pumpRunning;
	public void stopSystem() {
		if (pumpRunning) {
			deactivatePump();
		}
		assert !pumpRunning;
		systemActive = false;
	}

	//@ ensures !pumpRunning;
	public void startSystem() {
		assert !pumpRunning;
		systemActive = true;
	}

	//@ ensures \result;
	/*@ pure @*/ public boolean isSystemActive() {
		return systemActive;
	}
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:5: error: cannot find symbol
	private /*@ spec_public @*/ Environment env;
	                            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:8: error: cannot find symbol
	public MinePump(/*@ spec_public @*/ Environment env) {
	                                    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:62: error: cannot find symbol
	public /*@ spec_public @*/ Environment getEnv() {
	                           ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:14: error: incompatible types: void cannot be converted to boolean
	//@ ensures systemActive ==> processEnvironment();
	                                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:23: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:23: error: incompatible types: void cannot be converted to boolean
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                                                              ^
6 errors

public class MinePump {

	private /*@ spec_public @*/ boolean pumpRunning = false;
	private /*@ spec_public @*/ boolean systemActive = true;
	private /*@ spec_public @*/ Environment env;

	//@ requires env != null;
	public MinePump(/*@ spec_public @*/ Environment env) {
		super();
		this.env = env;
	}

	//@ ensures pumpRunning ==> env.lowerWaterLevel();
	//@ ensures systemActive ==> processEnvironment();
	public void timeShift() {
		if (pumpRunning) env.lowerWaterLevel();
		if (systemActive) processEnvironment();
	}

	private void processEnvironment__wrappee__base() {}

	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	public void processEnvironment() {
		if (pumpRunning && isMethaneAlarm()) {
			deactivatePump();
		} else {
			processEnvironment__wrappee__base();
		}
	}

	//@ ensures pumpRunning;
	void activatePump() {
		pumpRunning = true;
	}

	//@ ensures !pumpRunning;
	/*@ pure @*/ public boolean isPumpRunning() {
		return pumpRunning;
	}

	//@ ensures !pumpRunning;
	void deactivatePump() {
		pumpRunning = false;
	}

	//@ ensures \result ==> env.isMethaneLevelCritical();
	/*@ pure @*/ public boolean isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	@Override
	public String toString() {
		return "Pump(System:"
			+ (systemActive ? "On" : "Off")
			+ ",Pump:"
			+ (pumpRunning ? "On" : "Off")
			+ ") "
			+ env.toString();
	}

	public /*@ spec_public @*/ Environment getEnv() {
		return env;
	}

	//@ ensures !pumpRunning;
	public void stopSystem() {
		if (pumpRunning) {
			deactivatePump();
		}
		assert !pumpRunning;
		systemActive = false;
	}

	//@ ensures !pumpRunning;
	public void startSystem() {
		assert !pumpRunning;
		systemActive = true;
	}

	//@ ensures \result;
	/*@ pure @*/ public boolean isSystemActive() {
		return systemActive;
	}
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:5: error: cannot find symbol
	private /*@ spec_public @*/ Environment env;
	                            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:8: error: cannot find symbol
	public MinePump(/*@ spec_public @*/ Environment env) {
	                                    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:62: error: cannot find symbol
	public /*@ spec_public @*/ Environment getEnv() {
	                           ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:14: error: incompatible types: void cannot be converted to boolean
	//@ ensures systemActive ==> processEnvironment();
	                                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:23: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:23: error: incompatible types: void cannot be converted to boolean
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                                                              ^
6 errors

public class MinePump {

	private /*@ spec_public @*/ boolean pumpRunning = false;
	private /*@ spec_public @*/ boolean systemActive = true;
	private /*@ spec_public @*/ Environment env;

	//@ requires env != null;
	public MinePump(/*@ spec_public @*/ Environment env) {
		super();
		this.env = env;
	}

	//@ ensures pumpRunning ==> env.lowerWaterLevel();
	//@ ensures systemActive ==> processEnvironment();
	public void timeShift() {
		if (pumpRunning) env.lowerWaterLevel();
		if (systemActive) processEnvironment();
	}

	private void processEnvironment__wrappee__base() {}

	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	public void processEnvironment() {
		if (pumpRunning && isMethaneAlarm()) {
			deactivatePump();
		} else {
			processEnvironment__wrappee__base();
		}
	}

	//@ ensures pumpRunning;
	void activatePump() {
		pumpRunning = true;
	}

	//@ ensures !pumpRunning;
	/*@ pure @*/ public boolean isPumpRunning() {
		return pumpRunning;
	}

	//@ ensures !pumpRunning;
	void deactivatePump() {
		pumpRunning = false;
	}

	//@ ensures \result ==> env.isMethaneLevelCritical();
	/*@ pure @*/ public boolean isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	@Override
	public String toString() {
		return "Pump(System:"
			+ (systemActive ? "On" : "Off")
			+ ",Pump:"
			+ (pumpRunning ? "On" : "Off")
			+ ") "
			+ env.toString();
	}

	public /*@ spec_public @*/ Environment getEnv() {
		return env;
	}

	//@ ensures !pumpRunning;
	public void stopSystem() {
		if (pumpRunning) {
			deactivatePump();
		}
		assert !pumpRunning;
		systemActive = false;
	}

	//@ ensures !pumpRunning;
	public void startSystem() {
		assert !pumpRunning;
		systemActive = true;
	}

	//@ ensures \result;
	/*@ pure @*/ public boolean isSystemActive() {
		return systemActive;
	}
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:5: error: cannot find symbol
	private /*@ spec_public @*/ Environment env;
	                            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:8: error: cannot find symbol
	public MinePump(/*@ spec_public @*/ Environment env) {
	                                    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:62: error: cannot find symbol
	public /*@ spec_public @*/ Environment getEnv() {
	                           ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:14: error: incompatible types: void cannot be converted to boolean
	//@ ensures systemActive ==> processEnvironment();
	                                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:23: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:23: error: incompatible types: void cannot be converted to boolean
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                                                              ^
6 errors

public class MinePump {

	private /*@ spec_public @*/ boolean pumpRunning = false;
	private /*@ spec_public @*/ boolean systemActive = true;
	private /*@ spec_public @*/ Environment env;

	//@ requires env != null;
	public MinePump(/*@ spec_public @*/ Environment env) {
		super();
		this.env = env;
	}

	//@ ensures pumpRunning ==> env.lowerWaterLevel();
	//@ ensures systemActive ==> processEnvironment();
	public void timeShift() {
		if (pumpRunning) env.lowerWaterLevel();
		if (systemActive) processEnvironment();
	}

	private void processEnvironment__wrappee__base() {}

	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	public void processEnvironment() {
		if (pumpRunning && isMethaneAlarm()) {
			deactivatePump();
		} else {
			processEnvironment__wrappee__base();
		}
	}

	//@ ensures pumpRunning;
	void activatePump() {
		pumpRunning = true;
	}

	//@ ensures !pumpRunning;
	/*@ pure @*/ public boolean isPumpRunning() {
		return pumpRunning;
	}

	//@ ensures !pumpRunning;
	void deactivatePump() {
		pumpRunning = false;
	}

	//@ ensures \result ==> env.isMethaneLevelCritical();
	/*@ pure @*/ public boolean isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	@Override
	public String toString() {
		return "Pump(System:"
			+ (systemActive ? "On" : "Off")
			+ ",Pump:"
			+ (pumpRunning ? "On" : "Off")
			+ ") "
			+ env.toString();
	}

	public /*@ spec_public @*/ Environment getEnv() {
		return env;
	}

	//@ ensures !pumpRunning;
	public void stopSystem() {
		if (pumpRunning) {
			deactivatePump();
		}
		assert !pumpRunning;
		systemActive = false;
	}

	//@ ensures !pumpRunning;
	public void startSystem() {
		assert !pumpRunning;
		systemActive = true;
	}

	//@ ensures \result;
	/*@ pure @*/ public boolean isSystemActive() {
		return systemActive;
	}
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:5: error: cannot find symbol
	private /*@ spec_public @*/ Environment env;
	                            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:8: error: cannot find symbol
	public MinePump(/*@ spec_public @*/ Environment env) {
	                                    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:62: error: cannot find symbol
	public /*@ spec_public @*/ Environment getEnv() {
	                           ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:14: error: incompatible types: void cannot be converted to boolean
	//@ ensures systemActive ==> processEnvironment();
	                                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:23: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:23: error: incompatible types: void cannot be converted to boolean
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                                                              ^
6 errors

