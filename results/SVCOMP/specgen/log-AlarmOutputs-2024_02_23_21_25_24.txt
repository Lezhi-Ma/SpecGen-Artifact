import java.util.Random;

final class Verifier {
    //@ ensures \result != null;
    //@ ensures \result == \old(\result);
    public static int nondetInt() {
        return new Random().nextInt();
    }
}

public class AlarmOutputs {
    //@ public invariant isAudioDisabled != null;
    //@ public invariant notificationMessage != null;
    //@ public invariant audioNotificationCommand != null;
    //@ public invariant highestLevelAlarm != null;
    //@ public invariant logMessageId != null;
    public int isAudioDisabled = Verifier.nondetInt();
    public int notificationMessage = Verifier.nondetInt();
    public int audioNotificationCommand = Verifier.nondetInt();
    public int highestLevelAlarm = Verifier.nondetInt();
    public int logMessageId = Verifier.nondetInt();
}
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:4: error: bad operand types for binary operator '!='
    //@ ensures \result != null;
                        ^
  first type:  int
  second type: <null>
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:5: error: A \result expression is not allowed in an old environment
    //@ ensures \result == \old(\result);
                                ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:12: error: bad operand types for binary operator '!='
    //@ public invariant isAudioDisabled != null;
                                         ^
  first type:  int
  second type: <null>
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:13: error: bad operand types for binary operator '!='
    //@ public invariant notificationMessage != null;
                                             ^
  first type:  int
  second type: <null>
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:14: error: bad operand types for binary operator '!='
    //@ public invariant audioNotificationCommand != null;
                                                  ^
  first type:  int
  second type: <null>
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:15: error: bad operand types for binary operator '!='
    //@ public invariant highestLevelAlarm != null;
                                           ^
  first type:  int
  second type: <null>
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:16: error: bad operand types for binary operator '!='
    //@ public invariant logMessageId != null;
                                      ^
  first type:  int
  second type: <null>
7 errors

import java.util.Random;

final class Verifier {
    //@ ensures \result != 0;
    //@ ensures \result == \old(\result);
    public static int nondetInt() {
        return new Random().nextInt();
    }
}

public class AlarmOutputs {
    //@ public invariant isAudioDisabled != 0;
    //@ public invariant notificationMessage != 0;
    //@ public invariant audioNotificationCommand != 0;
    //@ public invariant highestLevelAlarm != 0;
    //@ public invariant logMessageId != 0;
    public int isAudioDisabled = Verifier.nondetInt();
    public int notificationMessage = Verifier.nondetInt();
    public int audioNotificationCommand = Verifier.nondetInt();
    public int highestLevelAlarm = Verifier.nondetInt();
    public int logMessageId = Verifier.nondetInt();
}
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:5: error: A \result expression is not allowed in an old environment
    //@ ensures \result == \old(\result);
                                ^
1 error

import java.util.Random;

final class Verifier {
    //@ ensures \result != 0;
    public static int nondetInt() {
        return new Random().nextInt();
    }
}

public class AlarmOutputs {
    //@ public invariant isAudioDisabled != 0;
    //@ public invariant notificationMessage != 0;
    //@ public invariant audioNotificationCommand != 0;
    //@ public invariant highestLevelAlarm != 0;
    //@ public invariant logMessageId != 0;
    public int isAudioDisabled = Verifier.nondetInt();
    public int notificationMessage = Verifier.nondetInt();
    public int audioNotificationCommand = Verifier.nondetInt();
    public int highestLevelAlarm = Verifier.nondetInt();
    public int logMessageId = Verifier.nondetInt();
}
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:4:) in method nondetInt
        return new Random().nextInt();
        ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:6:
    //@ ensures \result != 0;
        ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:16: verify: The prover cannot establish an assertion (Assignable) in method AlarmOutputs: \everything
    public int isAudioDisabled = Verifier.nondetInt();
                                                   ^
3 verification failures

import java.util.Random;

final class Verifier {
    //@ ensures \result != 0;  
    public static int nondetInt() {
        return new Random().nextInt();
    }
}

public class AlarmOutputs {
    //@ public invariant isAudioDisabled != 0;
    //@ public invariant notificationMessage != 0;
    //@ public invariant audioNotificationCommand != 0;
    //@ public invariant highestLevelAlarm != 0;
    //@ public invariant logMessageId != 0;
    public int isAudioDisabled = Verifier.nondetInt();
    public int notificationMessage = Verifier.nondetInt();
    public int audioNotificationCommand = Verifier.nondetInt();
    public int highestLevelAlarm = Verifier.nondetInt();
    public int logMessageId = Verifier.nondetInt();
}

/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:4:) in method nondetInt
        return new Random().nextInt();
        ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:6:
    //@ ensures \result != 0;  
        ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:16: verify: The prover cannot establish an assertion (Assignable) in method AlarmOutputs: \everything
    public int isAudioDisabled = Verifier.nondetInt();
                                                   ^
3 verification failures

import java.util.Random;

final class Verifier {
 
    public static int nondetInt() {
        return new Random().nextInt();
    }
}

public class AlarmOutputs {
    //@ public invariant isAudioDisabled != 0;
    //@ public invariant notificationMessage != 0;
    //@ public invariant audioNotificationCommand != 0;
    //@ public invariant highestLevelAlarm != 0;
    //@ public invariant logMessageId != 0;
    public int isAudioDisabled = Verifier.nondetInt();
    public int notificationMessage = Verifier.nondetInt();
    public int audioNotificationCommand = Verifier.nondetInt();
    public int highestLevelAlarm = Verifier.nondetInt();
    public int logMessageId = Verifier.nondetInt();
}

/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:16: verify: The prover cannot establish an assertion (Assignable) in method AlarmOutputs: \everything
    public int isAudioDisabled = Verifier.nondetInt();
                                                   ^
1 verification failure

