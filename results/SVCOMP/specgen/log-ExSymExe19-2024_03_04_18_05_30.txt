class Main {
  static int field;
  static int field2;

  //@ requires (\forall int i; 0 <= i && i < arg; (int)Character.MIN_VALUE <= i && i <= (int)Character.MAX_VALUE);
  //@ ensures \result ==> field < 0 || field % 10 > 99;
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires x + z + r <= Integer.MAX_VALUE && y * (z + r) <= Integer.MAX_VALUE;
  //@ ensures \result ==> x + z > 99 || r > z;
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> field < 0 || field % 10 > 99;
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> field < 0 || field % 10 > 99;
                                       ^
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:17: error: cannot find symbol
  //@ requires x + z + r <= Integer.MAX_VALUE && y * (z + r) <= Integer.MAX_VALUE;
                                                 ^
  symbol:   variable y
  location: class Main
3 errors

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires (\forall int i; 0 <= i && i < arg; (int)Character.MIN_VALUE <= i && i <= (int)Character.MAX_VALUE);
  //@ ensures \result ==> field < 0 || field % 10 > 99;
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires x + z + r <= Integer.MAX_VALUE && y * (z + r) <= Integer.MAX_VALUE;
  //@ ensures \result ==> x + z > 99 || r > z;
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:17: error: cannot find symbol
  //@ requires x + z + r <= Integer.MAX_VALUE && y * (z + r) <= Integer.MAX_VALUE;
                                                 ^
  symbol:   variable y
  location: class Main
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires (\forall int i; 0 <= i && i < arg; (int)Character.MIN_VALUE <= i && i <= (int)Character.MAX_VALUE);
  //@ ensures \result ==> field < 0 || field % 10 > 99;
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires z + r <= Integer.MAX_VALUE && 3 * (z + r) <= Integer.MAX_VALUE;
  //@ ensures \result ==> x + z > 99 || r > z;
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
