class Main {
  static int field;
  static int field2;

  //@ requires x == 3;
  //@ requires z == field % 10;
  //@ requires r == field2;
  //@ ensures \result ==> (x > 99 && r <= z);
  //@ ensures !\result ==> (x <= 99 || r > z);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be
                  symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires x == z + r;
  //@ requires z == y * (z + r);
  //@ requires r == -(y * (z + r));
  //@ ensures \result ==> (x > 99 && r <= z);
  //@ ensures !\result ==> (x <= 99 || r > z);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:5: error: cannot find symbol
  //@ requires x == 3;
               ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:6: error: cannot find symbol
  //@ requires z == field % 10;
               ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:6: error: An identifier with package visibility may not be used in a requires clause with public visibility
  //@ requires z == field % 10;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:7: error: cannot find symbol
  //@ requires r == field2;
               ^
  symbol:   variable r
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:7: error: An identifier with package visibility may not be used in a requires clause with public visibility
  //@ requires r == field2;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:8: error: cannot find symbol
  //@ ensures \result ==> (x > 99 && r <= z);
                           ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:8: error: cannot find symbol
  //@ ensures \result ==> (x > 99 && r <= z);
                                     ^
  symbol:   variable r
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:8: error: cannot find symbol
  //@ ensures \result ==> (x > 99 && r <= z);
                                          ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:9: error: cannot find symbol
  //@ ensures !\result ==> (x <= 99 || r > z);
                            ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:9: error: cannot find symbol
  //@ ensures !\result ==> (x <= 99 || r > z);
                                       ^
  symbol:   variable r
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:9: error: cannot find symbol
  //@ ensures !\result ==> (x <= 99 || r > z);
                                           ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:22: error: cannot find symbol
  //@ requires z == y * (z + r);
                    ^
  symbol:   variable y
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:23: error: cannot find symbol
  //@ requires r == -(y * (z + r));
                      ^
  symbol:   variable y
  location: class Main
13 errors

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg == 3;
  //@ requires field % 10 == field;
  //@ requires field2 == r;
  //@ ensures \result ==> (arg > 99 && r <= field);
  //@ ensures !\result ==> (arg <= 99 || r > field);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be
                  symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires x == z + r;
  //@ requires z == y * (z + r);
  //@ requires r == -(y * (z + r));
  //@ ensures \result ==> (x > 99 && r <= z);
  //@ ensures !\result ==> (x <= 99 || r > z);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = y * x;
    r = -z;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:7: error: cannot find symbol
  //@ requires field2 == r;
                         ^
  symbol:   variable r
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:8: error: cannot find symbol
  //@ ensures \result ==> (arg > 99 && r <= field);
                                       ^
  symbol:   variable r
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:9: error: cannot find symbol
  //@ ensures !\result ==> (arg <= 99 || r > field);
                                         ^
  symbol:   variable r
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:22: error: cannot find symbol
  //@ requires z == y * (z + r);
                    ^
  symbol:   variable y
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe19.java:23: error: cannot find symbol
  //@ requires r == -(y * (z + r));
                      ^
  symbol:   variable y
  location: class Main
5 errors

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg == 3;
  //@ requires field % 10 == field;
  //@ requires field2 == field;
  //@ ensures \result ==> (arg > 99 && field <= field2);
  //@ ensures !\result ==> (arg <= 99 || field > field2);
  public static boolean f(int arg) {
    int x = 3; /* we want to specify in an annotation that this param should be
                  symbolic */

    Main inst = new Main();
    field = arg;
    if (field < 0) return true;
    field = field % 10;
    return inst.test(x, field, field2);
  }

  //@ requires x == z + r;
  //@ requires z == 3 * (z + r);
  //@ requires r == -(3 * (z + r));
  //@ ensures \result ==> (x > 99 && r <= z);
  //@ ensures !\result ==> (x <= 99 || r > z);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe19");
    int y = 3;
    x = z + r;
    z = 3 * x;
    r = -3 * x;
    if (x > 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (r > z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
