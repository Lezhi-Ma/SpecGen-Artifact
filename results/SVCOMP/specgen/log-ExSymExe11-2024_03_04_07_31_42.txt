class Main {
    static int field;

    //@ requires arg >= 0;
    //@ ensures \result ==> field == arg % 100 && \result == test(3, field);
    //@ ensures !\result ==> arg < 0;
    public static boolean f(int arg) {
        if (arg < 0)
            return true;
        int x = 3;
        Main inst = new Main();
        field = arg % 100;
        return inst.test(x, field);
    }

    //@ ensures \result ==> (z <= 0 ==> \result == false) && (z > 0 ==> \result == true);
    public boolean test(int x, int z) {
        System.out.println("Testing ExSymExe11");
        int y = 3;
        z = -x;
        x = z * x;
        if (z <= 0) System.out.println("branch FOO1");
        else System.out.println("branch FOO2");
        if (y <= 0) {
            System.out.println("branch BOO1");
            return false;
        } else System.out.println("branch BOO2");
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result ==> field == arg % 100 && \result == test(3, field);
                            ^
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result ==> field == arg % 100 && \result == test(3, field);
                                                                     ^
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: non-static method test(int,int) cannot be referenced from a static context
    //@ ensures \result ==> field == arg % 100 && \result == test(3, field);
                                                             ^
3 errors

class Main {
    static /*@ spec_public @*/ int field;

    //@ requires arg >= 0;
    //@ ensures \result ==> field == arg % 100 && \result == test(3, field);
    //@ ensures !\result ==> arg < 0;
    public static boolean f(int arg) {
        if (arg < 0)
            return true;
        int x = 3;
        Main inst = new Main();
        field = arg % 100;
        return inst.test(x, field);
    }

    //@ ensures \result ==> (z <= 0 ==> \result == false) && (z > 0 ==> \result == true);
    public boolean test(int x, int z) {
        System.out.println("Testing ExSymExe11");
        int y = 3;
        z = -x;
        x = z * x;
        if (z <= 0) System.out.println("branch FOO1");
        else System.out.println("branch FOO2");
        if (y <= 0) {
            System.out.println("branch BOO1");
            return false;
        } else System.out.println("branch BOO2");
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: non-static method test(int,int) cannot be referenced from a static context
    //@ ensures \result ==> field == arg % 100 && \result == test(3, field);
                                                             ^
1 error

class Main {
    static /*@ spec_public @*/ int field;

    //@ requires arg >= 0;
    //@ ensures \result ==> field == arg % 100 && \result == inst.test(3, field);
    //@ ensures !\result ==> arg < 0;
    public static boolean f(int arg) {
        if (arg < 0)
            return true;
        int x = 3;
        Main inst = new Main();
        field = arg % 100;
        return inst.test(x, field);
    }

    //@ ensures \result ==> (z <= 0 ==> \result == false) && (z > 0 ==> \result == true);
    public boolean test(int x, int z) {
        System.out.println("Testing ExSymExe11");
        int y = 3;
        z = -x;
        x = z * x;
        if (z <= 0) System.out.println("branch FOO1");
        else System.out.println("branch FOO2");
        if (y <= 0) {
            System.out.println("branch BOO1");
            return false;
        } else System.out.println("branch BOO2");
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: cannot find symbol
    //@ ensures \result ==> field == arg % 100 && \result == inst.test(3, field);
                                                             ^
  symbol:   variable inst
  location: class Main
1 error

class Main {
    static /*@ spec_public @*/ int field;

    //@ requires arg >= 0;
    //@ ensures \result ==> field == arg % 100 && \result == new Main().test(3, field);
    //@ ensures !\result ==> arg < 0;
    public static boolean f(int arg) {
        if (arg < 0)
            return true;
        int x = 3;
        field = arg % 100;
        return new Main().test(x, field);
    }

    //@ ensures \result ==> (z <= 0 ==> \result == false) && (z > 0 ==> \result == true);
    public boolean test(int x, int z) {
        System.out.println("Testing ExSymExe11");
        int y = 3;
        z = -x;
        x = z * x;
        if (z <= 0) System.out.println("branch FOO1");
        else System.out.println("branch FOO2");
        if (y <= 0) {
            System.out.println("branch BOO1");
            return false;
        } else System.out.println("branch BOO2");
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: Object allocation is not permitted in specification expressions
    //@ ensures \result ==> field == arg % 100 && \result == new Main().test(3, field);
                                                             ^
1 error

class Main {
    static /*@ spec_public @*/ int field;

    //@ requires arg >= 0;
    //@ ensures \result ==> field == arg % 100 && \result == new Main().test(3, field);
    //@ ensures !\result ==> arg < 0;
    public static boolean f(int arg) {
        if (arg < 0)
            return true;
        int x = 3;
        field = arg % 100;
        Main inst = new Main();
        return inst.test(x, field);
    }

    //@ ensures \result ==> (z <= 0 ==> \result == false) && (z > 0 ==> \result == true);
    public boolean test(int x, int z) {
        System.out.println("Testing ExSymExe11");
        int y = 3;
        z = -x;
        x = z * x;
        if (z <= 0) System.out.println("branch FOO1");
        else System.out.println("branch FOO2");
        if (y <= 0) {
            System.out.println("branch BOO1");
            return false;
        } else System.out.println("branch BOO2");
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: Object allocation is not permitted in specification expressions
    //@ ensures \result ==> field == arg % 100 && \result == new Main().test(3, field);
                                                             ^
1 error

class Main {
    static /*@ spec_public @*/ int field;

    //@ requires arg >= 0;
    //@ ensures \result ==> field == arg % 100 && \result == test(3, field);
    //@ ensures !\result ==> arg < 0;
    public static boolean f(int arg) {
        if (arg < 0)
            return true;
        int x = 3;
        field = arg % 100;
        return test(x, field);
    }

    //@ ensures \result ==> (z <= 0 ==> \result == false) && (z > 0 ==> \result == true);
    public static boolean test(int x, int z) {
        System.out.println("Testing ExSymExe11");
        int y = 3;
        z = -x;
        x = z * x;
        if (z <= 0) System.out.println("branch FOO1");
        else System.out.println("branch FOO2");
        if (y <= 0) {
            System.out.println("branch BOO1");
            return false;
        } else System.out.println("branch BOO2");
        return true;
    }
}
