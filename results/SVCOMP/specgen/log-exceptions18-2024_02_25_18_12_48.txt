class A extends RuntimeException {}

class B extends A {}

public class exception18 {
  //@ requires true;
  //@ ensures (\exists A e; e != null; e.getClass() == A.class);
  private static void foo() {
    A a = new A();
    throw a;
  }

  //@ requires true;
  //@ ensures true;
  public static void main(String[] args) {
    try {
      foo();
      assert false;
    } catch (B e) {
      assert false;
    } catch (A e) {
      // expected here
    }
  }
}
/home/max/Documents/JMLGPT/tmp/exceptions18.java:5: error: class exception18 is public, should be declared in a file named exception18.java
public class exception18 {
       ^
1 error

class A extends RuntimeException {}

class B extends A {}

public class exception18 {
  //@ requires true;
  //@ ensures (\exists A e; e != null; e.getClass() == A.class);
  private static void foo() {
    A a = new A();
    throw a;
  }

  //@ requires true;
  //@ ensures true;
  public static void main(String[] args) {
    try {
      foo();
      assert false;
    } catch (B e) {
      assert false;
    } catch (A e) {
      // expected here
    }
  }
}
/home/max/Documents/JMLGPT/tmp/exceptions18.java:5: error: class exception18 is public, should be declared in a file named exception18.java
public class exception18 {
       ^
1 error

class A extends RuntimeException {}

class B extends A {}

//@ requires true;
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
private static void foo() {
    A a = new A();
    throw a;
}

//@ requires true;
//@ ensures true;
public static void main(String[] args) {
    try {
        foo();
        assert false;
    } catch (B e) {
        assert false;
    } catch (A e) {
        // expected here
    }
}
/home/max/Documents/JMLGPT/tmp/exceptions18.java:5: error: Unexpected or misspelled JML token: requires
//@ requires true;
    ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:5: error: Unexpected or misspelled JML token: true
//@ requires true;
             ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:5: error: Unexpected or misspelled JML token: 
//@ requires true;
                 ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: Unexpected or misspelled JML token: ensures
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
    ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: Unexpected or misspelled JML token: 
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
            ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: Unexpected or misspelled JML token: \exists
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
             ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: Unexpected or misspelled JML token: A
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
                     ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: Unexpected or misspelled JML token: e
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
                       ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: Unexpected or misspelled JML token: 
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
                        ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: Unexpected or misspelled JML token: e
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
                          ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: Unexpected or misspelled JML token: !=
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
                            ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: Unexpected or misspelled JML token: null
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
                               ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: Unexpected or misspelled JML token: 
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
                                   ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: Unexpected or misspelled JML token: e
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
                                     ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: Unexpected or misspelled JML token: 
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
                                      ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: Unexpected or misspelled JML token: getClass
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
                                       ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: Unexpected or misspelled JML token: 
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
                                               ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: Unexpected or misspelled JML token: 
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
                                                ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: Unexpected or misspelled JML token: ==
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
                                                  ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: Unexpected or misspelled JML token: A
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
                                                     ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: Unexpected or misspelled JML token: 
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
                                                      ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:6: error: <identifier> expected
//@ ensures (\exists A e; e != null; e.getClass() == A.class);
                                                            ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:7: error: class, interface, enum, or record expected
private static void foo() {
               ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:9: error: class, interface, enum, or record expected
    throw a;
    ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:10: error: class, interface, enum, or record expected
}
^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:13: error: Unexpected or misspelled JML token: ensures
//@ ensures true;
    ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:13: error: Unexpected or misspelled JML token: true
//@ ensures true;
            ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:13: error: Unexpected or misspelled JML token: 
//@ ensures true;
                ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:14: error: class, interface, enum, or record expected
public static void main(String[] args) {
              ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:17: error: as of release 1.4, 'assert' is a keyword, and may not be used as an identifier
        assert false;
        ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:18: error: class, interface, enum, or record expected
    } catch (B e) {
    ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:20: error: class, interface, enum, or record expected
    } catch (A e) {
    ^
32 errors

class A extends RuntimeException {}

class B extends A {}

public class exception18 {
  // requires true;
  // ensures (\exists A e; e != null; e.getClass() == A.class);
  private static void foo() {
    A a = new A();
    throw a;
  }

  // requires true;
  // ensures true;
  public static void main(String[] args) {
    try {
      foo();
      // assert false;
    } catch (B e) {
      // assert false;
    } catch (A e) {
      // expected here
    }
  }
}
/home/max/Documents/JMLGPT/tmp/exceptions18.java:5: error: class exception18 is public, should be declared in a file named exception18.java
public class exception18 {
       ^
1 error

class A extends RuntimeException {}

class B extends A {}

// requires true;
// ensures (\exists A e; e != null; e.getClass() == A.class);
private static void foo() {
    A a = new A();
    throw a;
}

// requires true;
// ensures true;
public class exception18 {
    public static void main(String[] args) {
        try {
            foo();
            // assert false;
        } catch (B e) {
            // assert false;
        } catch (A e) {
            // expected here
        }
    }
}
/home/max/Documents/JMLGPT/tmp/exceptions18.java:7: error: class, interface, enum, or record expected
private static void foo() {
               ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:9: error: class, interface, enum, or record expected
    throw a;
    ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:10: error: class, interface, enum, or record expected
}
^
3 errors

class A extends RuntimeException {}

class B extends A {}

// requires true;
// ensures (\exists A e; e != null; e.getClass() == A.class);
private static void foo() {
    A a = new A();
    throw a;
}

// requires true;
// ensures true;
public class exception18 {
    public static void main(String[] args) {
        try {
            foo();
            // assert false;
        } catch (B e) {
            // assert false;
        } catch (A e) {
            // expected here
        }
    }
}
/home/max/Documents/JMLGPT/tmp/exceptions18.java:7: error: class, interface, enum, or record expected
private static void foo() {
               ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:9: error: class, interface, enum, or record expected
    throw a;
    ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:10: error: class, interface, enum, or record expected
}
^
3 errors

class A extends RuntimeException {}

class B extends A {}

public class exception18 {
  // requires true;
  // ensures (\exists A e; e != null; e.getClass() == A.class);
  private static void foo() {
    A a = new A();
    throw a;
  }

  // requires true;
  // ensures true;
  public static void main(String[] args) {
    try {
      foo();
      // assert false;
    } catch (B e) {
      // assert false;
    } catch (A e) {
      // expected here
    }
  }
}
/home/max/Documents/JMLGPT/tmp/exceptions18.java:5: error: class exception18 is public, should be declared in a file named exception18.java
public class exception18 {
       ^
1 error

class A extends RuntimeException {}

class B extends A {}

// requires true;
// ensures (\exists A e; e != null; e.getClass() == A.class);
private static void foo() {
    A a = new A();
    throw a;
}

// requires true;
// ensures true;
public class exception18 {
    public static void main(String[] args) {
        try {
            foo();
            // assert false;
        } catch (B e) {
            // assert false;
        } catch (A e) {
            // expected here
        }
    }
}
/home/max/Documents/JMLGPT/tmp/exceptions18.java:7: error: class, interface, enum, or record expected
private static void foo() {
               ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:9: error: class, interface, enum, or record expected
    throw a;
    ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:10: error: class, interface, enum, or record expected
}
^
3 errors

class A extends RuntimeException {}

class B extends A {}

public class exception18 {
  // requires true;
  // ensures (\exists A e; e != null; e.getClass() == A.class);
  private static void foo() {
    A a = new A();
    throw a;
  }

  // requires true;
  // ensures true;
  public static void main(String[] args) {
    try {
      foo();
      // assert false;
    } catch (B e) {
      // assert false;
    } catch (A e) {
      // expected here
    }
  }
}
/home/max/Documents/JMLGPT/tmp/exceptions18.java:5: error: class exception18 is public, should be declared in a file named exception18.java
public class exception18 {
       ^
1 error

class A extends RuntimeException {}

class B extends A {}

// requires true;
// ensures (\exists A e; e != null; e.getClass() == A.class);
private static void foo() {
    A a = new A();
    throw a;
}

// requires true;
// ensures true;
public class exception18 {
    public static void main(String[] args) {
        try {
            foo();
            // assert false;
        } catch (B e) {
            // assert false;
        } catch (A e) {
            // expected here
        }
    }
}
/home/max/Documents/JMLGPT/tmp/exceptions18.java:7: error: class, interface, enum, or record expected
private static void foo() {
               ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:9: error: class, interface, enum, or record expected
    throw a;
    ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:10: error: class, interface, enum, or record expected
}
^
3 errors

