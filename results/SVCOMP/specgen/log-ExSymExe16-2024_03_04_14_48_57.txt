class Main {
  static int field;

  //@ ensures \result <==> test(x, field);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(x, field);
  }
  
  //@ requires z >= 0;
  //@ requires x >= 0;
  //@ ensures \result <==> (z == 0) || (x == 0);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else {
      System.out.println("branch FOO2");
    }
    if (x == 0) {
      System.out.println("branch BOO1");
    } else {
      System.out.println("branch BOO2");
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: cannot find symbol
  //@ ensures \result <==> test(x, field);
                                ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result <==> test(x, field);
                                   ^
2 errors

class Main {
  static /*@ spec_public @*/ int field;

  //@ ensures \result <==> test(x, field);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(x, field);
  }
  
  //@ requires z >= 0;
  //@ requires x >= 0;
  //@ ensures \result <==> (z == 0) || (x == 0);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else {
      System.out.println("branch FOO2");
    }
    if (x == 0) {
      System.out.println("branch BOO1");
    } else {
      System.out.println("branch BOO2");
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: cannot find symbol
  //@ ensures \result <==> test(x, field);
                                ^
  symbol:   variable x
  location: class Main
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires x >= 0;
  //@ requires field >= 0;
  //@ ensures \result <==> test(x, field);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(x, field);
  }
  
  //@ requires z >= 0;
  //@ requires x >= 0;
  //@ ensures \result <==> (z == 0) || (x == 0);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else {
      System.out.println("branch FOO2");
    }
    if (x == 0) {
      System.out.println("branch BOO1");
    } else {
      System.out.println("branch BOO2");
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: cannot find symbol
  //@ requires x >= 0;
               ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:6: error: cannot find symbol
  //@ ensures \result <==> test(x, field);
                                ^
  symbol:   variable x
  location: class Main
2 errors

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires field >= 0;
  //@ ensures \result <==> test(3, field);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(3, field);
  }
  
  //@ requires z >= 0;
  //@ requires x >= 0;
  //@ ensures \result <==> (z == 0) || (x == 0);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else {
      System.out.println("branch FOO2");
    }
    if (x == 0) {
      System.out.println("branch BOO1");
    } else {
      System.out.println("branch BOO2");
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:5: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result <==> test(3, field);
                           ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires field >= 0;
  //@ ensures \result <==> (new Main()).test(3, field);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(3, field);
  }
  
  //@ requires z >= 0;
  //@ requires x >= 0;
  //@ ensures \result <==> (z == 0) || (x == 0);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else {
      System.out.println("branch FOO2");
    }
    if (x == 0) {
      System.out.println("branch BOO1");
    } else {
      System.out.println("branch BOO2");
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> (new Main()).test(3, field);
                            ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires field >= 0;
  //@ ensures \result <==> (new Main()).test(3, field);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(3, field);
  }
  
  //@ requires z >= 0;
  //@ requires x >= 0;
  //@ ensures \result <==> (z == 0) || (x == 0);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else {
      System.out.println("branch FOO2");
    }
    if (x == 0) {
      System.out.println("branch BOO1");
    } else {
      System.out.println("branch BOO2");
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> (new Main()).test(3, field);
                            ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires field >= 0;
  //@ ensures \result <==> test(3, field);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(3, field);
  }
  
  //@ requires z >= 0;
  //@ requires x >= 0;
  //@ ensures \result <==> (z == 0) || (x == 0);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else {
      System.out.println("branch FOO2");
    }
    if (x == 0) {
      System.out.println("branch BOO1");
    } else {
      System.out.println("branch BOO2");
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:5: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result <==> test(3, field);
                           ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires field >= 0;
  //@ ensures \result <==> (new Main()).test(3, field);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(3, field);
  }
  
  //@ requires z >= 0;
  //@ requires x >= 0;
  //@ ensures \result <==> (z == 0) || (x == 0);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else {
      System.out.println("branch FOO2");
    }
    if (x == 0) {
      System.out.println("branch BOO1");
    } else {
      System.out.println("branch BOO2");
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> (new Main()).test(3, field);
                            ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires field >= 0;
  //@ ensures \result <==> test(3, field);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(3, field);
  }
  
  //@ requires z >= 0;
  //@ requires x >= 0;
  //@ ensures \result <==> (z == 0) || (x == 0);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else {
      System.out.println("branch FOO2");
    }
    if (x == 0) {
      System.out.println("branch BOO1");
    } else {
      System.out.println("branch BOO2");
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:5: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result <==> test(3, field);
                           ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires field >= 0;
  //@ ensures \result <==> (new Main()).test(3, field);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(3, field);
  }
  
  //@ requires z >= 0;
  //@ requires x >= 0;
  //@ ensures \result <==> (z == 0) || (x == 0);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else {
      System.out.println("branch FOO2");
    }
    if (x == 0) {
      System.out.println("branch BOO1");
    } else {
      System.out.println("branch BOO2");
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> (new Main()).test(3, field);
                            ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires field >= 0;
  //@ ensures \result <==> (new Main()).test(3, field);  
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(3, field);
  }
  
  //@ requires z >= 0;
  //@ requires x >= 0;
  //@ ensures \result <==> (z == 0) || (x == 0);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else {
      System.out.println("branch FOO2");
    }
    if (x == 0) {
      System.out.println("branch BOO1");
    } else {
      System.out.println("branch BOO2");
    }
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> (new Main()).test(3, field);  
                            ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires field >= 0;
 
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(3, field);
  }
  
  //@ requires z >= 0;
  //@ requires x >= 0;
  //@ ensures \result <==> (z == 0) || (x == 0);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else {
      System.out.println("branch FOO2");
    }
    if (x == 0) {
      System.out.println("branch BOO1");
    } else {
      System.out.println("branch BOO2");
    }
    return true;
  }
}

