class Main {
  static int field;
  static int field2;

  //@ requires arg >= 0;
  //@ ensures \result ==> field2 == 0;
  //@ ensures \result ==> field == 9;
  //@ ensures \result ==> inst.test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = 9;
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures \result ==> r == x + z;
  //@ ensures \result ==> z == x - 3 - 4;
  //@ ensures \result ==> \result ==> (r < 99 ==> System.out.println("branch FOO1")) && (r >= 99 ==> System.out.println("branch FOO2"));
  //@ ensures \result ==> (x < z ==> System.out.println("branch BOO1") && \result == false) || (x >= z ==> System.out.println("branch BOO2") && \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> field2 == 0;
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:7: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> field == 9;
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> inst.test(arg, arg, field2);
                                              ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: cannot find symbol
  //@ ensures \result ==> inst.test(arg, arg, field2);
                          ^
  symbol:   variable inst
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:22: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> \result ==> (r < 99 ==> System.out.println("branch FOO1")) && (r >= 99 ==> System.out.println("branch FOO2"));
                                                                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:22: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> \result ==> (r < 99 ==> System.out.println("branch FOO1")) && (r >= 99 ==> System.out.println("branch FOO2"));
                                                                                                                       ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:23: error: 'void' type not allowed here
  //@ ensures \result ==> (x < z ==> System.out.println("branch BOO1") && \result == false) || (x >= z ==> System.out.println("branch BOO2") && \result == true);
                                                       ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:23: error: 'void' type not allowed here
  //@ ensures \result ==> (x < z ==> System.out.println("branch BOO1") && \result == false) || (x >= z ==> System.out.println("branch BOO2") && \result == true);
                                                                                                                             ^
8 errors

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= 0;
  //@ ensures \result ==> field2 == 0;
  //@ ensures \result ==> field == 9;
  //@ ensures \result ==> inst.test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = 9;
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures \result ==> r == x + z;
  //@ ensures \result ==> z == x - 3 - 4;
  //@ ensures \result ==> \result ==> (r < 99 ==> \result == true) && (r >= 99 ==> \result == true);
  //@ ensures \result ==> (x < z ==> \result == false) || (x >= z ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: cannot find symbol
  //@ ensures \result ==> inst.test(arg, arg, field2);
                          ^
  symbol:   variable inst
  location: class Main
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= 0;
  //@ ensures \result ==> field2 == 0;
  //@ ensures \result ==> field == 9;
  //@ ensures \result ==> new Main().test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    field = 9;
    return new Main().test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures \result ==> r == x + z;
  //@ ensures \result ==> z == x - 3 - 4;
  //@ ensures \result ==> \result ==> (r < 99 ==> \result == true) && (r >= 99 ==> \result == true);
  //@ ensures \result ==> (x < z ==> \result == false) || (x >= z ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().test(arg, arg, field2);
                          ^
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= 0;
  //@ ensures \result ==> field2 == 0;
  //@ ensures \result ==> field == 9;
  //@ ensures \result ==> test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    field = 9;
    return test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures \result ==> r == x + z;
  //@ ensures \result ==> z == x - 3 - 4;
  //@ ensures \result ==> \result ==> (r < 99 ==> \result == true) && (r >= 99 ==> \result == true);
  //@ ensures \result ==> (x < z ==> \result == false) || (x >= z ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result ==> test(arg, arg, field2);
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:15: error: non-static method test(int,int,int) cannot be referenced from a static context
    return test(x, arg, field2);
           ^
2 errors

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= 0;
  //@ ensures \result ==> field2 == 0;
  //@ ensures \result ==> field == 9;
  //@ ensures \result ==> new Main().test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    field = 9;
    Main inst = new Main();
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures \result ==> r == x + z;
  //@ ensures \result ==> z == x - 3 - 4;
  //@ ensures \result ==> \result ==> (r < 99 ==> \result == true) && (r >= 99 ==> \result == true);
  //@ ensures \result ==> (x < z ==> \result == false) || (x >= z ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().test(arg, arg, field2);
                          ^
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= 0;
  //@ ensures \result ==> field2 == 0;
  //@ ensures \result ==> field == 9;
  //@ ensures \result ==> test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    field = 9;
    Main inst = new Main();
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures \result ==> r == x + z;
  //@ ensures \result ==> z == x - 3 - 4;
  //@ ensures \result ==> \result ==> (r < 99 ==> \result == true) && (r >= 99 ==> \result == true);
  //@ ensures \result ==> (x < z ==> \result == false) || (x >= z ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result ==> test(arg, arg, field2);
                          ^
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= 0;
  //@ ensures \result ==> field2 == 0;
  //@ ensures \result ==> field == 9;
  //@ ensures \result ==> new Main().test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    field = 9;
    Main inst = new Main();
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures \result ==> r == x + z;
  //@ ensures \result ==> z == x - 3 - 4;
  //@ ensures \result ==> \result ==> (r < 99 ==> \result == true) && (r >= 99 ==> \result == true);
  //@ ensures \result ==> (x < z ==> \result == false) || (x >= z ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().test(arg, arg, field2);
                          ^
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= 0;
  //@ ensures \result ==> field2 == 0;
  //@ ensures \result ==> field == 9;
  //@ ensures \result ==> test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    field = 9;
    Main inst = new Main();
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures \result ==> r == x + z;
  //@ ensures \result ==> z == x - 3 - 4;
  //@ ensures \result ==> \result ==> (r < 99 ==> \result == true) && (r >= 99 ==> \result == true);
  //@ ensures \result ==> (x < z ==> \result == false) || (x >= z ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result ==> test(arg, arg, field2);
                          ^
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= 0;
  //@ ensures \result ==> field2 == 0;
  //@ ensures \result ==> field == 9;
  //@ ensures \result ==> new Main().test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    field = 9;
    Main inst = new Main();
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures \result ==> r == x + z;
  //@ ensures \result ==> z == x - 3 - 4;
  //@ ensures \result ==> \result ==> (r < 99 ==> \result == true) && (r >= 99 ==> \result == true);
  //@ ensures \result ==> (x < z ==> \result == false) || (x >= z ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().test(arg, arg, field2);
                          ^
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= 0;
  //@ ensures \result ==> field2 == 0;
  //@ ensures \result ==> field == 9;
  //@ ensures \result ==> new Main().test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    field = 9;
    Main inst = new Main();
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures \result ==> r == x + z;
  //@ ensures \result ==> z == x - 3 - 4;
  //@ ensures \result ==> \result ==> (r < 99 ==> \result == true) && (r >= 99 ==> \result == true);
  //@ ensures \result ==> (x < z ==> \result == false) || (x >= z ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().test(arg, arg, field2);
                          ^
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= 0;
  //@ ensures \result ==> field2 == 0;
  //@ ensures \result ==> field == 9;
  //@ ensures \result ==> new Main().test(arg, arg, field2);  
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    field = 9;
    Main inst = new Main();
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures \result ==> r == x + z;
  //@ ensures \result ==> z == x - 3 - 4;
  //@ ensures \result ==> \result ==> (r < 99 ==> \result == true) && (r >= 99 ==> \result == true);
  //@ ensures \result ==> (x < z ==> \result == false) || (x >= z ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().test(arg, arg, field2);  
                          ^
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= 0;
  //@ ensures \result ==> field2 == 0;
  //@ ensures \result ==> field == 9;
 
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    field = 9;
    Main inst = new Main();
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures \result ==> r == x + z;
  //@ ensures \result ==> z == x - 3 - 4;
  //@ ensures \result ==> \result ==> (r < 99 ==> \result == true) && (r >= 99 ==> \result == true);
  //@ ensures \result ==> (x < z ==> \result == false) || (x >= z ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}

