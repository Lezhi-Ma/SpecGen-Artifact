class Main {

  static int field;

  //@ requires a != null;
  //@ requires a.length == 2;
  //@ requires b >= 0;
  //@ ensures true;
  public void testa(int b, boolean[] a) {
    b++;
    if (a[0]) System.out.println("array0");
    if (a[1]) System.out.println("array1");
  }

  //@ requires xm < ym && xm > ym;
  //@ ensures false;
  public void test5(double xm, double ym) {
    if (xm < ym && xm > ym) {
      System.out.println("unreachable");
      assert (false);
    } else assert (true);
  }

  //@ ensures true;
  public void test3(double x, double y) {
    if (Math.sin(x) + Math.cos(y) == 1) System.out.println("eq");
    else System.out.println("neq");
  }

  //@ ensures true;
  public static int test4(int x, int y) {
    if (x > 0 && y > 0) {
      return y + x;
    } else {
      return y - x;
    }
  }

  //@ ensures true;
  public static void test1(int x, boolean b) {
    System.out.println("test1");
    Integer z = new Integer((int) x);
    if (z <= 1200) System.out.println("le 1200");
    if (z >= 1200) System.out.println("ge 1200");
    if (b) {
      System.out.println("b true");
    } else {
      System.out.println("b false");
    }
  }

  //@ requires x >= 0 && z >= 0;
  //@ ensures true;
  public void test(int x, int z) {
    // x = x >>> 1;
    x = x + z;
    if (x > z) {
      // if (z > x)
      System.out.println("unreachable");
      assert false;
    }
    if (x + 6 > 0) System.out.println("br3");
    else System.out.println("br2");
  }

  //@ requires z >= 0;
  //@ ensures true;
  public void test2(int x, int z) {
    System.out.println("in test2 " + x + " " + z);
    x = z++;
    // z=5;
    if (z > 0) {
      System.out.println("branch2 FOO1");
    } else System.out.println("branch2 FOO2");
    if (x > 0) System.out.println("branch2 BOO1");
    else System.out.println("branch2 BOO2");
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe.java:60: verify: The prover cannot establish an assertion (Assert) in method test
      assert false;
      ^
Note: /home/max/Documents/JMLGPT/tmp/ExSymExe.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
1 verification failure

class Main {

  static int field;

  //@ requires a != null;
  //@ requires a.length == 2;
  //@ requires b >= 0;
  //@ ensures true;
  public void testa(int b, boolean[] a) {
    b++;
    if (a[0]) System.out.println("array0");
    if (a[1]) System.out.println("array1");
  }

  //@ requires xm < ym && xm > ym;
  //@ ensures false;
  public void test5(double xm, double ym) {
    if (xm < ym && xm > ym) {
      System.out.println("unreachable");
      assert (false);
    } else assert (true);
  }

  //@ ensures true;
  public void test3(double x, double y) {
    if (Math.sin(x) + Math.cos(y) == 1) System.out.println("eq");
    else System.out.println("neq");
  }

  //@ ensures true;
  public static int test4(int x, int y) {
    if (x > 0 && y > 0) {
      return y + x;
    } else {
      return y - x;
    }
  }

  //@ ensures true;
  public static void test1(int x, boolean b) {
    System.out.println("test1");
    Integer z = new Integer((int) x);
    if (z <= 1200) System.out.println("le 1200");
    if (z >= 1200) System.out.println("ge 1200");
    if (b) {
      System.out.println("b true");
    } else {
      System.out.println("b false");
    }
  }

  //@ requires x >= 0 && z >= 0;
  //@ ensures true;
  public void test(int x, int z) {
    // x = x >>> 1;
    x = x + z;
    if (x > z) {
      // if (z > x)
      System.out.println("unreachable");
      // assert false;
    }
    if (x + 6 > 0) System.out.println("br3");
    else System.out.println("br2");
  }

  //@ requires z >= 0;
  //@ ensures true;
  public void test2(int x, int z) {
    System.out.println("in test2 " + x + " " + z);
    x = z++;
    // z=5;
    if (z > 0) {
      System.out.println("branch2 FOO1");
    } else System.out.println("branch2 FOO2");
    if (x > 0) System.out.println("branch2 BOO1");
    else System.out.println("branch2 BOO2");
  }
}
Note: /home/max/Documents/JMLGPT/tmp/ExSymExe.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.

class Main {

  static int field;

  //@ requires a != null;
  //@ requires a.length == 2;
  //@ requires b >= 0;
  //@ ensures true;
  public void testa(int b, boolean[] a) {
    b++;
    if (a[0]) System.out.println("array0");
    if (a[1]) System.out.println("array1");
  }

  //@ requires xm < ym && xm > ym;
  //@ ensures false;
  public void test5(double xm, double ym) {
    if (xm < ym && xm > ym) {
      System.out.println("unreachable");
      assert (false);
    } else assert (true);
  }

  //@ ensures true;
  public void test3(double x, double y) {
    if (Math.sin(x) + Math.cos(y) == 1) System.out.println("eq");
    else System.out.println("neq");
  }

  //@ ensures true;
  public static int test4(int x, int y) {
    if (x > 0 && y > 0) {
      return y + x;
    } else {
      return y - x;
    }
  }

  //@ ensures true;
  public static void test1(int x, boolean b) {
    System.out.println("test1");
    Integer z = new Integer((int) x);
    if (z <= 1200) System.out.println("le 1200");
    if (z >= 1200) System.out.println("ge 1200");
    if (b) {
      System.out.println("b true");
    } else {
      System.out.println("b false");
    }
  }

  //@ requires x >= 0 && z >= 0;
  //@ ensures true;
  public void test(int x, int z) {
    // x = x >>> 1;
    x = x + z;
    if (x > z) {
      // if (z > x)
      System.out.println("unreachable");
      // assert false;
    }
    if (x + 6 > 0) System.out.println("br3");
    else System.out.println("br2");
  }

  //@ requires z >= 0;
  //@ ensures true;
  public void test2(int x, int z) {
    System.out.println("in test2 " + x + " " + z);
    x = z++;
    // z=5;
    if (z > 0) {
      System.out.println("branch2 FOO1");
    } else System.out.println("branch2 FOO2");
    if (x > 0) System.out.println("branch2 BOO1");
    else System.out.println("branch2 BOO2");
  }
}
Note: /home/max/Documents/JMLGPT/tmp/ExSymExe.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.

class Main {

  static int field;

  //@ requires a != null;
  //@ requires a.length == 2;
  //@ requires b >= 0;
  //@ ensures true;
  public void testa(int b, boolean[] a) {
    b++;
    if (a[0]) System.out.println("array0");
    if (a[1]) System.out.println("array1");
  }

  //@ requires xm < ym && xm > ym;
  //@ ensures false;
  public void test5(double xm, double ym) {
    if (xm < ym && xm > ym) {
      System.out.println("unreachable");
      assert (false);
    } else assert (true);
  }

  //@ ensures true;
  public void test3(double x, double y) {
    if (Math.sin(x) + Math.cos(y) == 1) System.out.println("eq");
    else System.out.println("neq");
  }

  //@ ensures true;
  public static int test4(int x, int y) {
    if (x > 0 && y > 0) {
      return y + x;
    } else {
      return y - x;
    }
  }

  //@ ensures true;
  public static void test1(int x, boolean b) {
    System.out.println("test1");
    Integer z = new Integer((int) x);
    if (z <= 1200) System.out.println("le 1200");
    if (z >= 1200) System.out.println("ge 1200");
    if (b) {
      System.out.println("b true");
    } else {
      System.out.println("b false");
    }
  }

  //@ requires x >= 0 && z >= 0;
  //@ ensures true;
  public void test(int x, int z) {
    // x = x >>> 1;
    x = x + z;
    if (x > z) {
      // if (z > x)
      System.out.println("unreachable");
      // assert false;
    }
    if (x + 6 > 0) System.out.println("br3");
    else System.out.println("br2");
  }

  //@ requires z >= 0;
  //@ ensures true;
  public void test2(int x, int z) {
    System.out.println("in test2 " + x + " " + z);
    x = z++;
    // z=5;
    if (z > 0) {
      System.out.println("branch2 FOO1");
    } else System.out.println("branch2 FOO2");
    if (x > 0) System.out.println("branch2 BOO1");
    else System.out.println("branch2 BOO2");
  }
}
Note: /home/max/Documents/JMLGPT/tmp/ExSymExe.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.

class Main {

  static int field;

  //@ requires a != null;
  //@ requires a.length == 2;
  //@ requires b >= 0;
  //@ ensures true;
  public void testa(int b, boolean[] a) {
    b++;
    if (a[0]) System.out.println("array0");
    if (a[1]) System.out.println("array1");
  }

  //@ requires xm < ym && xm > ym;
  //@ ensures false;
  public void test5(double xm, double ym) {
    if (xm < ym && xm > ym) {
      System.out.println("unreachable");
      assert (false);
    } else assert (true);
  }

  //@ ensures true;
  public void test3(double x, double y) {
    if (Math.sin(x) + Math.cos(y) == 1) System.out.println("eq");
    else System.out.println("neq");
  }

  //@ ensures true;
  public static int test4(int x, int y) {
    if (x > 0 && y > 0) {
      return y + x;
    } else {
      return y - x;
    }
  }

  //@ ensures true;
  public static void test1(int x, boolean b) {
    System.out.println("test1");
    Integer z = Integer.valueOf((int) x);
    if (z <= 1200) System.out.println("le 1200");
    if (z >= 1200) System.out.println("ge 1200");
    if (b) {
      System.out.println("b true");
    } else {
      System.out.println("b false");
    }
  }

  //@ requires x >= 0 && z >= 0;
  //@ ensures true;
  public void test(int x, int z) {
    // x = x >>> 1;
    x = x + z;
    if (x > z) {
      // if (z > x)
      System.out.println("unreachable");
      // assert false;
    }
    if (x + 6 > 0) System.out.println("br3");
    else System.out.println("br2");
  }

  //@ requires z >= 0;
  //@ ensures true;
  public void test2(int x, int z) {
    System.out.println("in test2 " + x + " " + z);
    x = z++;
    // z=5;
    if (z > 0) {
      System.out.println("branch2 FOO1");
    } else System.out.println("branch2 FOO2");
    if (x > 0) System.out.println("branch2 BOO1");
    else System.out.println("branch2 BOO2");
  }
}

