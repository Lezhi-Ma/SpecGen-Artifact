import java.util.Random;

class assert6 {
    //@ ensures i >= 1000;
    public static void func() {
        int i = new Random().nextInt();

        if (i >= 1000) {
            if (!(i >= 1000)) {
                assert false;
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/assert6.java:4: error: cannot find symbol
    //@ ensures i >= 1000;
                ^
  symbol:   variable i
  location: class assert6
1 error

import java.util.Random;

class assert6 {
    //@ ensures \result >= 1000;
    public static void func() {
        int i = new Random().nextInt();

        if (i >= 1000) {
            if (!(i >= 1000)) {
                assert false;
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/assert6.java:4: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result >= 1000;
                 ^
1 error

import java.util.Random;

class assert6 {
    //@ ensures i >= 1000;
    public static void func() {
        int i = new Random().nextInt();

        if (i >= 1000) {
            if (!(i >= 1000)) {
                assert false;
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/assert6.java:4: error: cannot find symbol
    //@ ensures i >= 1000;
                ^
  symbol:   variable i
  location: class assert6
1 error

import java.util.Random;

class assert6 {
    //@ ensures \result >= 1000;
    public static void func() {
        int i = new Random().nextInt();

        if (i >= 1000) {
            if (!(i >= 1000)) {
                assert false;
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/assert6.java:4: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result >= 1000;
                 ^
1 error

import java.util.Random;

class assert6 {
    //@ ensures i >= 1000;
    public static void func() {
        int i = new Random().nextInt();

        if (i >= 1000) {
            if (!(i >= 1000)) {
                assert false;
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/assert6.java:4: error: cannot find symbol
    //@ ensures i >= 1000;
                ^
  symbol:   variable i
  location: class assert6
1 error

import java.util.Random;

class assert6 {
    //@ ensures \result >= 1000;
    public static void func() {
        int i = new Random().nextInt();

        if (i >= 1000) {
            if (!(i >= 1000)) {
                assert false;
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/assert6.java:4: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result >= 1000;
                 ^
1 error

import java.util.Random;

class assert6 {
    //@ ensures i >= 1000;
    public static void func() {
        int i = new Random().nextInt();

        if (i >= 1000) {
            if (!(i >= 1000)) {
                assert false;
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/assert6.java:4: error: cannot find symbol
    //@ ensures i >= 1000;
                ^
  symbol:   variable i
  location: class assert6
1 error

import java.util.Random;

class assert6 {
    //@ ensures \result >= 1000;
    public static void func() {
        int i = new Random().nextInt();

        if (i >= 1000) {
            if (!(i >= 1000)) {
                assert false;
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/assert6.java:4: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result >= 1000;
                 ^
1 error

import java.util.Random;

class assert6 {
    //@ ensures i >= 1000;
    public static void func() {
        int i = new Random().nextInt();

        if (i >= 1000) {
            if (!(i >= 1000)) {
                assert false;
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/assert6.java:4: error: cannot find symbol
    //@ ensures i >= 1000;
                ^
  symbol:   variable i
  location: class assert6
1 error

import java.util.Random;

class assert6 {
    //@ ensures \result >= 1000;
    public static void func() {
        int i = new Random().nextInt();

        if (i >= 1000) {
            if (!(i >= 1000)) {
                assert false;
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/assert6.java:4: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result >= 1000;
                 ^
1 error

import java.util.Random;

class assert6 {
    //@ ensures \result > 1000;  
    public static void func() {
        int i = new Random().nextInt();

        if (i >= 1000) {
            if (!(i >= 1000)) {
                assert false;
            }
        }
    }
}

/home/max/Documents/JMLGPT/tmp/assert6.java:4: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result > 1000;  
                 ^
1 error

import java.util.Random;

class assert6 {
    //@ ensures \result >= 1000;  
    public static void func() {
        int i = new Random().nextInt();

        if (i >= 1000) {
            if (!(i >= 1000)) {
                assert false;
            }
        }
    }
}

/home/max/Documents/JMLGPT/tmp/assert6.java:4: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result >= 1000;  
                 ^
1 error

import java.util.Random;

class assert6 {
    //@ ensures \result + 1 >= 1000;  
    public static void func() {
        int i = new Random().nextInt();

        if (i >= 1000) {
            if (!(i >= 1000)) {
                assert false;
            }
        }
    }
}

/home/max/Documents/JMLGPT/tmp/assert6.java:4: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result + 1 >= 1000;  
                 ^
1 error

import java.util.Random;

class assert6 {
 
    public static void func() {
        int i = new Random().nextInt();

        if (i >= 1000) {
            if (!(i >= 1000)) {
                assert false;
            }
        }
    }
}


