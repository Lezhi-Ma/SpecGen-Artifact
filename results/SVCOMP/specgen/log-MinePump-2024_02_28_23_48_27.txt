public class MinePump {

    boolean pumpRunning = false;

    boolean systemActive = true;

    Environment env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Environment env) {
        super();
        this.env = env;
    }

    public void timeShift() {
        if (pumpRunning) env.lowerWaterLevel();
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning == true;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures \result == pumpRunning;
    public boolean isPumpRunning() {
        return pumpRunning;
    }

    //@ ensures pumpRunning == false;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == env.isMethaneLevelCritical();
    public boolean isMethaneAlarm() {
        return env.isMethaneLevelCritical();
    }

    //@ ensures \result != null;
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result == systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:7: error: cannot find symbol
    Environment env;
    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:11: error: cannot find symbol
    public MinePump(Environment env) {
                    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:10: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures this.env == env;
                    ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:31: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures pumpRunning == true;
                ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:36: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == pumpRunning;
                           ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:41: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures pumpRunning == false;
                ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:46: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == env.isMethaneLevelCritical();
                           ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:62: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures !pumpRunning;
                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:71: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures !pumpRunning;
                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:77: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == systemActive;
                           ^
10 errors

public class MinePump {

    private /*@ spec_public @*/ boolean pumpRunning = false;

    private /*@ spec_public @*/ boolean systemActive = true;

    private /*@ spec_public @*/ Environment env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Environment env) {
        super();
        this.env = env;
    }

    public void timeShift() {
        if (pumpRunning) env.lowerWaterLevel();
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning == true;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures \result == pumpRunning;
    public boolean isPumpRunning() {
        return pumpRunning;
    }

    //@ ensures pumpRunning == false;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == env.isMethaneLevelCritical();
    public boolean isMethaneAlarm() {
        return env.isMethaneLevelCritical();
    }

    //@ ensures \result != null;
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result == systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:7: error: cannot find symbol
    private /*@ spec_public @*/ Environment env;
                                ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:11: error: cannot find symbol
    public MinePump(Environment env) {
                    ^
  symbol:   class Environment
  location: class MinePump
2 errors

public class MinePump {

    private /*@ spec_public @*/ boolean pumpRunning = false;

    private /*@ spec_public @*/ boolean systemActive = true;

    private Environment env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Environment env) {
        super();
        this.env = env;
    }

    public void timeShift() {
        if (pumpRunning) env.lowerWaterLevel();
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning == true;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures \result == pumpRunning;
    public boolean isPumpRunning() {
        return pumpRunning;
    }

    //@ ensures pumpRunning == false;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == env.isMethaneLevelCritical();
    public boolean isMethaneAlarm() {
        return env.isMethaneLevelCritical();
    }

    //@ ensures \result != null;
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result == systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:7: error: cannot find symbol
    private Environment env;
            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:11: error: cannot find symbol
    public MinePump(Environment env) {
                    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:10: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures this.env == env;
                    ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:46: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == env.isMethaneLevelCritical();
                           ^
4 errors

public class MinePump {

    private /*@ spec_public @*/ boolean pumpRunning = false;

    private /*@ spec_public @*/ boolean systemActive = true;

    private /*@ spec_public @*/ Environment env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Environment env) {
        super();
        this.env = env;
    }

    public void timeShift() {
        if (pumpRunning) env.lowerWaterLevel();
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning == true;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures \result == pumpRunning;
    public boolean isPumpRunning() {
        return pumpRunning;
    }

    //@ ensures pumpRunning == false;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == env.isMethaneLevelCritical();
    public boolean isMethaneAlarm() {
        return env.isMethaneLevelCritical();
    }

    //@ ensures \result != null;
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result == systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:7: error: cannot find symbol
    private /*@ spec_public @*/ Environment env;
                                ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:11: error: cannot find symbol
    public MinePump(Environment env) {
                    ^
  symbol:   class Environment
  location: class MinePump
2 errors

public class MinePump {

    private /*@ spec_public @*/ boolean pumpRunning = false;

    private /*@ spec_public @*/ boolean systemActive = true;

    private Environment env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Environment env) {
        super();
        this.env = env;
    }

    public void timeShift() {
        if (pumpRunning) env.lowerWaterLevel();
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning == true;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures \result == pumpRunning;
    public boolean isPumpRunning() {
        return pumpRunning;
    }

    //@ ensures pumpRunning == false;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == env.isMethaneLevelCritical();
    public boolean isMethaneAlarm() {
        return env.isMethaneLevelCritical();
    }

    //@ ensures \result != null;
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result == systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:7: error: cannot find symbol
    private Environment env;
            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:11: error: cannot find symbol
    public MinePump(Environment env) {
                    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:10: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures this.env == env;
                    ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:46: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == env.isMethaneLevelCritical();
                           ^
4 errors

public class MinePump {

    private /*@ spec_public @*/ boolean pumpRunning = false;

    private /*@ spec_public @*/ boolean systemActive = true;

    private /*@ spec_public @*/ Environment env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Environment env) {
        super();
        this.env = env;
    }

    public void timeShift() {
        if (pumpRunning) env.lowerWaterLevel();
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning == true;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures \result == pumpRunning;
    public boolean isPumpRunning() {
        return pumpRunning;
    }

    //@ ensures pumpRunning == false;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == env.isMethaneLevelCritical();
    public boolean isMethaneAlarm() {
        return env.isMethaneLevelCritical();
    }

    //@ ensures \result != null;
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result == systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:7: error: cannot find symbol
    private /*@ spec_public @*/ Environment env;
                                ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:11: error: cannot find symbol
    public MinePump(Environment env) {
                    ^
  symbol:   class Environment
  location: class MinePump
2 errors

public class MinePump {

    private /*@ spec_public @*/ boolean pumpRunning = false;

    private /*@ spec_public @*/ boolean systemActive = true;

    private /*@ spec_public @*/ Object env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Object env) {
        super();
        this.env = env;
    }

    public void timeShift() {
        if (pumpRunning) lowerWaterLevel();
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning == true;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures \result == pumpRunning;
    public boolean isPumpRunning() {
        return pumpRunning;
    }

    //@ ensures pumpRunning == false;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == isMethaneAlarm();
    public boolean isMethaneAlarm() {
        return isMethaneAlarm();
    }

    //@ ensures \result != null;
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result == systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:17: error: cannot find symbol
        if (pumpRunning) lowerWaterLevel();
                         ^
  symbol:   method lowerWaterLevel()
  location: class MinePump
1 error

public class MinePump {

    private /*@ spec_public @*/ boolean pumpRunning = false;

    private /*@ spec_public @*/ boolean systemActive = true;

    private /*@ spec_public @*/ Object env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Object env) {
        super();
        this.env = env;
    }

    public void timeShift() {
        if (pumpRunning) {
            env.lowerWaterLevel();
        }
        if (systemActive) {
            processEnvironment();
        }
    }

    private void processEnvironment__wrappee__base() {}

    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning == true;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures \result == pumpRunning;
    public boolean isPumpRunning() {
        return pumpRunning;
    }

    //@ ensures pumpRunning == false;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == isMethaneAlarm();
    public boolean isMethaneAlarm() {
        return isMethaneAlarm();
    }

    //@ ensures \result != null;
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result == systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:18: error: cannot find symbol
            env.lowerWaterLevel();
               ^
  symbol:   method lowerWaterLevel()
  location: variable env of type Object
1 error

public class MinePump {

    private /*@ spec_public @*/ boolean pumpRunning = false;

    private /*@ spec_public @*/ boolean systemActive = true;

    private /*@ spec_public @*/ Environment env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Environment env) {
        super();
        this.env = env;
    }

    public void timeShift() {
        if (pumpRunning) {
            env.lowerWaterLevel();
        }
        if (systemActive) {
            processEnvironment();
        }
    }

    private void processEnvironment__wrappee__base() {}

    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning == true;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures \result == pumpRunning;
    public boolean isPumpRunning() {
        return pumpRunning;
    }

    //@ ensures pumpRunning == false;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == env.isMethaneLevelCritical();
    public boolean isMethaneAlarm() {
        return env.isMethaneLevelCritical();
    }

    //@ ensures \result != null;
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result == systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:7: error: cannot find symbol
    private /*@ spec_public @*/ Environment env;
                                ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:11: error: cannot find symbol
    public MinePump(Environment env) {
                    ^
  symbol:   class Environment
  location: class MinePump
2 errors

public class Environment {

    private boolean methaneLevelCritical;

    public Environment(boolean methaneLevelCritical) {
        this.methaneLevelCritical = methaneLevelCritical;
    }

    public void lowerWaterLevel() {
        // Implementation of lowering water level
    }

    public boolean isMethaneLevelCritical() {
        return methaneLevelCritical;
    }

    @Override
    public String toString() {
        return "Environment [methaneLevelCritical=" + methaneLevelCritical + "]";
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:1: error: class Environment is public, should be declared in a file named Environment.java
public class Environment {
       ^
1 error

