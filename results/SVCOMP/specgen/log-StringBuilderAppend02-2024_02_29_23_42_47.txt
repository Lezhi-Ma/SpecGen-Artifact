public class StringBuilderAppend02 {
  //@ requires objectRef != null;
  //@ requires string != null;
  //@ requires (\forall int i; 0 <= i && i < charArray.length; Character.MIN_VALUE <= charArray[i] && charArray[i] <= Character.MAX_VALUE);
  //@ ensures \result.equals("diffblue%ntest%nverification%nver%ntrue%n%Z%n7%n10000000000%n2.5%n33.333%nlast buffer");
  public static void f(Object objectRef, String string) {
    char[] charArray = {
      'v', 'e', 'r', 'i', 'f', 'i',
      'c', 'a', 't', 'i', 'o', 'n'
    };
    boolean booleanValue = true;
    char characterValue = 'Z';
    int integerValue = 7;
    long longValue = 10000000000L;
    float floatValue = 2.5f;
    double doubleValue = 33.333;

    StringBuilder lastBuffer = new StringBuilder("last buffer");
    StringBuilder buffer = new StringBuilder();

    buffer
        .append(objectRef)
        .append("%n")
        .append(string)
        .append("%n")
        .append(charArray)
        .append("%n")
        .append(charArray, 0, 3)
        .append("%n")
        .append(booleanValue)
        .append("%n")
        .append(characterValue)
        .append("%n")
        .append(integerValue)
        .append("%n")
        .append(longValue)
        .append("%n")
        .append(floatValue)
        .append("%n")
        .append(doubleValue)
        .append("%n")
        .append(lastBuffer);

    String tmp = buffer.toString();
    assert tmp.equals(
        "diffblue%ntest%nverification%nver%ntrue%n%Z%n7%n10000000000%n2.5%n33.333%nlast buffer");
  }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend02.java:4: error: cannot find symbol
  //@ requires (\forall int i; 0 <= i && i < charArray.length; Character.MIN_VALUE <= charArray[i] && charArray[i] <= Character.MAX_VALUE);
                                             ^
  symbol:   variable charArray
  location: class StringBuilderAppend02
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend02.java:4: error: cannot find symbol
  //@ requires (\forall int i; 0 <= i && i < charArray.length; Character.MIN_VALUE <= charArray[i] && charArray[i] <= Character.MAX_VALUE);
                                                                                      ^
  symbol:   variable charArray
  location: class StringBuilderAppend02
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend02.java:4: error: cannot find symbol
  //@ requires (\forall int i; 0 <= i && i < charArray.length; Character.MIN_VALUE <= charArray[i] && charArray[i] <= Character.MAX_VALUE);
                                                                                                      ^
  symbol:   variable charArray
  location: class StringBuilderAppend02
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend02.java:5: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures \result.equals("diffblue%ntest%nverification%nver%ntrue%n%Z%n7%n10000000000%n2.5%n33.333%nlast buffer");
               ^
4 errors

public class StringBuilderAppend02 {
  //@ requires objectRef != null;
  //@ requires string != null;
  //@ ensures \result.equals("diffblue%ntest%nverification%nver%ntrue%n%Z%n7%n10000000000%n2.5%n33.333%nlast buffer");
  public static void f(Object objectRef, String string) {
    char[] charArray = {
      'v', 'e', 'r', 'i', 'f', 'i',
      'c', 'a', 't', 'i', 'o', 'n'
    };
    boolean booleanValue = true;
    char characterValue = 'Z';
    int integerValue = 7;
    long longValue = 10000000000L;
    float floatValue = 2.5f;
    double doubleValue = 33.333;

    StringBuilder lastBuffer = new StringBuilder("last buffer");
    StringBuilder buffer = new StringBuilder();

    buffer
        .append(objectRef)
        .append("%n")
        .append(string)
        .append("%n")
        .append(charArray)
        .append("%n")
        .append(charArray, 0, 3)
        .append("%n")
        .append(booleanValue)
        .append("%n")
        .append(characterValue)
        .append("%n")
        .append(integerValue)
        .append("%n")
        .append(longValue)
        .append("%n")
        .append(floatValue)
        .append("%n")
        .append(doubleValue)
        .append("%n")
        .append(lastBuffer);

    String tmp = buffer.toString();
    assert tmp.equals(
        "diffblue%ntest%nverification%nver%ntrue%n%Z%n7%n10000000000%n2.5%n33.333%nlast buffer");
  }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend02.java:4: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures \result.equals("diffblue%ntest%nverification%nver%ntrue%n%Z%n7%n10000000000%n2.5%n33.333%nlast buffer");
               ^
1 error

public class StringBuilderAppend02 {
  //@ requires objectRef != null;
  //@ requires string != null;
  //@ ensures true; // placeholder for the absence of return value
  public static void f(Object objectRef, String string) {
    char[] charArray = {
      'v', 'e', 'r', 'i', 'f', 'i',
      'c', 'a', 't', 'i', 'o', 'n'
    };
    boolean booleanValue = true;
    char characterValue = 'Z';
    int integerValue = 7;
    long longValue = 10000000000L;
    float floatValue = 2.5f;
    double doubleValue = 33.333;

    StringBuilder lastBuffer = new StringBuilder("last buffer");
    StringBuilder buffer = new StringBuilder();

    buffer
        .append(objectRef)
        .append("%n")
        .append(string)
        .append("%n")
        .append(charArray)
        .append("%n")
        .append(charArray, 0, 3)
        .append("%n")
        .append(booleanValue)
        .append("%n")
        .append(characterValue)
        .append("%n")
        .append(integerValue)
        .append("%n")
        .append(longValue)
        .append("%n")
        .append(floatValue)
        .append("%n")
        .append(doubleValue)
        .append("%n")
        .append(lastBuffer);

    String tmp = buffer.toString();
    assert tmp.equals(
        "diffblue%ntest%nverification%nver%ntrue%n%Z%n7%n10000000000%n2.5%n33.333%nlast buffer");
  }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 343932928 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid6974.log

public class StringBuilderAppend02 {
  //@ requires objectRef != null;
  //@ requires string != null;
  //@ ensures true; // placeholder for the absence of return value
  public static void f(Object objectRef, String string) {
    char[] charArray = {
      'v', 'e', 'r', 'i', 'f', 'i',
      'c', 'a', 't', 'i', 'o', 'n'
    };
    boolean booleanValue = true;
    char characterValue = 'Z';
    int integerValue = 7;
    long longValue = 10000000000L;
    float floatValue = 2.5f;
    double doubleValue = 33.333;

    StringBuilder lastBuffer = new StringBuilder("last buffer");
    StringBuilder buffer = new StringBuilder();

    buffer
        .append(objectRef)
        .append("%n")
        .append(string)
        .append("%n")
        .append(charArray)
        .append("%n")
        .append(charArray, 0, 3)
        .append("%n")
        .append(booleanValue)
        .append("%n")
        .append(characterValue)
        .append("%n")
        .append(integerValue)
        .append("%n")
        .append(longValue)
        .append("%n")
        .append(floatValue)
        .append("%n")
        .append(doubleValue)
        .append("%n")
        .append(lastBuffer);

    String tmp = buffer.toString();
    assert tmp.equals(
        "diffblue%ntest%nverification%nver%ntrue%n%Z%n7%n10000000000%n2.5%n33.333%nlast buffer");
  }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 333447168 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid7010.log

public class StringBuilderAppend02 {
  //@ requires objectRef != null;
  //@ requires string != null;
  //@ ensures true; // placeholder for the absence of return value
  public static void f(Object objectRef, String string) {
    char[] charArray = {
      'v', 'e', 'r', 'i', 'f', 'i',
      'c', 'a', 't', 'i', 'o', 'n'
    };
    boolean booleanValue = true;
    char characterValue = 'Z';
    int integerValue = 7;
    long longValue = 10000000000L;
    float floatValue = 2.5f;
    double doubleValue = 33.333;

    StringBuilder lastBuffer = new StringBuilder("last buffer");
    StringBuilder buffer = new StringBuilder();

    buffer
        .append(objectRef)
        .append("%n")
        .append(string)
        .append("%n")
        .append(charArray)
        .append("%n")
        .append(charArray, 0, 3)
        .append("%n")
        .append(booleanValue)
        .append("%n")
        .append(characterValue)
        .append("%n")
        .append(integerValue)
        .append("%n")
        .append(longValue)
        .append("%n")
        .append(floatValue)
        .append("%n")
        .append(doubleValue)
        .append("%n")
        .append(lastBuffer);

    String tmp = buffer.toString();
    assert tmp.equals(
        "diffblue%ntest%nverification%nver%ntrue%n%Z%n7%n10000000000%n2.5%n33.333%nlast buffer");
  }
}
