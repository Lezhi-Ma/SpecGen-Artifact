class Main {
    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> \result == test(x);
    //@ ensures !\result ==> true;
    public static boolean f(float x) {
        if (x >= 0.0f && x <= Integer.MAX_VALUE / 2) {
            Main inst = new Main();
            return inst.test(x);
        }
        return true;
    }

    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> res > 0;
    //@ ensures !\result ==> res <= 0;
    public boolean test(float x) {

        int res = (int) ++x;
        if (res > 0) {
            System.out.println("x >0");
        } else {
            return false;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:3: error: non-static method test(float) cannot be referenced from a static context
    //@ ensures \result ==> \result == test(x);
                                       ^
/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:14: error: cannot find symbol
    //@ ensures \result ==> res > 0;
                            ^
  symbol:   variable res
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:15: error: cannot find symbol
    //@ ensures !\result ==> res <= 0;
                             ^
  symbol:   variable res
  location: class Main
3 errors

class Main {
    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> \result == test(x);
    //@ ensures !\result ==> true;
    public static boolean f(float x) {
        if (x >= 0.0f && x <= Integer.MAX_VALUE / 2) {
            Main inst = new Main();
            return inst.test(x);
        }
        return true;
    }

    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> \result > 0;
    //@ ensures !\result ==> \result <= 0;
    public boolean test(float x) {

        int res = (int) ++x;
        if (res > 0) {
            System.out.println("x >0");
        } else {
            return false;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:3: error: non-static method test(float) cannot be referenced from a static context
    //@ ensures \result ==> \result == test(x);
                                       ^
/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:14: error: bad operand types for binary operator '>'
    //@ ensures \result ==> \result > 0;
                                    ^
  first type:  boolean
  second type: int
/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:15: error: bad operand types for binary operator '<='
    //@ ensures !\result ==> \result <= 0;
                                     ^
  first type:  boolean
  second type: int
3 errors

class Main {
    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> test(x);
    //@ ensures !\result ==> true;
    public static boolean f(float x) {
        if (x >= 0.0f && x <= Integer.MAX_VALUE / 2) {
            Main inst = new Main();
            return inst.test(x);
        }
        return true;
    }

    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> res > 0;
    //@ ensures !\result ==> res <= 0;
    public boolean test(float x) {

        int res = (int) ++x;
        if (res > 0) {
            System.out.println("x >0");
            return true;
        } else {
            return false;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:3: error: non-static method test(float) cannot be referenced from a static context
    //@ ensures \result ==> test(x);
                            ^
/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:14: error: cannot find symbol
    //@ ensures \result ==> res > 0;
                            ^
  symbol:   variable res
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:15: error: cannot find symbol
    //@ ensures !\result ==> res <= 0;
                             ^
  symbol:   variable res
  location: class Main
3 errors

class Main {
    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> test(x);
    //@ ensures !\result ==> true;
    public static boolean f(float x) {
        if (x >= 0.0f && x <= Integer.MAX_VALUE / 2) {
            Main inst = new Main();
            return inst.test(x);
        }
        return true;
    }

    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> test(x);
    //@ ensures !\result ==> true;
    public boolean test(float x) {

        int res = (int) ++x;
        if (res > 0) {
            System.out.println("x >0");
            return true;
        } else {
            return false;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:3: error: non-static method test(float) cannot be referenced from a static context
    //@ ensures \result ==> test(x);
                            ^
1 error

class Main {
    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> (new Main()).test(x);
    //@ ensures !\result ==> true;
    public static boolean f(float x) {
        if (x >= 0.0f && x <= Integer.MAX_VALUE / 2) {
            Main inst = new Main();
            return inst.test(x);
        }
        return true;
    }

    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> res > 0;
    //@ ensures !\result ==> res <= 0;
    public boolean test(float x) {

        int res = (int) ++x;
        if (res > 0) {
            System.out.println("x >0");
            return true;
        } else {
            return false;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result ==> (new Main()).test(x);
                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:14: error: cannot find symbol
    //@ ensures \result ==> res > 0;
                            ^
  symbol:   variable res
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:15: error: cannot find symbol
    //@ ensures !\result ==> res <= 0;
                             ^
  symbol:   variable res
  location: class Main
3 errors

class Main {
    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> test(x);
    //@ ensures !\result ==> true;
    public static boolean f(float x) {
        if (x >= 0.0f && x <= Integer.MAX_VALUE / 2) {
            Main inst = new Main();
            return inst.test(x);
        }
        return true;
    }

    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> x > 0;
    //@ ensures !\result ==> x <= 0;
    public boolean test(float x) {

        int res = (int) ++x;
        if (res > 0) {
            System.out.println("x >0");
            return true;
        } else {
            return false;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:3: error: non-static method test(float) cannot be referenced from a static context
    //@ ensures \result ==> test(x);
                            ^
1 error

class Main {
    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> (new Main()).test(x);
    //@ ensures !\result ==> true;
    public static boolean f(float x) {
        if (x >= 0.0f && x <= Integer.MAX_VALUE / 2) {
            Main inst = new Main();
            return inst.test(x);
        }
        return true;
    }

    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> x > 0;
    //@ ensures !\result ==> x <= 0;
    public boolean test(float x) {

        int res = (int) ++x;
        if (res > 0) {
            System.out.println("x >0");
            return true;
        } else {
            return false;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result ==> (new Main()).test(x);
                             ^
1 error

class Main {
    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> test(x);
    //@ ensures !\result ==> true;
    public static boolean f(float x) {
        if (x >= 0.0f && x <= Integer.MAX_VALUE / 2) {
            Main inst = new Main();
            return inst.test(x);
        }
        return true;
    }

    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> x > 0;
    //@ ensures !\result ==> x <= 0;
    public boolean test(float x) {

        int res = (int) ++x;
        if (res > 0) {
            System.out.println("x >0");
            return true;
        } else {
            return false;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:3: error: non-static method test(float) cannot be referenced from a static context
    //@ ensures \result ==> test(x);
                            ^
1 error

class Main {
    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> (new Main()).test(x);
    //@ ensures !\result ==> true;
    public static boolean f(float x) {
        if (x >= 0.0f && x <= Integer.MAX_VALUE / 2) {
            Main inst = new Main();
            return inst.test(x);
        }
        return true;
    }

    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> x > 0;
    //@ ensures !\result ==> x <= 0;
    public boolean test(float x) {

        int res = (int) ++x;
        if (res > 0) {
            System.out.println("x >0");
            return true;
        } else {
            return false;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result ==> (new Main()).test(x);
                             ^
1 error

class Main {
    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> test(x);
    //@ ensures !\result ==> true;
    public static boolean f(float x) {
        if (x >= 0.0f && x <= Integer.MAX_VALUE / 2) {
            Main inst = new Main();
            return inst.test(x);
        }
        return true;
    }

    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> x > 0;
    //@ ensures !\result ==> x <= 0;
    public boolean test(float x) {

        int res = (int) ++x;
        if (res > 0) {
            System.out.println("x >0");
            return true;
        } else {
            return false;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:3: error: non-static method test(float) cannot be referenced from a static context
    //@ ensures \result ==> test(x);
                            ^
1 error

class Main {
    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> test(x);  
    //@ ensures !\result ==> true;
    public static boolean f(float x) {
        if (x >= 0.0f && x <= Integer.MAX_VALUE / 2) {
            Main inst = new Main();
            return inst.test(x);
        }
        return true;
    }

    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> x > 0;
    //@ ensures !\result ==> x <= 0;
    public boolean test(float x) {

        int res = (int) ++x;
        if (res > 0) {
            System.out.println("x >0");
            return true;
        } else {
            return false;
        }
    }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeF2I.java:3: error: non-static method test(float) cannot be referenced from a static context
    //@ ensures \result ==> test(x);  
                            ^
1 error

class Main {
    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
 
    //@ ensures !\result ==> true;
    public static boolean f(float x) {
        if (x >= 0.0f && x <= Integer.MAX_VALUE / 2) {
            Main inst = new Main();
            return inst.test(x);
        }
        return true;
    }

    //@ requires 0.0 <= x && x <= Integer.MAX_VALUE / 2;
    //@ ensures \result ==> x > 0;
    //@ ensures !\result ==> x <= 0;
    public boolean test(float x) {

        int res = (int) ++x;
        if (res > 0) {
            System.out.println("x >0");
            return true;
        } else {
            return false;
        }
    }
}

