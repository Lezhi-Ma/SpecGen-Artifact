public class TokenTest01 {
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
    //@ ensures !\result ==> tokens.length == 4 || (\exists int i; 0 <= i && i < tokens.length; !tokens[i].equals("automatic") || !tokens[i+1].equals("test") || !tokens[i+2].equals("case") || !tokens[i+3].equals("generation"));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length == 4) return false;
        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; (j == 0 && tokens[j].equals("automatic")) || (j == 1 && tokens[j].equals("test")) || (j == 2 && tokens[j].equals("case")) || (j == 3 && tokens[j].equals("generation"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            System.out.println(token);
            if (i == 0) {
                if (!token.equals("automatic"))
                    return false;
            } else if (i == 1) {
                if (!token.equals("test"))
                    return false;
            } else if (i == 2) {
                if (!token.equals("case"))
                    return false;
            } else if (i == 3) {
                if (!token.equals("generation"))
                    return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:10: error: ')' expected
        //@ maintaining (\forall int j; 0 <= j && j < i; (j == 0 && tokens[j].equals("automatic")) || (j == 1 && tokens[j].equals("test")) || (j == 2 && tokens[j].equals("case")) || (j == 3 && tokens[j].equals("generation"));
                                                                                                                                                                                                                                ^
1 error

public class TokenTest01 {
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
    //@ ensures !\result ==> tokens.length == 4 || (\exists int i; 0 <= i && i < tokens.length; !tokens[i].equals("automatic") || !tokens[i+1].equals("test") || !tokens[i+2].equals("case") || !tokens[i+3].equals("generation"));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length == 4) return false;
        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; (j == 0 ==> tokens[j].equals("automatic")) && (j == 1 ==> tokens[j].equals("test")) && (j == 2 ==> tokens[j].equals("case")) && (j == 3 ==> tokens[j].equals("generation"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            System.out.println(token);
            if (i == 0) {
                if (!token.equals("automatic"))
                    return false;
            } else if (i == 1) {
                if (!token.equals("test"))
                    return false;
            } else if (i == 2) {
                if (!token.equals("case"))
                    return false;
            } else if (i == 3) {
                if (!token.equals("generation"))
                    return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:10: error: ')' expected
        //@ maintaining (\forall int j; 0 <= j && j < i; (j == 0 ==> tokens[j].equals("automatic")) && (j == 1 ==> tokens[j].equals("test")) && (j == 2 ==> tokens[j].equals("case")) && (j == 3 ==> tokens[j].equals("generation"));
                                                                                                                                                                                                                                    ^
1 error

public class TokenTest01 {
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
    //@ ensures !\result ==> tokens.length == 4 || (\exists int i; 0 <= i && i < tokens.length; !tokens[i].equals("automatic") || !tokens[i+1].equals("test") || !tokens[i+2].equals("case") || !tokens[i+3].equals("generation"));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length == 4) return false;
        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; (j == 0 ==> tokens[j].equals("automatic")) && (j == 1 ==> tokens[j].equals("test")) && (j == 2 ==> tokens[j].equals("case")) && (j == 3 ==> tokens[j].equals("generation"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            System.out.println(token);
            if (i == 0) {
                if (!token.equals("automatic"))
                    return false;
            } else if (i == 1) {
                if (!token.equals("test"))
                    return false;
            } else if (i == 2) {
                if (!token.equals("case"))
                    return false;
            } else if (i == 3) {
                if (!token.equals("generation"))
                    return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:10: error: ')' expected
        //@ maintaining (\forall int j; 0 <= j && j < i; (j == 0 ==> tokens[j].equals("automatic")) && (j == 1 ==> tokens[j].equals("test")) && (j == 2 ==> tokens[j].equals("case")) && (j == 3 ==> tokens[j].equals("generation"));
                                                                                                                                                                                                                                    ^
1 error

public class TokenTest01 {
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
    //@ ensures !\result ==> tokens.length == 4 || (\exists int i; 0 <= i && i < tokens.length; !tokens[i].equals("automatic") || !tokens[i+1].equals("test") || !tokens[i+2].equals("case") || !tokens[i+3].equals("generation"));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length == 4) return false;
        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; (j == 0 ==> tokens[j].equals("automatic")) && (j == 1 ==> tokens[j].equals("test")) && (j == 2 ==> tokens[j].equals("case")) && (j == 3 ==> tokens[j].equals("generation"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            System.out.println(token);
            if (i == 0) {
                if (!token.equals("automatic"))
                    return false;
            } else if (i == 1) {
                if (!token.equals("test"))
                    return false;
            } else if (i == 2) {
                if (!token.equals("case"))
                    return false;
            } else if (i == 3) {
                if (!token.equals("generation"))
                    return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:10: error: ')' expected
        //@ maintaining (\forall int j; 0 <= j && j < i; (j == 0 ==> tokens[j].equals("automatic")) && (j == 1 ==> tokens[j].equals("test")) && (j == 2 ==> tokens[j].equals("case")) && (j == 3 ==> tokens[j].equals("generation"));
                                                                                                                                                                                                                                    ^
1 error

public class TokenTest01 {
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
    //@ ensures !\result ==> tokens.length == 4 || (\exists int i; 0 <= i && i < tokens.length; !tokens[i].equals("automatic") || !tokens[i+1].equals("test") || !tokens[i+2].equals("case") || !tokens[i+3].equals("generation"));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length == 4) return false;
        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; (j == 0 ==> tokens[j].equals("automatic")) && (j == 1 ==> tokens[j].equals("test")) && (j == 2 ==> tokens[j].equals("case")) && (j == 3 ==> tokens[j].equals("generation"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            System.out.println(token);
            if (i == 0) {
                if (!token.equals("automatic"))
                    return false;
            } else if (i == 1) {
                if (!token.equals("test"))
                    return false;
            } else if (i == 2) {
                if (!token.equals("case"))
                    return false;
            } else if (i == 3) {
                if (!token.equals("generation"))
                    return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:10: error: ')' expected
        //@ maintaining (\forall int j; 0 <= j && j < i; (j == 0 ==> tokens[j].equals("automatic")) && (j == 1 ==> tokens[j].equals("test")) && (j == 2 ==> tokens[j].equals("case")) && (j == 3 ==> tokens[j].equals("generation"));
                                                                                                                                                                                                                                    ^
1 error

public class TokenTest01 {
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
    //@ ensures !\result ==> tokens.length == 4 || (\exists int i; 0 <= i && i < tokens.length; !tokens[i].equals("automatic") || !tokens[i+1].equals("test") || !tokens[i+2].equals("case") || !tokens[i+3].equals("generation"));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length == 4) return false;
        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; (j == 0 ==> tokens[j].equals("automatic")) && (j == 1 ==> tokens[j].equals("test")) && (j == 2 ==> tokens[j].equals("case")) && (j == 3 ==> tokens[j].equals("generation"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            System.out.println(token);
            if (i == 0) {
                if (!token.equals("automatic"))
                    return false;
            } else if (i == 1) {
                if (!token.equals("test"))
                    return false;
            } else if (i == 2) {
                if (!token.equals("case"))
                    return false;
            } else if (i == 3) {
                if (!token.equals("generation"))
                    return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:10: error: ')' expected
        //@ maintaining (\forall int j; 0 <= j && j < i; (j == 0 ==> tokens[j].equals("automatic")) && (j == 1 ==> tokens[j].equals("test")) && (j == 2 ==> tokens[j].equals("case")) && (j == 3 ==> tokens[j].equals("generation"));
                                                                                                                                                                                                                                    ^
1 error

public class TokenTest01 {
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
    //@ ensures !\result ==> tokens.length == 4 || (\exists int i; 0 <= i && i < tokens.length; !tokens[i].equals("automatic") || !tokens[i+1].equals("test") || !tokens[i+2].equals("case") || !tokens[i+3].equals("generation"));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length == 4) return false;
        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; (j == 0 ==> tokens[j].equals("automatic")) && (j == 1 ==> tokens[j].equals("test")) && (j == 2 ==> tokens[j].equals("case")) && (j == 3 ==> tokens[j].equals("generation"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            System.out.println(token);
            if (i == 0) {
                if (!token.equals("automatic"))
                    return false;
            } else if (i == 1) {
                if (!token.equals("test"))
                    return false;
            } else if (i == 2) {
                if (!token.equals("case"))
                    return false;
            } else if (i == 3) {
                if (!token.equals("generation"))
                    return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:10: error: ')' expected
        //@ maintaining (\forall int j; 0 <= j && j < i; (j == 0 ==> tokens[j].equals("automatic")) && (j == 1 ==> tokens[j].equals("test")) && (j == 2 ==> tokens[j].equals("case")) && (j == 3 ==> tokens[j].equals("generation"));
                                                                                                                                                                                                                                    ^
1 error

public class TokenTest01 {
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if (tokens.length != 4) return false;
        for (int i = 0; i < tokens.length - 3; i++) {
            if (tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")) {
                return true;
            }
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                          ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                         ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                                                          ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                                                                                        ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                                                                                                                      ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
                             ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
                                                                                 ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
                                                                                                  ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
                                                                                                                                   ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
                                                                                                                                                                 ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
                                                                                                                                                                                               ^
  symbol:   variable tokens
  location: class TokenTest01
11 errors

public class TokenTest01 {
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if (tokens.length != 4) return false;
        for (int i = 0; i < tokens.length - 3; i++) {
            if (tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")) {
                return true;
            }
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                          ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                         ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                                                          ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                                                                                        ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                                                                                                                      ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
                             ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
                                                                                 ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
                                                                                                  ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
                                                                                                                                   ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
                                                                                                                                                                 ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
                                                                                                                                                                                               ^
  symbol:   variable tokens
  location: class TokenTest01
11 errors

public class TokenTest01 {
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length - 3; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if (tokens.length != 4) return false;
        for (int i = 0; i < tokens.length - 3; i++) {
            if (tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")) {
                return true;
            }
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                          ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                         ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                                                          ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                                                                                        ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                                                                                                                      ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length - 3; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
                             ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length - 3; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
                                                                                 ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length - 3; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
                                                                                                      ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length - 3; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
                                                                                                                                       ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length - 3; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
                                                                                                                                                                     ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures !\result ==> tokens.length != 4 || (\exists int i; 0 <= i && i < tokens.length - 3; !(tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation")));
                                                                                                                                                                                                   ^
  symbol:   variable tokens
  location: class TokenTest01
11 errors

