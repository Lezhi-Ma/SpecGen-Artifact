class Main {
    static int field;
    static int field2;

    //@ ensures \result ==> field == 9 && \result == inst.test(3, field, field2);
    public static boolean main() {
        int x = 3;
        Main inst = new Main();
        field = 9;
        return inst.test(x, field, field2);
    }

    //@ requires z == field && r == field2;
    //@ ensures \result ==> z >= x && x >= r;
    public boolean test(int x, int z, int r) {
        System.out.println("Testing ExSymExe20");
        int y = 3;
        r = x + z;
        x = z - y;
        z = r;
        if (z >= x) System.out.println("branch FOO1");
        else System.out.println("branch FOO2");
        if (x >= r) {
            return false;
        } else System.out.println("branch BOO2");

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe20.java:5: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result ==> field == 9 && \result == inst.test(3, field, field2);
                            ^
/home/max/Documents/JMLGPT/tmp/ExSymExe20.java:5: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result ==> field == 9 && \result == inst.test(3, field, field2);
                                                                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExe20.java:5: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result ==> field == 9 && \result == inst.test(3, field, field2);
                                                                         ^
/home/max/Documents/JMLGPT/tmp/ExSymExe20.java:5: error: cannot find symbol
    //@ ensures \result ==> field == 9 && \result == inst.test(3, field, field2);
                                                     ^
  symbol:   variable inst
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe20.java:13: error: An identifier with package visibility may not be used in a requires clause with public visibility
    //@ requires z == field && r == field2;
                      ^
/home/max/Documents/JMLGPT/tmp/ExSymExe20.java:13: error: An identifier with package visibility may not be used in a requires clause with public visibility
    //@ requires z == field && r == field2;
                                    ^
6 errors

class Main {
    static /*@ spec_public @*/ int field;
    static /*@ spec_public @*/ int field2;

    //@ ensures \result ==> field == 9 && \result == inst.test(3, field, field2);
    public static boolean main() {
        int x = 3;
        Main inst = new Main();
        field = 9;
        return inst.test(x, field, field2);
    }

    //@ requires z == field && r == field2;
    //@ ensures \result ==> z >= x && x >= r;
    public boolean test(int x, int z, int r) {
        System.out.println("Testing ExSymExe20");
        int y = 3;
        r = x + z;
        x = z - y;
        z = r;
        if (z >= x) System.out.println("branch FOO1");
        else System.out.println("branch FOO2");
        if (x >= r) {
            return false;
        } else System.out.println("branch BOO2");

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe20.java:5: error: cannot find symbol
    //@ ensures \result ==> field == 9 && \result == inst.test(3, field, field2);
                                                     ^
  symbol:   variable inst
  location: class Main
1 error

class Main {
    static /*@ spec_public @*/ int field;
    static /*@ spec_public @*/ int field2;

    //@ ensures \result ==> field == 9 && \result == test(3, field, field2);
    public static boolean main() {
        int x = 3;
        field = 9;
        return test(x, field, field2);
    }

    //@ requires z == field && r == field2;
    //@ ensures \result ==> z >= x && x >= r;
    public static boolean test(int x, int z, int r) {
        System.out.println("Testing ExSymExe20");
        int y = 3;
        r = x + z;
        x = z - y;
        z = r;
        if (z >= x) System.out.println("branch FOO1");
        else System.out.println("branch FOO2");
        if (x >= r) {
            return false;
        } else System.out.println("branch BOO2");

        return true;
    }
}
