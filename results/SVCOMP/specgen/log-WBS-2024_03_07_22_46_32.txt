public class WBS {

    private int WBS_Node_WBS_BSCU_SystemModeSelCmd_rlt_PRE;
    private int WBS_Node_WBS_BSCU_rlt_PRE1;
    private int WBS_Node_WBS_rlt_PRE2;

    public int Nor_Pressure;
    public int Alt_Pressure;
    public int Sys_Mode;

    //@ ensures WBS_Node_WBS_BSCU_SystemModeSelCmd_rlt_PRE == 0 && WBS_Node_WBS_BSCU_rlt_PRE1 == 0 && WBS_Node_WBS_rlt_PRE2 == 100 && Nor_Pressure == 0 && Alt_Pressure == 0 && Sys_Mode == 0;
    public WBS() {
        WBS_Node_WBS_BSCU_SystemModeSelCmd_rlt_PRE = 0;
        WBS_Node_WBS_BSCU_rlt_PRE1 = 0;
        WBS_Node_WBS_rlt_PRE2 = 100;
        Nor_Pressure = 0;
        Alt_Pressure = 0;
        Sys_Mode = 0;
    }

    //@ requires 0 <= PedalPos && PedalPos <= 4;
    //@ ensures Nor_Pressure == \old(WBS_Node_WBS_rlt_PRE2) && WBS_Node_WBS_rlt_PRE2 == Nor_Pressure;
    //@ ensures Sys_Mode == 1 <==> WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6;
    //@ ensures Sys_Mode == 0 <==> !WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6;
    //@ ensures (\forall int i; 0 <= i && i < 5; Alt_Pressure == \old(WBS_Node_WBS_AS_MeterValve_Switch / 4) * i) && Alt_Pressure == WBS_Node_WBS_AS_MeterValve_Switch;
    //@ ensures (\forall int i; 0 <= i && i < 5; Nor_Pressure == \old(WBS_Node_WBS_SelectorValve_Switch / 4) * i) && Nor_Pressure == WBS_Node_WBS_SelectorValve_Switch;
    public void update(int PedalPos, boolean AutoBrake, boolean Skid) {
        int WBS_Node_WBS_AS_MeterValve_Switch;
        int WBS_Node_WBS_AccumulatorValve_Switch;
        int WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch;
        boolean WBS_Node_WBS_BSCU_Command_Is_Normal_Relational_Operator;
        int WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1;
        int WBS_Node_WBS_BSCU_Command_Switch;
        boolean WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6;
        int WBS_Node_WBS_BSCU_SystemModeSelCmd_Unit_Delay;
        int WBS_Node_WBS_BSCU_Switch2;
        int WBS_Node_WBS_BSCU_Switch3;
        int WBS_Node_WBS_BSCU_Unit_Delay1;
        int WBS_Node_WBS_Green_Pump_IsolationValve_Switch;
        int WBS_Node_WBS_SelectorValve_Switch;
        int WBS_Node_WBS_SelectorValve_Switch1;
        int WBS_Node_WBS_Unit_Delay2;

        WBS_Node_WBS_Unit_Delay2 = WBS_Node_WBS_rlt_PRE2;
        WBS_Node_WBS_BSCU_Unit_Delay1 = WBS_Node_WBS_BSCU_rlt_PRE1;
        WBS_Node_WBS_BSCU_SystemModeSelCmd_Unit_Delay = WBS_Node_WBS_BSCU_SystemModeSelCmd_rlt_PRE;

        WBS_Node_WBS_BSCU_Command_Is_Normal_Relational_Operator = (WBS_Node_WBS_BSCU_SystemModeSelCmd_Unit_Delay == 0);

        if (PedalPos == 0) {
            WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 = 0;
        } else if (PedalPos == 1) {
            WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 = 1;
        } else if (PedalPos == 2) {
            WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 = 2;
        } else if (PedalPos == 3) {
            WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 = 3;
        } else if (PedalPos == 4) {
            WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 = 4;
        } else {
            WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 = 0;
        }

        if (AutoBrake && WBS_Node_WBS_BSCU_Command_Is_Normal_Relational_Operator) {
            WBS_Node_WBS_BSCU_Command_Switch = 1;
        } else {
            WBS_Node_WBS_BSCU_Command_Switch = 0;
        }

        WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6 = ((!WBS_Node_WBS_BSCU_Unit_Delay1 == 0) && (WBS_Node_WBS_Unit_Delay2 <= 0) && WBS_Node_WBS_BSCU_Command_Is_Normal_Relational_Operator) || (!WBS_Node_WBS_BSCU_Command_Is_Normal_Relational_Operator);

        if (WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6) {
            WBS_Node_WBS_BSCU_Switch3 = Skid ? 0 : 4;
        } else {
            WBS_Node_WBS_BSCU_Switch3 = 4;
        }

        WBS_Node_WBS_Green_Pump_IsolationValve_Switch = WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6 ? 0 : 5;

        WBS_Node_WBS_SelectorValve_Switch1 = WBS_Node_WBS_Green_Pump_IsolationValve_Switch >= 1 ? 0 : 5;

        WBS_Node_WBS_AccumulatorValve_Switch = !WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6 ? 0 : (WBS_Node_WBS_SelectorValve_Switch1 >= 1 ? WBS_Node_WBS_SelectorValve_Switch1 : 5);

        if (WBS_Node_WBS_BSCU_Switch3 == 0) {
            WBS_Node_WBS_AS_MeterValve_Switch = 0;
        } else if (WBS_Node_WBS_BSCU_Switch3 == 1) {
            WBS_Node_WBS_AS_MeterValve_Switch = WBS_Node_WBS_AccumulatorValve_Switch / 4;
        } else if (WBS_Node_WBS_BSCU_Switch3 == 2) {
            WBS_Node_WBS_AS_MeterValve_Switch = WBS_Node_WBS_AccumulatorValve_Switch / 2;
        } else if (WBS_Node_WBS_BSCU_Switch3 == 3) {
            WBS_Node_WBS_AS_MeterValve_Switch = (WBS_Node_WBS_AccumulatorValve_Switch / 4) * 3;
        } else if (WBS_Node_WBS_BSCU_Switch3 == 4) {
            WBS_Node_WBS_AS_MeterValve_Switch = WBS_Node_WBS_AccumulatorValve_Switch;
        } else {
            WBS_Node_WBS_AS_MeterValve_Switch = 0;
        }

        WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch = Skid ? 0 : WBS_Node_WBS_BSCU_Command_Switch + WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1;

        Sys_Mode = WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6 ? 1 : 0;

        WBS_Node_WBS_BSCU_Switch2 = WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6 ? 0 : (WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch >= 0 && WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch < 1 ? 0 : (WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch >= 1 && WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch < 2 ? 1 : (WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch >= 2 && WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch < 3 ? 2 : (WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch >= 3 && WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch < 4 ? 3 : 4))));

        WBS_Node_WBS_SelectorValve_Switch = WBS_Node_WBS_Green_Pump_IsolationValve_Switch >= 1 ? WBS_Node_WBS_Green_Pump_IsolationValve_Switch : 0;

        Nor_Pressure = WBS_Node_WBS_BSCU_Switch2 == 0 ? 0 : (WBS_Node_WBS_BSCU_Switch2 == 1 ? WBS_Node_WBS_SelectorValve_Switch / 4 : (WBS_Node_WBS_BSCU_Switch2 == 2 ? WBS_Node_WBS_SelectorValve_Switch / 2 : (WBS_Node_WBS_BSCU_Switch2 == 3 ? (WBS_Node_WBS_SelectorValve_Switch / 4) * 3 : (WBS_Node_WBS_BSCU_Switch2 == 4 ? WBS_Node_WBS_SelectorValve_Switch : 0))));

        Alt_Pressure = WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 == 0 ? 0 : (WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 == 1 ? WBS_Node_WBS_AS_MeterValve_Switch / 4 : (WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 == 2 ? WBS_Node_WBS_AS_MeterValve_Switch / 2 : (WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 == 3 ? (WBS_Node_WBS_AS_MeterValve_Switch / 4) * 3 : (WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 == 4 ? WBS_Node_WBS_AS_MeterValve_Switch : 0))));

        WBS_Node_WBS_rlt_PRE2 = Nor_Pressure;
        WBS_Node_WBS_BSCU_rlt_PRE1 = WBS_Node_WBS_BSCU_Switch2;
        WBS_Node_WBS_BSCU_SystemModeSelCmd_rlt_PRE = Sys_Mode;
    }
}
/home/max/Documents/JMLGPT/tmp/WBS.java:11: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures WBS_Node_WBS_BSCU_SystemModeSelCmd_rlt_PRE == 0 && WBS_Node_WBS_BSCU_rlt_PRE1 == 0 && WBS_Node_WBS_rlt_PRE2 == 100 && Nor_Pressure == 0 && Alt_Pressure == 0 && Sys_Mode == 0;
                ^
/home/max/Documents/JMLGPT/tmp/WBS.java:11: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures WBS_Node_WBS_BSCU_SystemModeSelCmd_rlt_PRE == 0 && WBS_Node_WBS_BSCU_rlt_PRE1 == 0 && WBS_Node_WBS_rlt_PRE2 == 100 && Nor_Pressure == 0 && Alt_Pressure == 0 && Sys_Mode == 0;
                                                                   ^
/home/max/Documents/JMLGPT/tmp/WBS.java:11: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures WBS_Node_WBS_BSCU_SystemModeSelCmd_rlt_PRE == 0 && WBS_Node_WBS_BSCU_rlt_PRE1 == 0 && WBS_Node_WBS_rlt_PRE2 == 100 && Nor_Pressure == 0 && Alt_Pressure == 0 && Sys_Mode == 0;
                                                                                                      ^
/home/max/Documents/JMLGPT/tmp/WBS.java:22: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures Nor_Pressure == \old(WBS_Node_WBS_rlt_PRE2) && WBS_Node_WBS_rlt_PRE2 == Nor_Pressure;
                                     ^
/home/max/Documents/JMLGPT/tmp/WBS.java:22: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures Nor_Pressure == \old(WBS_Node_WBS_rlt_PRE2) && WBS_Node_WBS_rlt_PRE2 == Nor_Pressure;
                                                               ^
/home/max/Documents/JMLGPT/tmp/WBS.java:23: error: cannot find symbol
    //@ ensures Sys_Mode == 1 <==> WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6;
                                   ^
  symbol:   variable WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6
  location: class WBS
/home/max/Documents/JMLGPT/tmp/WBS.java:24: error: cannot find symbol
    //@ ensures Sys_Mode == 0 <==> !WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6;
                                    ^
  symbol:   variable WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6
  location: class WBS
/home/max/Documents/JMLGPT/tmp/WBS.java:25: error: cannot find symbol
    //@ ensures (\forall int i; 0 <= i && i < 5; Alt_Pressure == \old(WBS_Node_WBS_AS_MeterValve_Switch / 4) * i) && Alt_Pressure == WBS_Node_WBS_AS_MeterValve_Switch;
                                                                      ^
  symbol:   variable WBS_Node_WBS_AS_MeterValve_Switch
  location: class WBS
/home/max/Documents/JMLGPT/tmp/WBS.java:25: error: cannot find symbol
    //@ ensures (\forall int i; 0 <= i && i < 5; Alt_Pressure == \old(WBS_Node_WBS_AS_MeterValve_Switch / 4) * i) && Alt_Pressure == WBS_Node_WBS_AS_MeterValve_Switch;
                                                                                                                                     ^
  symbol:   variable WBS_Node_WBS_AS_MeterValve_Switch
  location: class WBS
/home/max/Documents/JMLGPT/tmp/WBS.java:26: error: cannot find symbol
    //@ ensures (\forall int i; 0 <= i && i < 5; Nor_Pressure == \old(WBS_Node_WBS_SelectorValve_Switch / 4) * i) && Nor_Pressure == WBS_Node_WBS_SelectorValve_Switch;
                                                                      ^
  symbol:   variable WBS_Node_WBS_SelectorValve_Switch
  location: class WBS
/home/max/Documents/JMLGPT/tmp/WBS.java:26: error: cannot find symbol
    //@ ensures (\forall int i; 0 <= i && i < 5; Nor_Pressure == \old(WBS_Node_WBS_SelectorValve_Switch / 4) * i) && Nor_Pressure == WBS_Node_WBS_SelectorValve_Switch;
                                                                                                                                     ^
  symbol:   variable WBS_Node_WBS_SelectorValve_Switch
  location: class WBS
/home/max/Documents/JMLGPT/tmp/WBS.java:70: error: bad operand type int for unary operator '!'
        WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6 = ((!WBS_Node_WBS_BSCU_Unit_Delay1 == 0) && (WBS_Node_WBS_Unit_Delay2 <= 0) && WBS_Node_WBS_BSCU_Command_Is_Normal_Relational_Operator) || (!WBS_Node_WBS_BSCU_Command_Is_Normal_Relational_Operator);
                                                                 ^
12 errors

public class WBS {

    private /*@ spec_public @*/ int WBS_Node_WBS_BSCU_SystemModeSelCmd_rlt_PRE;
    private /*@ spec_public @*/ int WBS_Node_WBS_BSCU_rlt_PRE1;
    private /*@ spec_public @*/ int WBS_Node_WBS_rlt_PRE2;

    public int Nor_Pressure;
    public int Alt_Pressure;
    public int Sys_Mode;

    //@ ensures WBS_Node_WBS_BSCU_SystemModeSelCmd_rlt_PRE == 0 && WBS_Node_WBS_BSCU_rlt_PRE1 == 0 && WBS_Node_WBS_rlt_PRE2 == 100 && Nor_Pressure == 0 && Alt_Pressure == 0 && Sys_Mode == 0;
    public WBS() {
        WBS_Node_WBS_BSCU_SystemModeSelCmd_rlt_PRE = 0;
        WBS_Node_WBS_BSCU_rlt_PRE1 = 0;
        WBS_Node_WBS_rlt_PRE2 = 100;
        Nor_Pressure = 0;
        Alt_Pressure = 0;
        Sys_Mode = 0;
    }

    //@ requires 0 <= PedalPos && PedalPos <= 4;
    //@ ensures Nor_Pressure == \old(WBS_Node_WBS_rlt_PRE2) && WBS_Node_WBS_rlt_PRE2 == Nor_Pressure;
    //@ ensures Sys_Mode == 1 <==> WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6;
    //@ ensures Sys_Mode == 0 <==> !WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6;
    //@ ensures (\forall int i; 0 <= i && i < 5; Alt_Pressure == \old(WBS_Node_WBS_AS_MeterValve_Switch / 4) * i) && Alt_Pressure == WBS_Node_WBS_AS_MeterValve_Switch;
    //@ ensures (\forall int i; 0 <= i && i < 5; Nor_Pressure == \old(WBS_Node_WBS_SelectorValve_Switch / 4) * i) && Nor_Pressure == WBS_Node_WBS_SelectorValve_Switch;
    public void update(int PedalPos, boolean AutoBrake, boolean Skid) {
        int WBS_Node_WBS_AS_MeterValve_Switch;
        int WBS_Node_WBS_AccumulatorValve_Switch;
        int WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch;
        boolean WBS_Node_WBS_BSCU_Command_Is_Normal_Relational_Operator;
        int WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1;
        int WBS_Node_WBS_BSCU_Command_Switch;
        boolean WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6;
        int WBS_Node_WBS_BSCU_SystemModeSelCmd_Unit_Delay;
        int WBS_Node_WBS_BSCU_Switch2;
        int WBS_Node_WBS_BSCU_Switch3;
        int WBS_Node_WBS_BSCU_Unit_Delay1;
        int WBS_Node_WBS_Green_Pump_IsolationValve_Switch;
        int WBS_Node_WBS_SelectorValve_Switch;
        int WBS_Node_WBS_SelectorValve_Switch1;
        int WBS_Node_WBS_Unit_Delay2;

        WBS_Node_WBS_Unit_Delay2 = WBS_Node_WBS_rlt_PRE2;
        WBS_Node_WBS_BSCU_Unit_Delay1 = WBS_Node_WBS_BSCU_rlt_PRE1;
        WBS_Node_WBS_BSCU_SystemModeSelCmd_Unit_Delay = WBS_Node_WBS_BSCU_SystemModeSelCmd_rlt_PRE;

        WBS_Node_WBS_BSCU_Command_Is_Normal_Relational_Operator = (WBS_Node_WBS_BSCU_SystemModeSelCmd_Unit_Delay == 0);

        if (PedalPos == 0) {
            WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 = 0;
        } else if (PedalPos == 1) {
            WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 = 1;
        } else if (PedalPos == 2) {
            WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 = 2;
        } else if (PedalPos == 3) {
            WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 = 3;
        } else if (PedalPos == 4) {
            WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 = 4;
        } else {
            WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 = 0;
        }

        if (AutoBrake && WBS_Node_WBS_BSCU_Command_Is_Normal_Relational_Operator) {
            WBS_Node_WBS_BSCU_Command_Switch = 1;
        } else {
            WBS_Node_WBS_BSCU_Command_Switch = 0;
        }

        WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6 = ((!WBS_Node_WBS_BSCU_Unit_Delay1 == 0) && (WBS_Node_WBS_Unit_Delay2 <= 0) && WBS_Node_WBS_BSCU_Command_Is_Normal_Relational_Operator) || (!WBS_Node_WBS_BSCU_Command_Is_Normal_Relational_Operator);

        if (WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6) {
            WBS_Node_WBS_BSCU_Switch3 = Skid ? 0 : 4;
        } else {
            WBS_Node_WBS_BSCU_Switch3 = 4;
        }

        WBS_Node_WBS_Green_Pump_IsolationValve_Switch = WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6 ? 0 : 5;

        WBS_Node_WBS_SelectorValve_Switch1 = WBS_Node_WBS_Green_Pump_IsolationValve_Switch >= 1 ? 0 : 5;

        WBS_Node_WBS_AccumulatorValve_Switch = !WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6 ? 0 : (WBS_Node_WBS_SelectorValve_Switch1 >= 1 ? WBS_Node_WBS_SelectorValve_Switch1 : 5);

        if (WBS_Node_WBS_BSCU_Switch3 == 0) {
            WBS_Node_WBS_AS_MeterValve_Switch = 0;
        } else if (WBS_Node_WBS_BSCU_Switch3 == 1) {
            WBS_Node_WBS_AS_MeterValve_Switch = WBS_Node_WBS_AccumulatorValve_Switch / 4;
        } else if (WBS_Node_WBS_BSCU_Switch3 == 2) {
            WBS_Node_WBS_AS_MeterValve_Switch = WBS_Node_WBS_AccumulatorValve_Switch / 2;
        } else if (WBS_Node_WBS_BSCU_Switch3 == 3) {
            WBS_Node_WBS_AS_MeterValve_Switch = (WBS_Node_WBS_AccumulatorValve_Switch / 4) * 3;
        } else if (WBS_Node_WBS_BSCU_Switch3 == 4) {
            WBS_Node_WBS_AS_MeterValve_Switch = WBS_Node_WBS_AccumulatorValve_Switch;
        } else {
            WBS_Node_WBS_AS_MeterValve_Switch = 0;
        }

        WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch = Skid ? 0 : WBS_Node_WBS_BSCU_Command_Switch + WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1;

        Sys_Mode = WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6 ? 1 : 0;

        WBS_Node_WBS_BSCU_Switch2 = WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6 ? 0 : (WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch >= 0 && WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch < 1 ? 0 : (WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch >= 1 && WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch < 2 ? 1 : (WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch >= 2 && WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch < 3 ? 2 : (WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch >= 3 && WBS_Node_WBS_BSCU_Command_AntiSkidCommand_Normal_Switch < 4 ? 3 : 4))));

        WBS_Node_WBS_SelectorValve_Switch = WBS_Node_WBS_Green_Pump_IsolationValve_Switch >= 1 ? WBS_Node_WBS_Green_Pump_IsolationValve_Switch : 0;

        Nor_Pressure = WBS_Node_WBS_BSCU_Switch2 == 0 ? 0 : (WBS_Node_WBS_BSCU_Switch2 == 1 ? WBS_Node_WBS_SelectorValve_Switch / 4 : (WBS_Node_WBS_BSCU_Switch2 == 2 ? WBS_Node_WBS_SelectorValve_Switch / 2 : (WBS_Node_WBS_BSCU_Switch2 == 3 ? (WBS_Node_WBS_SelectorValve_Switch / 4) * 3 : (WBS_Node_WBS_BSCU_Switch2 == 4 ? WBS_Node_WBS_SelectorValve_Switch : 0))));

        Alt_Pressure = WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 == 0 ? 0 : (WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 == 1 ? WBS_Node_WBS_AS_MeterValve_Switch / 4 : (WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 == 2 ? WBS_Node_WBS_AS_MeterValve_Switch / 2 : (WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 == 3 ? (WBS_Node_WBS_AS_MeterValve_Switch / 4) * 3 : (WBS_Node_WBS_BSCU_Command_PedalCommand_Switch1 == 4 ? WBS_Node_WBS_AS_MeterValve_Switch : 0))));

        WBS_Node_WBS_rlt_PRE2 = Nor_Pressure;
        WBS_Node_WBS_BSCU_rlt_PRE1 = WBS_Node_WBS_BSCU_Switch2;
        WBS_Node_WBS_BSCU_SystemModeSelCmd_rlt_PRE = Sys_Mode;
    }
}
/home/max/Documents/JMLGPT/tmp/WBS.java:23: error: cannot find symbol
    //@ ensures Sys_Mode == 1 <==> WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6;
                                   ^
  symbol:   variable WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6
  location: class WBS
/home/max/Documents/JMLGPT/tmp/WBS.java:24: error: cannot find symbol
    //@ ensures Sys_Mode == 0 <==> !WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6;
                                    ^
  symbol:   variable WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6
  location: class WBS
/home/max/Documents/JMLGPT/tmp/WBS.java:25: error: cannot find symbol
    //@ ensures (\forall int i; 0 <= i && i < 5; Alt_Pressure == \old(WBS_Node_WBS_AS_MeterValve_Switch / 4) * i) && Alt_Pressure == WBS_Node_WBS_AS_MeterValve_Switch;
                                                                      ^
  symbol:   variable WBS_Node_WBS_AS_MeterValve_Switch
  location: class WBS
/home/max/Documents/JMLGPT/tmp/WBS.java:25: error: cannot find symbol
    //@ ensures (\forall int i; 0 <= i && i < 5; Alt_Pressure == \old(WBS_Node_WBS_AS_MeterValve_Switch / 4) * i) && Alt_Pressure == WBS_Node_WBS_AS_MeterValve_Switch;
                                                                                                                                     ^
  symbol:   variable WBS_Node_WBS_AS_MeterValve_Switch
  location: class WBS
/home/max/Documents/JMLGPT/tmp/WBS.java:26: error: cannot find symbol
    //@ ensures (\forall int i; 0 <= i && i < 5; Nor_Pressure == \old(WBS_Node_WBS_SelectorValve_Switch / 4) * i) && Nor_Pressure == WBS_Node_WBS_SelectorValve_Switch;
                                                                      ^
  symbol:   variable WBS_Node_WBS_SelectorValve_Switch
  location: class WBS
/home/max/Documents/JMLGPT/tmp/WBS.java:26: error: cannot find symbol
    //@ ensures (\forall int i; 0 <= i && i < 5; Nor_Pressure == \old(WBS_Node_WBS_SelectorValve_Switch / 4) * i) && Nor_Pressure == WBS_Node_WBS_SelectorValve_Switch;
                                                                                                                                     ^
  symbol:   variable WBS_Node_WBS_SelectorValve_Switch
  location: class WBS
/home/max/Documents/JMLGPT/tmp/WBS.java:70: error: bad operand type int for unary operator '!'
        WBS_Node_WBS_BSCU_SystemModeSelCmd_Logical_Operator6 = ((!WBS_Node_WBS_BSCU_Unit_Delay1 == 0) && (WBS_Node_WBS_Unit_Delay2 <= 0) && WBS_Node_WBS_BSCU_Command_Is_Normal_Relational_Operator) || (!WBS_Node_WBS_BSCU_Command_Is_Normal_Relational_Operator);
                                                                 ^
7 errors

