public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 188743680 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18188.log

public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 73400320 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18221.log

public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 88080384 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18253.log

public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 148897792 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18285.log

public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 146800640 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18318.log

public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 192937984 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18350.log

public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 274726912 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18382.log

public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 99614720 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18414.log

public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 203423744 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18446.log

public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 255852544 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18478.log

