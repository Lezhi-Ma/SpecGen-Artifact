import java.util.Random;

public class boolean2 {
    //@ ensures \result == (!b);
    public static boolean f(boolean b) {
        return !b;
    }

    //@ ensures \result == (f(b));
    public static boolean fun() {
        boolean b = new Random().nextBoolean();
        boolean result = f(b);
        return result == !b;
    }
}
/home/max/Documents/JMLGPT/tmp/boolean2.java:9: error: cannot find symbol
    //@ ensures \result == (f(b));
                              ^
  symbol:   variable b
  location: class boolean2
1 error

import java.util.Random;

public class boolean2 {
    //@ requires true;
    //@ ensures \result == (!b);
    public static boolean f(boolean b) {
        return !b;
    }

    //@ ensures \result == (f(b));
    public static boolean fun() {
        boolean b = new Random().nextBoolean();
        boolean result = f(b);
        return result == !b;
    }
}
/home/max/Documents/JMLGPT/tmp/boolean2.java:10: error: cannot find symbol
    //@ ensures \result == (f(b));
                              ^
  symbol:   variable b
  location: class boolean2
1 error

import java.util.Random;

public class boolean2 {
    //@ requires true;
    //@ ensures \result == (!b);
    public static boolean f(boolean b) {
        return !b;
    }

    //@ ensures \result == (f(new Random().nextBoolean()));
    public static boolean fun() {
        boolean b = new Random().nextBoolean();
        boolean result = f(b);
        return result == !b;
    }
}
/home/max/Documents/JMLGPT/tmp/boolean2.java:10: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == (f(new Random().nextBoolean()));
                              ^
1 error

import java.util.Random;

public class boolean2 {
    //@ requires true;
    //@ ensures \result == (!b);
    public static boolean f(boolean b) {
        return !b;
    }

    //@ ensures \result == (f(true) || f(false));
    public static boolean fun() {
        boolean b = new Random().nextBoolean();
        boolean result = f(b);
        return result == !b;
    }
}

