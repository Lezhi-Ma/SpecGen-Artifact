public class MinePump {

    boolean pumpRunning = false;

    boolean systemActive = true;

    Environment env;

    //@ requires env != null;
    public MinePump(Environment env) {
        super();
        this.env = env;
    }

    //@ ensures pumpRunning ==> env.lowerWaterLevel();
    //@ ensures systemActive ==> processEnvironment();
    public void timeShift() {
        if (pumpRunning) env.lowerWaterLevel();
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
    //@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures \result == pumpRunning;
    public boolean isPumpRunning() {
        return pumpRunning;
    }

    //@ ensures !pumpRunning;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == env.isMethaneLevelCritical();
    public boolean isMethaneAlarm() {
        return env.isMethaneLevelCritical();
    }

    //@ ensures \result != null;
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result == systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }

}
/home/max/Documents/JMLGPT/tmp/MinePump.java:7: error: cannot find symbol
    Environment env;
    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:10: error: cannot find symbol
    public MinePump(Environment env) {
                    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:15: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures pumpRunning ==> env.lowerWaterLevel();
                ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:15: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures pumpRunning ==> env.lowerWaterLevel();
                                ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures systemActive ==> processEnvironment();
                ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: incompatible types: void cannot be converted to boolean
    //@ ensures systemActive ==> processEnvironment();
                                                   ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:24: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
                ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:24: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
                                                     ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
                                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: incompatible types: void cannot be converted to boolean
    //@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
                                                                  ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:34: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures pumpRunning;
                ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:39: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == pumpRunning;
                           ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:44: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures !pumpRunning;
                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:49: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == env.isMethaneLevelCritical();
                           ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:65: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures !pumpRunning;
                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:74: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures !pumpRunning;
                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:80: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == systemActive;
                           ^
18 errors

public class MinePump {

	private /*@ spec_public @*/ boolean pumpRunning = false;

	private /*@ spec_public @*/ boolean systemActive = true;

	private /*@ spec_public @*/ Environment env;

	//@ requires env != null;
	public MinePump(Environment env) {
		super();
		this.env = env;
	}

	//@ ensures pumpRunning ==> env.lowerWaterLevel();
	//@ ensures systemActive ==> processEnvironment();
	public void timeShift() {
		if (pumpRunning) env.lowerWaterLevel();
		if (systemActive) processEnvironment();
	}

	private void processEnvironment__wrappee__base() {}

	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	public void processEnvironment() {
		if (pumpRunning && isMethaneAlarm()) {
			deactivatePump();
		} else {
			processEnvironment__wrappee__base();
		}
	}

	//@ ensures pumpRunning;
	public void activatePump() {
		pumpRunning = true;
	}

	//@ ensures \result == pumpRunning;
	public boolean isPumpRunning() {
		return pumpRunning;
	}

	//@ ensures !pumpRunning;
	public void deactivatePump() {
		pumpRunning = false;
	}

	//@ ensures \result == env.isMethaneLevelCritical();
	public boolean isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	//@ ensures \result != null;
	@Override
	public String toString() {
		return "Pump(System:"
				+ (systemActive ? "On" : "Off")
				+ ",Pump:"
				+ (pumpRunning ? "On" : "Off")
				+ ") "
				+ env.toString();
	}

	//@ ensures !pumpRunning;
	public void stopSystem() {
		if (pumpRunning) {
			deactivatePump();
		}
		assert !pumpRunning;
		systemActive = false;
	}

	//@ ensures !pumpRunning;
	public void startSystem() {
		assert !pumpRunning;
		systemActive = true;
	}

	//@ ensures \result == systemActive;
	public boolean isSystemActive() {
		return systemActive;
	}

}
/home/max/Documents/JMLGPT/tmp/MinePump.java:7: error: cannot find symbol
	private /*@ spec_public @*/ Environment env;
	                            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:10: error: cannot find symbol
	public MinePump(Environment env) {
	                ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: incompatible types: void cannot be converted to boolean
	//@ ensures systemActive ==> processEnvironment();
	                                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: incompatible types: void cannot be converted to boolean
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                                                              ^
5 errors

public class MinePump {

	private /*@ spec_public @*/ boolean pumpRunning = false;

	private /*@ spec_public @*/ boolean systemActive = true;

	private /*@ spec_public @*/ Environment env;

	//@ requires env != null;
	public MinePump(/*@ non_null @*/ Environment env) {
		super();
		this.env = env;
	}

	//@ ensures pumpRunning ==> env.lowerWaterLevel();
	//@ ensures systemActive ==> processEnvironment();
	public void timeShift() {
		if (pumpRunning) env.lowerWaterLevel();
		if (systemActive) processEnvironment();
	}

	private void processEnvironment__wrappee__base() {}

	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	public void processEnvironment() {
		if (pumpRunning && isMethaneAlarm()) {
			deactivatePump();
		} else {
			processEnvironment__wrappee__base();
		}
	}

	//@ ensures pumpRunning;
	public void activatePump() {
		pumpRunning = true;
	}

	//@ ensures \result == pumpRunning;
	public boolean isPumpRunning() {
		return pumpRunning;
	}

	//@ ensures !pumpRunning;
	public void deactivatePump() {
		pumpRunning = false;
	}

	//@ ensures \result == env.isMethaneLevelCritical();
	public boolean isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	//@ ensures \result != null;
	@Override
	public String toString() {
		return "Pump(System:"
				+ (systemActive ? "On" : "Off")
				+ ",Pump:"
				+ (pumpRunning ? "On" : "Off")
				+ ") "
				+ env.toString();
	}

	//@ ensures !pumpRunning;
	public void stopSystem() {
		if (pumpRunning) {
			deactivatePump();
		}
		assert !pumpRunning;
		systemActive = false;
	}

	//@ ensures !pumpRunning;
	public void startSystem() {
		assert !pumpRunning;
		systemActive = true;
	}

	//@ ensures \result == systemActive;
	public boolean isSystemActive() {
		return systemActive;
	}

}
/home/max/Documents/JMLGPT/tmp/MinePump.java:7: error: cannot find symbol
	private /*@ spec_public @*/ Environment env;
	                            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:10: error: cannot find symbol
	public MinePump(/*@ non_null @*/ Environment env) {
	                                 ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: incompatible types: void cannot be converted to boolean
	//@ ensures systemActive ==> processEnvironment();
	                                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: incompatible types: void cannot be converted to boolean
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                                                              ^
5 errors

public class MinePump {

	private /*@ spec_public @*/ boolean pumpRunning = false;

	private /*@ spec_public @*/ boolean systemActive = true;

	private /*@ spec_public @*/ Environment env;

	//@ requires env != null;
	public MinePump(/*@ non_null @*/ Environment env) {
		super();
		this.env = env;
	}

	//@ ensures pumpRunning ==> env.lowerWaterLevel();
	//@ ensures systemActive ==> processEnvironment();
	public void timeShift() {
		if (pumpRunning) env.lowerWaterLevel();
		if (systemActive) processEnvironment();
	}

	private void processEnvironment__wrappee__base() {}

	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	public void processEnvironment() {
		if (pumpRunning && isMethaneAlarm()) {
			deactivatePump();
		} else {
			processEnvironment__wrappee__base();
		}
	}

	//@ ensures pumpRunning;
	public void activatePump() {
		pumpRunning = true;
	}

	//@ ensures \result == pumpRunning;
	public boolean isPumpRunning() {
		return pumpRunning;
	}

	//@ ensures !pumpRunning;
	public void deactivatePump() {
		pumpRunning = false;
	}

	//@ ensures \result == env.isMethaneLevelCritical();
	public boolean isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	//@ ensures \result != null;
	@Override
	public String toString() {
		return "Pump(System:"
				+ (systemActive ? "On" : "Off")
				+ ",Pump:"
				+ (pumpRunning ? "On" : "Off")
				+ ") "
				+ env.toString();
	}

	//@ ensures !pumpRunning;
	public void stopSystem() {
		if (pumpRunning) {
			deactivatePump();
		}
		assert !pumpRunning;
		systemActive = false;
	}

	//@ ensures !pumpRunning;
	public void startSystem() {
		assert !pumpRunning;
		systemActive = true;
	}

	//@ ensures \result == systemActive;
	public boolean isSystemActive() {
		return systemActive;
	}

}
/home/max/Documents/JMLGPT/tmp/MinePump.java:7: error: cannot find symbol
	private /*@ spec_public @*/ Environment env;
	                            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:10: error: cannot find symbol
	public MinePump(/*@ non_null @*/ Environment env) {
	                                 ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: incompatible types: void cannot be converted to boolean
	//@ ensures systemActive ==> processEnvironment();
	                                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: incompatible types: void cannot be converted to boolean
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                                                              ^
5 errors

public class MinePump {

	private /*@ spec_public @*/ boolean pumpRunning = false;

	private /*@ spec_public @*/ boolean systemActive = true;

	private /*@ spec_public @*/ Environment env;

	//@ requires env != null;
	public MinePump(/*@ non_null @*/ Environment env) {
		super();
		this.env = env;
	}

	//@ ensures pumpRunning ==> env.lowerWaterLevel();
	//@ ensures systemActive ==> processEnvironment();
	public void timeShift() {
		if (pumpRunning) env.lowerWaterLevel();
		if (systemActive) processEnvironment();
	}

	private void processEnvironment__wrappee__base() {}

	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	public void processEnvironment() {
		if (pumpRunning && isMethaneAlarm()) {
			deactivatePump();
		} else {
			processEnvironment__wrappee__base();
		}
	}

	//@ ensures pumpRunning;
	public void activatePump() {
		pumpRunning = true;
	}

	//@ ensures \result == pumpRunning;
	public boolean isPumpRunning() {
		return pumpRunning;
	}

	//@ ensures !pumpRunning;
	public void deactivatePump() {
		pumpRunning = false;
	}

	//@ ensures \result == env.isMethaneLevelCritical();
	public boolean isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	//@ ensures \result != null;
	@Override
	public String toString() {
		return "Pump(System:"
				+ (systemActive ? "On" : "Off")
				+ ",Pump:"
				+ (pumpRunning ? "On" : "Off")
				+ ") "
				+ env.toString();
	}

	//@ ensures !pumpRunning;
	public void stopSystem() {
		if (pumpRunning) {
			deactivatePump();
		}
		assert !pumpRunning;
		systemActive = false;
	}

	//@ ensures !pumpRunning;
	public void startSystem() {
		assert !pumpRunning;
		systemActive = true;
	}

	//@ ensures \result == systemActive;
	public boolean isSystemActive() {
		return systemActive;
	}

}
/home/max/Documents/JMLGPT/tmp/MinePump.java:7: error: cannot find symbol
	private /*@ spec_public @*/ Environment env;
	                            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:10: error: cannot find symbol
	public MinePump(/*@ non_null @*/ Environment env) {
	                                 ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: incompatible types: void cannot be converted to boolean
	//@ ensures systemActive ==> processEnvironment();
	                                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: incompatible types: void cannot be converted to boolean
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                                                              ^
5 errors

public class MinePump {

	private /*@ spec_public @*/ boolean pumpRunning = false;

	private /*@ spec_public @*/ boolean systemActive = true;

	private /*@ spec_public @*/ Environment env;

	//@ requires env != null;
	public MinePump(/*@ non_null @*/ Environment env) {
		super();
		this.env = env;
	}

	//@ ensures pumpRunning ==> env.lowerWaterLevel();
	//@ ensures systemActive ==> processEnvironment();
	public void timeShift() {
		if (pumpRunning) env.lowerWaterLevel();
		if (systemActive) processEnvironment();
	}

	private void processEnvironment__wrappee__base() {}

	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	public void processEnvironment() {
		if (pumpRunning && isMethaneAlarm()) {
			deactivatePump();
		} else {
			processEnvironment__wrappee__base();
		}
	}

	//@ ensures pumpRunning;
	public void activatePump() {
		pumpRunning = true;
	}

	//@ ensures \result == pumpRunning;
	public boolean isPumpRunning() {
		return pumpRunning;
	}

	//@ ensures !pumpRunning;
	public void deactivatePump() {
		pumpRunning = false;
	}

	//@ ensures \result == env.isMethaneLevelCritical();
	public boolean isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	//@ ensures \result != null;
	@Override
	public String toString() {
		return "Pump(System:"
				+ (systemActive ? "On" : "Off")
				+ ",Pump:"
				+ (pumpRunning ? "On" : "Off")
				+ ") "
				+ env.toString();
	}

	//@ ensures !pumpRunning;
	public void stopSystem() {
		if (pumpRunning) {
			deactivatePump();
		}
		assert !pumpRunning;
		systemActive = false;
	}

	//@ ensures !pumpRunning;
	public void startSystem() {
		assert !pumpRunning;
		systemActive = true;
	}

	//@ ensures \result == systemActive;
	public boolean isSystemActive() {
		return systemActive;
	}

}
/home/max/Documents/JMLGPT/tmp/MinePump.java:7: error: cannot find symbol
	private /*@ spec_public @*/ Environment env;
	                            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:10: error: cannot find symbol
	public MinePump(/*@ non_null @*/ Environment env) {
	                                 ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: incompatible types: void cannot be converted to boolean
	//@ ensures systemActive ==> processEnvironment();
	                                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: incompatible types: void cannot be converted to boolean
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                                                              ^
5 errors

import org.jmlspecs.models.JMLObjectHelper;

public class MinePump {

	private /*@ spec_public @*/ boolean pumpRunning = false;

	private /*@ spec_public @*/ boolean systemActive = true;

	private /*@ spec_public @*/ Environment env;

	//@ requires env != null;
	public MinePump(/*@ non_null @*/ Environment env) {
		super();
		this.env = env;
	}

	//@ ensures pumpRunning ==> env.lowerWaterLevel();
	//@ ensures systemActive ==> processEnvironment();
	public void timeShift() {
		if (pumpRunning) env.lowerWaterLevel();
		if (systemActive) processEnvironment();
	}

	private void processEnvironment__wrappee__base() {}

	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	public void processEnvironment() {
		if (pumpRunning && isMethaneAlarm()) {
			deactivatePump();
		} else {
			processEnvironment__wrappee__base();
		}
	}

	//@ ensures pumpRunning;
	public void activatePump() {
		pumpRunning = true;
	}

	//@ ensures \result == pumpRunning;
	public boolean isPumpRunning() {
		return pumpRunning;
	}

	//@ ensures !pumpRunning;
	public void deactivatePump() {
		pumpRunning = false;
	}

	//@ ensures \result == env.isMethaneLevelCritical();
	public boolean isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	//@ ensures \result != null;
	@Override
	public String toString() {
		return "Pump(System:"
				+ (systemActive ? "On" : "Off")
				+ ",Pump:"
				+ (pumpRunning ? "On" : "Off")
				+ ") "
				+ env.toString();
	}

	//@ ensures !pumpRunning;
	public void stopSystem() {
		if (pumpRunning) {
			deactivatePump();
		}
		assert !pumpRunning;
		systemActive = false;
	}

	//@ ensures !pumpRunning;
	public void startSystem() {
		assert !pumpRunning;
		systemActive = true;
	}

	//@ ensures \result == systemActive;
	public boolean isSystemActive() {
		return systemActive;
	}

}
/home/max/Documents/JMLGPT/tmp/MinePump.java:1: error: package org.jmlspecs.models does not exist
import org.jmlspecs.models.JMLObjectHelper;
                          ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:9: error: cannot find symbol
	private /*@ spec_public @*/ Environment env;
	                            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:12: error: cannot find symbol
	public MinePump(/*@ non_null @*/ Environment env) {
	                                 ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:18: error: incompatible types: void cannot be converted to boolean
	//@ ensures systemActive ==> processEnvironment();
	                                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:27: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:27: error: incompatible types: void cannot be converted to boolean
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                                                              ^
6 errors

import org.jmlspecs.models.JMLObjectHelper;

public class MinePump {

	private /*@ spec_public @*/ boolean pumpRunning = false;

	private /*@ spec_public @*/ boolean systemActive = true;

	private /*@ spec_public @*/ Environment env;

	//@ requires env != null;
	public MinePump(/*@ non_null @*/ Environment env) {
		super();
		this.env = env;
	}

	//@ ensures pumpRunning ==> env.lowerWaterLevel();
	//@ ensures systemActive ==> processEnvironment();
	public void timeShift() {
		if (pumpRunning) env.lowerWaterLevel();
		if (systemActive) processEnvironment();
	}

	private void processEnvironment__wrappee__base() {}

	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	public void processEnvironment() {
		if (pumpRunning && isMethaneAlarm()) {
			deactivatePump();
		} else {
			processEnvironment__wrappee__base();
		}
	}

	//@ ensures pumpRunning;
	public void activatePump() {
		pumpRunning = true;
	}

	//@ ensures \result == pumpRunning;
	public boolean isPumpRunning() {
		return pumpRunning;
	}

	//@ ensures !pumpRunning;
	public void deactivatePump() {
		pumpRunning = false;
	}

	//@ ensures \result == env.isMethaneLevelCritical();
	public boolean isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	//@ ensures \result != null;
	@Override
	public String toString() {
		return "Pump(System:"
				+ (systemActive ? "On" : "Off")
				+ ",Pump:"
				+ (pumpRunning ? "On" : "Off")
				+ ") "
				+ env.toString();
	}

	//@ ensures !pumpRunning;
	public void stopSystem() {
		if (pumpRunning) {
			deactivatePump();
		}
		assert !pumpRunning;
		systemActive = false;
	}

	//@ ensures !pumpRunning;
	public void startSystem() {
		assert !pumpRunning;
		systemActive = true;
	}

	//@ ensures \result == systemActive;
	public boolean isSystemActive() {
		return systemActive;
	}

}
/home/max/Documents/JMLGPT/tmp/MinePump.java:1: error: package org.jmlspecs.models does not exist
import org.jmlspecs.models.JMLObjectHelper;
                          ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:9: error: cannot find symbol
	private /*@ spec_public @*/ Environment env;
	                            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:12: error: cannot find symbol
	public MinePump(/*@ non_null @*/ Environment env) {
	                                 ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:18: error: incompatible types: void cannot be converted to boolean
	//@ ensures systemActive ==> processEnvironment();
	                                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:27: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:27: error: incompatible types: void cannot be converted to boolean
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                                                              ^
6 errors

import org.jmlspecs.models.JMLObjectHelper;

public class MinePump {

	private /*@ spec_public @*/ boolean pumpRunning = false;

	private /*@ spec_public @*/ boolean systemActive = true;

	private /*@ spec_public @*/ Environment env;

	//@ requires env != null;
	public MinePump(/*@ non_null @*/ Environment env) {
		super();
		this.env = env;
	}

	//@ ensures pumpRunning ==> env.lowerWaterLevel();
	//@ ensures systemActive ==> processEnvironment();
	public void timeShift() {
		if (pumpRunning) env.lowerWaterLevel();
		if (systemActive) processEnvironment();
	}

	private void processEnvironment__wrappee__base() {}

	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	public void processEnvironment() {
		if (pumpRunning && isMethaneAlarm()) {
			deactivatePump();
		} else {
			processEnvironment__wrappee__base();
		}
	}

	//@ ensures pumpRunning;
	public void activatePump() {
		pumpRunning = true;
	}

	//@ ensures \result == pumpRunning;
	public boolean isPumpRunning() {
		return pumpRunning;
	}

	//@ ensures !pumpRunning;
	public void deactivatePump() {
		pumpRunning = false;
	}

	//@ ensures \result == env.isMethaneLevelCritical();
	public boolean isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	//@ ensures \result != null;
	@Override
	public String toString() {
		return "Pump(System:"
				+ (systemActive ? "On" : "Off")
				+ ",Pump:"
				+ (pumpRunning ? "On" : "Off")
				+ ") "
				+ env.toString();
	}

	//@ ensures !pumpRunning;
	public void stopSystem() {
		if (pumpRunning) {
			deactivatePump();
		}
		assert !pumpRunning;
		systemActive = false;
	}

	//@ ensures !pumpRunning;
	public void startSystem() {
		assert !pumpRunning;
		systemActive = true;
	}

	//@ ensures \result == systemActive;
	public boolean isSystemActive() {
		return systemActive;
	}

}
/home/max/Documents/JMLGPT/tmp/MinePump.java:1: error: package org.jmlspecs.models does not exist
import org.jmlspecs.models.JMLObjectHelper;
                          ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:9: error: cannot find symbol
	private /*@ spec_public @*/ Environment env;
	                            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:12: error: cannot find symbol
	public MinePump(/*@ non_null @*/ Environment env) {
	                                 ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:18: error: incompatible types: void cannot be converted to boolean
	//@ ensures systemActive ==> processEnvironment();
	                                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:27: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:27: error: incompatible types: void cannot be converted to boolean
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                                                              ^
6 errors

import org.jmlspecs.models.JMLObjectHelper;

public class MinePump {

	private /*@ spec_public @*/ boolean pumpRunning = false;

	private /*@ spec_public @*/ boolean systemActive = true;

	private /*@ spec_public @*/ Environment env;

	//@ requires env != null;
	public MinePump(/*@ non_null @*/ Environment env) {
		super();
		this.env = env;
	}

	//@ ensures pumpRunning ==> env.lowerWaterLevel();
	//@ ensures systemActive ==> processEnvironment();
	public void timeShift() {
		if (pumpRunning) env.lowerWaterLevel();
		if (systemActive) processEnvironment();
	}

	private void processEnvironment__wrappee__base() {}

	//@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	public void processEnvironment() {
		if (pumpRunning && isMethaneAlarm()) {
			deactivatePump();
		} else {
			processEnvironment__wrappee__base();
		}
	}

	//@ ensures pumpRunning;
	public void activatePump() {
		pumpRunning = true;
	}

	//@ ensures \result == pumpRunning;
	public boolean isPumpRunning() {
		return pumpRunning;
	}

	//@ ensures !pumpRunning;
	public void deactivatePump() {
		pumpRunning = false;
	}

	//@ ensures \result == env.isMethaneLevelCritical();
	public boolean isMethaneAlarm() {
		return env.isMethaneLevelCritical();
	}

	//@ ensures \result != null;
	@Override
	public String toString() {
		return "Pump(System:"
				+ (systemActive ? "On" : "Off")
				+ ",Pump:"
				+ (pumpRunning ? "On" : "Off")
				+ ") "
				+ env.toString();
	}

	//@ ensures !pumpRunning;
	public void stopSystem() {
		if (pumpRunning) {
			deactivatePump();
		}
		assert !pumpRunning;
		systemActive = false;
	}

	//@ ensures !pumpRunning;
	public void startSystem() {
		assert !pumpRunning;
		systemActive = true;
	}

	//@ ensures \result == systemActive;
	public boolean isSystemActive() {
		return systemActive;
	}

}
/home/max/Documents/JMLGPT/tmp/MinePump.java:1: error: package org.jmlspecs.models does not exist
import org.jmlspecs.models.JMLObjectHelper;
                          ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:9: error: cannot find symbol
	private /*@ spec_public @*/ Environment env;
	                            ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:12: error: cannot find symbol
	public MinePump(/*@ non_null @*/ Environment env) {
	                                 ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:18: error: incompatible types: void cannot be converted to boolean
	//@ ensures systemActive ==> processEnvironment();
	                                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:27: error: An identifier with private visibility may not be used in a ensures clause with public visibility
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                             ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:27: error: incompatible types: void cannot be converted to boolean
	//@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
	                                                              ^
6 errors

