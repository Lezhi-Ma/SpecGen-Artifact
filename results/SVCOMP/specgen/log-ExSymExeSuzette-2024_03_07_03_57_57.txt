class Main {
	//@ requires x >= 0 && y >= 0;
	//@ ensures \result > 0 ==> \result == x || \result == y;
	//@ ensures \result <= 0 ==> \result == 0;
	public int method_a(int x, int y) {

		if (x > 10) return x;

		if (y > 10) return y;

		return 0;
	}

	//@ ensures z > 10 ==> \result == z++;
	//@ ensures !(z > 10) ==> \result == z--;
	public int method_b(int z) {

		if (z > 10) return z++;
		else return z--;
	}

	//@ requires arg >= 0 && arg <= 10;
	//@ ensures \result == false ==> method_a(arg, 0) <= 0;
	//@ ensures \result == true ==> method_a(arg, 0) > 0;
	public boolean test(int x, int y) {

		int v = method_a(x, y);

		if (v > 0) {
			return false;
		}
		return true;
	}

	//@ requires arg >= 0 && arg <= 10;
	//@ ensures \result == true || \result == false;
	public static boolean f(int arg) {

		Main ex = new Main();
		if (arg < 0 || arg > 10) return true;
		return ex.test(arg, 0);
	}
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: error: cannot find symbol
	//@ requires arg >= 0 && arg <= 10;
	             ^
  symbol:   variable arg
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: error: cannot find symbol
	//@ requires arg >= 0 && arg <= 10;
	                         ^
  symbol:   variable arg
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:23: error: cannot find symbol
	//@ ensures \result == false ==> method_a(arg, 0) <= 0;
	                                          ^
  symbol:   variable arg
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: error: cannot find symbol
	//@ ensures \result == true ==> method_a(arg, 0) > 0;
	                                         ^
  symbol:   variable arg
  location: class Main
4 errors

class Main {
	//@ requires x >= 0 && y >= 0;
	//@ ensures \result > 0 ==> \result == x || \result == y;
	//@ ensures \result <= 0 ==> \result == 0;
	public int method_a(int x, int y) {

		if (x > 10) return x;

		if (y > 10) return y;

		return 0;
	}

	//@ ensures z > 10 ==> \result == z++;
	//@ ensures !(z > 10) ==> \result == z--;
	public int method_b(int z) {

		if (z > 10) return z++;
		else return z--;
	}

	//@ requires arg >= 0 && arg <= 10;
	//@ ensures \result == false ==> method_a(arg, 0) <= 0;
	//@ ensures \result == true ==> method_a(arg, 0) > 0;
	public boolean test(int x, int y) {

		int v = method_a(x, y);

		if (v > 0) {
			return false;
		}
		return true;
	}

	//@ requires arg >= 0 && arg <= 10;
	//@ ensures \result == true || \result == false;
	public static boolean f(int arg) {

		Main ex = new Main();
		if (arg < 0 || arg > 10) return true;
		return ex.test(arg, 0);
	}
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: error: cannot find symbol
	//@ requires arg >= 0 && arg <= 10;
	             ^
  symbol:   variable arg
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:22: error: cannot find symbol
	//@ requires arg >= 0 && arg <= 10;
	                         ^
  symbol:   variable arg
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:23: error: cannot find symbol
	//@ ensures \result == false ==> method_a(arg, 0) <= 0;
	                                          ^
  symbol:   variable arg
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:24: error: cannot find symbol
	//@ ensures \result == true ==> method_a(arg, 0) > 0;
	                                         ^
  symbol:   variable arg
  location: class Main
4 errors

class Main {
	//@ requires x >= 0 && y >= 0;
	//@ ensures \result > 0 ==> \result == x || \result == y;
	//@ ensures \result <= 0 ==> \result == 0;
	public int method_a(int x, int y) {

		if (x > 10) return x;

		if (y > 10) return y;

		return 0;
	}

	//@ ensures z > 10 ==> \result == z++;
	//@ ensures !(z > 10) ==> \result == z--;
	public int method_b(int z) {

		if (z > 10) return z++;
		else return z--;
	}

	//@ requires x >= 0 && x <= 10;
	//@ ensures \result == false ==> method_a(x, 0) <= 0;
	//@ ensures \result == true ==> method_a(x, 0) > 0;
	public boolean test(int x, int y) {

		int v = method_a(x, y);

		if (v > 0) {
			return false;
		}
		return true;
	}

	//@ requires arg >= 0 && arg <= 10;
	//@ ensures \result == true || \result == false;
	public static boolean f(int arg) {

		Main ex = new Main();
		if (arg < 0 || arg > 10) return true;
		return ex.test(arg, 0);
	}
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:14: error: INTERNAL ERROR: Unexpected kind of AST in JmlAssertionAdder.visitAssignOp: class com.sun.tools.javac.tree.JCTree$JCAssignOp
	//@ ensures z > 10 ==> \result == z++;
	                                   ^
error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
  Reason: Exception while collecting stats
org.jmlspecs.openjml.JmlInternalError: Unexpected kind of AST in JmlAssertionAdder.visitAssignOp: class com.sun.tools.javac.tree.JCTree$JCAssignOp
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.error(JmlAssertionAdder.java:1977)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitAssignopHelper(JmlAssertionAdder.java:13132)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitUnary(JmlAssertionAdder.java:13162)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCUnary.accept(JCTree.java:2076)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitBinary(JmlAssertionAdder.java:13597)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBinary.accept(JCTree.java:2111)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.lambda$visitJmlBinary$14(JmlAssertionAdder.java:15560)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.collectStats(JmlAssertionAdder.java:8390)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.collectBlock(JmlAssertionAdder.java:8402)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlBinary(JmlAssertionAdder.java:15559)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlBinary.accept(JmlTree.java:1647)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertJML(JmlAssertionAdder.java:1648)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.addPostConditions(JmlAssertionAdder.java:5428)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertMethodBodyNoInit(JmlAssertionAdder.java:1256)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlMethodDecl(JmlAssertionAdder.java:17247)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1383)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlClassDecl(JmlAssertionAdder.java:15904)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1295)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1441)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:112)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:536)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:362)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:936)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.compile(JmlCompiler.java:197)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:321)
	at jdk.compiler/org.jmlspecs.openjml.Main.compile(Main.java:534)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:374)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:332)
	at jdk.compiler/org.jmlspecs.openjml.Main.main(Main.java:295)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:53)
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:15: error: INTERNAL ERROR: Unexpected kind of AST in JmlAssertionAdder.visitAssignOp: class com.sun.tools.javac.tree.JCTree$JCAssignOp
	//@ ensures !(z > 10) ==> \result == z--;
	                                      ^
org.jmlspecs.openjml.JmlInternalError: Unexpected kind of AST in JmlAssertionAdder.visitAssignOp: class com.sun.tools.javac.tree.JCTree$JCAssignOp
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.error(JmlAssertionAdder.java:1977)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitAssignopHelper(JmlAssertionAdder.java:13132)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitUnary(JmlAssertionAdder.java:13162)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCUnary.accept(JCTree.java:2076)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitBinary(JmlAssertionAdder.java:13597)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBinary.accept(JCTree.java:2111)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.lambda$visitJmlBinary$14(JmlAssertionAdder.java:15560)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.collectStats(JmlAssertionAdder.java:8390)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.collectBlock(JmlAssertionAdder.java:8402)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlBinary(JmlAssertionAdder.java:15559)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlBinary.accept(JmlTree.java:1647)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertJML(JmlAssertionAdder.java:1648)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.addPostConditions(JmlAssertionAdder.java:5428)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertMethodBodyNoInit(JmlAssertionAdder.java:1256)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlMethodDecl(JmlAssertionAdder.java:17247)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1383)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlClassDecl(JmlAssertionAdder.java:15904)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1295)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1441)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:112)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:536)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:362)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:936)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.compile(JmlCompiler.java:197)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:321)
	at jdk.compiler/org.jmlspecs.openjml.Main.compile(Main.java:534)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:374)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:332)
	at jdk.compiler/org.jmlspecs.openjml.Main.main(Main.java:295)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:53)
3 errors

