public class BinaryTree {
    private class Node {
        int value;
        Node left;
        Node right;

        Node(int v, Node l, Node r) {
            value = v;
            left = l;
            right = r;
        }
    }

    private Node root = null;

    //@ ensures root != null ==> (\exists Node n; n != null; n.value == v && n.left == null && n.right == null);
    public void insert(int v) {

        if (root == null) {
            root = new Node(v, null, null);
            return;
        }

        Node curr = root;
        while (true) {
            if (curr.value < v) {
                if (curr.right != null) {
                    curr = curr.right;
                } else {
                    curr.right = new Node(v, null, null);
                    break;
                }
            } else if (curr.value > v) {
                if (curr.left != null) {
                    curr = curr.left;
                } else {
                    curr.left = new Node(v, null, null);
                    break;
                }
            } else {
                break;
            }
        }
    }

    //@ ensures \result <==> (\exists Node n; n != null; n.value == v);
    //@ ensures !\result <==> (\forall Node n; n != null; n.value != v);
    public boolean search(int v) {
        Node curr = root;
        while (curr != null) {
            if (curr.value == v) {
                return true;
            } else if (curr.value < v) {
                curr = curr.right;
            } else {
                curr = curr.left;
            }
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:16: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures root != null ==> (\exists Node n; n != null; n.value == v && n.left == null && n.right == null);
                ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:16: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures root != null ==> (\exists Node n; n != null; n.value == v && n.left == null && n.right == null);
                                                              ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:16: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures root != null ==> (\exists Node n; n != null; n.value == v && n.left == null && n.right == null);
                                                                              ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:16: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures root != null ==> (\exists Node n; n != null; n.value == v && n.left == null && n.right == null);
                                                                                                ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:46: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result <==> (\exists Node n; n != null; n.value == v);
                                                          ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:47: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures !\result <==> (\forall Node n; n != null; n.value != v);
                                                           ^
6 errors

public class BinaryTree {
    private class Node {
        /*@ spec_public @*/ int value;
        /*@ spec_public @*/ Node left;
        /*@ spec_public @*/ Node right;

        Node(int v, Node l, Node r) {
            value = v;
            left = l;
            right = r;
        }
    }

    private /*@ spec_public @*/ Node root = null;

    //@ ensures root != null ==> (\exists Node n; n != null; n.value == v && n.left == null && n.right == null);
    public void insert(int v) {

        if (root == null) {
            root = new Node(v, null, null);
            return;
        }

        Node curr = root;
        while (true) {
            if (curr.value < v) {
                if (curr.right != null) {
                    curr = curr.right;
                } else {
                    curr.right = new Node(v, null, null);
                    break;
                }
            } else if (curr.value > v) {
                if (curr.left != null) {
                    curr = curr.left;
                } else {
                    curr.left = new Node(v, null, null);
                    break;
                }
            } else {
                break;
            }
        }
    }

    //@ ensures \result <==> (\exists Node n; n != null; n.value == v);
    //@ ensures !\result <==> (\forall Node n; n != null; n.value != v);
    public boolean search(int v) {
        Node curr = root;
        while (curr != null) {
            if (curr.value == v) {
                return true;
            } else if (curr.value < v) {
                curr = curr.right;
            } else {
                curr = curr.left;
            }
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:14: verify: The prover cannot establish an assertion (NullField) in method BinaryTree
    private /*@ spec_public @*/ Node root = null;
                                     ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/BinaryTree.java:16:) in method insert
    public void insert(int v) {
                ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BinaryTree.java:17:
    //@ ensures root != null ==> (\exists Node n; n != null; n.value == v && n.left == null && n.right == null);
        ^
3 verification failures

public class BinaryTree {
    private class Node {
        /*@ spec_public @*/ int value;
        /*@ spec_public @*/ Node left;
        /*@ spec_public @*/ Node right;

        Node(int v, Node l, Node r) {
            value = v;
            left = l;
            right = r;
        }
    }

    private /*@ spec_public @*/ Node root = null;

    //@ ensures root != null ==> (\exists Node n; n != null; n.value == v && n.left == null && n.right == null);  
    public void insert(int v) {

        if (root == null) {
            root = new Node(v, null, null);
            return;
        }

        Node curr = root;
        while (true) {
            if (curr.value < v) {
                if (curr.right != null) {
                    curr = curr.right;
                } else {
                    curr.right = new Node(v, null, null);
                    break;
                }
            } else if (curr.value > v) {
                if (curr.left != null) {
                    curr = curr.left;
                } else {
                    curr.left = new Node(v, null, null);
                    break;
                }
            } else {
                break;
            }
        }
    }

    //@ ensures \result <==> (\exists Node n; n != null; n.value == v);
    //@ ensures !\result <==> (\forall Node n; n != null; n.value != v);
    public boolean search(int v) {
        Node curr = root;
        while (curr != null) {
            if (curr.value == v) {
                return true;
            } else if (curr.value < v) {
                curr = curr.right;
            } else {
                curr = curr.left;
            }
        }
        return false;
    }
}

/home/max/Documents/JMLGPT/tmp/BinaryTree.java:14: verify: The prover cannot establish an assertion (NullField) in method BinaryTree
    private /*@ spec_public @*/ Node root = null;
                                     ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/BinaryTree.java:16:) in method insert
    public void insert(int v) {
                ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BinaryTree.java:17:
    //@ ensures root != null ==> (\exists Node n; n != null; n.value == v && n.left == null && n.right == null);  
        ^
3 verification failures

public class BinaryTree {
    private class Node {
        /*@ spec_public @*/ int value;
        /*@ spec_public @*/ Node left;
        /*@ spec_public @*/ Node right;

        Node(int v, Node l, Node r) {
            value = v;
            left = l;
            right = r;
        }
    }

    private /*@ spec_public @*/ Node root = null;

    //@ ensures root != null ==> (\exists Node n; n != null; n.value == v && n.left == null || n.right == null);  
    public void insert(int v) {

        if (root == null) {
            root = new Node(v, null, null);
            return;
        }

        Node curr = root;
        while (true) {
            if (curr.value < v) {
                if (curr.right != null) {
                    curr = curr.right;
                } else {
                    curr.right = new Node(v, null, null);
                    break;
                }
            } else if (curr.value > v) {
                if (curr.left != null) {
                    curr = curr.left;
                } else {
                    curr.left = new Node(v, null, null);
                    break;
                }
            } else {
                break;
            }
        }
    }

    //@ ensures \result <==> (\exists Node n; n != null; n.value == v);
    //@ ensures !\result <==> (\forall Node n; n != null; n.value != v);
    public boolean search(int v) {
        Node curr = root;
        while (curr != null) {
            if (curr.value == v) {
                return true;
            } else if (curr.value < v) {
                curr = curr.right;
            } else {
                curr = curr.left;
            }
        }
        return false;
    }
}

/home/max/Documents/JMLGPT/tmp/BinaryTree.java:14: verify: The prover cannot establish an assertion (NullField) in method BinaryTree
    private /*@ spec_public @*/ Node root = null;
                                     ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/BinaryTree.java:16:) in method insert
    public void insert(int v) {
                ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BinaryTree.java:17:
    //@ ensures root != null ==> (\exists Node n; n != null; n.value == v && n.left == null || n.right == null);  
        ^
3 verification failures

public class BinaryTree {
    private class Node {
        /*@ spec_public @*/ int value;
        /*@ spec_public @*/ Node left;
        /*@ spec_public @*/ Node right;

        Node(int v, Node l, Node r) {
            value = v;
            left = l;
            right = r;
        }
    }

    private /*@ spec_public @*/ Node root = null;

    //@ ensures root != null ==> (\forall Node n; n != null; n.value == v && n.left == null && n.right == null);  
    public void insert(int v) {

        if (root == null) {
            root = new Node(v, null, null);
            return;
        }

        Node curr = root;
        while (true) {
            if (curr.value < v) {
                if (curr.right != null) {
                    curr = curr.right;
                } else {
                    curr.right = new Node(v, null, null);
                    break;
                }
            } else if (curr.value > v) {
                if (curr.left != null) {
                    curr = curr.left;
                } else {
                    curr.left = new Node(v, null, null);
                    break;
                }
            } else {
                break;
            }
        }
    }

    //@ ensures \result <==> (\exists Node n; n != null; n.value == v);
    //@ ensures !\result <==> (\forall Node n; n != null; n.value != v);
    public boolean search(int v) {
        Node curr = root;
        while (curr != null) {
            if (curr.value == v) {
                return true;
            } else if (curr.value < v) {
                curr = curr.right;
            } else {
                curr = curr.left;
            }
        }
        return false;
    }
}

/home/max/Documents/JMLGPT/tmp/BinaryTree.java:14: verify: The prover cannot establish an assertion (NullField) in method BinaryTree
    private /*@ spec_public @*/ Node root = null;
                                     ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/BinaryTree.java:16:) in method insert
    public void insert(int v) {
                ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BinaryTree.java:17:
    //@ ensures root != null ==> (\forall Node n; n != null; n.value == v && n.left == null && n.right == null);  
        ^
3 verification failures

public class BinaryTree {
    private class Node {
        /*@ spec_public @*/ int value;
        /*@ spec_public @*/ Node left;
        /*@ spec_public @*/ Node right;

        Node(int v, Node l, Node r) {
            value = v;
            left = l;
            right = r;
        }
    }

    private /*@ spec_public @*/ Node root = null;

    //@ ensures root != null ==> (\forall Node n; n != null; n.value == v && n.left == null || n.right == null);  
    public void insert(int v) {

        if (root == null) {
            root = new Node(v, null, null);
            return;
        }

        Node curr = root;
        while (true) {
            if (curr.value < v) {
                if (curr.right != null) {
                    curr = curr.right;
                } else {
                    curr.right = new Node(v, null, null);
                    break;
                }
            } else if (curr.value > v) {
                if (curr.left != null) {
                    curr = curr.left;
                } else {
                    curr.left = new Node(v, null, null);
                    break;
                }
            } else {
                break;
            }
        }
    }

    //@ ensures \result <==> (\exists Node n; n != null; n.value == v);
    //@ ensures !\result <==> (\forall Node n; n != null; n.value != v);
    public boolean search(int v) {
        Node curr = root;
        while (curr != null) {
            if (curr.value == v) {
                return true;
            } else if (curr.value < v) {
                curr = curr.right;
            } else {
                curr = curr.left;
            }
        }
        return false;
    }
}

/home/max/Documents/JMLGPT/tmp/BinaryTree.java:14: verify: The prover cannot establish an assertion (NullField) in method BinaryTree
    private /*@ spec_public @*/ Node root = null;
                                     ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/BinaryTree.java:16:) in method insert
    public void insert(int v) {
                ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BinaryTree.java:17:
    //@ ensures root != null ==> (\forall Node n; n != null; n.value == v && n.left == null || n.right == null);  
        ^
3 verification failures

public class BinaryTree {
    private class Node {
        /*@ spec_public @*/ int value;
        /*@ spec_public @*/ Node left;
        /*@ spec_public @*/ Node right;

        Node(int v, Node l, Node r) {
            value = v;
            left = l;
            right = r;
        }
    }

    private /*@ spec_public @*/ Node root = null;

 
    public void insert(int v) {

        if (root == null) {
            root = new Node(v, null, null);
            return;
        }

        Node curr = root;
        while (true) {
            if (curr.value < v) {
                if (curr.right != null) {
                    curr = curr.right;
                } else {
                    curr.right = new Node(v, null, null);
                    break;
                }
            } else if (curr.value > v) {
                if (curr.left != null) {
                    curr = curr.left;
                } else {
                    curr.left = new Node(v, null, null);
                    break;
                }
            } else {
                break;
            }
        }
    }

    //@ ensures \result <==> (\exists Node n; n != null; n.value == v);
    //@ ensures !\result <==> (\forall Node n; n != null; n.value != v);
    public boolean search(int v) {
        Node curr = root;
        while (curr != null) {
            if (curr.value == v) {
                return true;
            } else if (curr.value < v) {
                curr = curr.right;
            } else {
                curr = curr.left;
            }
        }
        return false;
    }
}

/home/max/Documents/JMLGPT/tmp/BinaryTree.java:14: verify: The prover cannot establish an assertion (NullField) in method BinaryTree
    private /*@ spec_public @*/ Node root = null;
                                     ^
1 verification failure

