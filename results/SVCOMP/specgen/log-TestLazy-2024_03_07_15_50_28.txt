class Main {
  //@ requires arg == 0;
  //@ ensures \result ==> this.f(0, arg);
  //@ ensures !\result ==> true;
  public static boolean g (int arg) {
    if (arg == 0)
      return (new Main()).f(0, arg);
    return true;
  }

  //@ requires a < 5;
  //@ ensures \result ==> true;
  //@ ensures !\result ==> false;
  public boolean f(int a, int b) {
    Integer i = null;
    if (a < 5) {
      i = Integer.valueOf(4);
      i.floatValue();
    } else
      return false;
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/TestLazy.java:3: error: non-static variable this cannot be referenced from a static context
  //@ ensures \result ==> this.f(0, arg);
                          ^
1 error

class Main {
  //@ requires arg == 0;
  //@ ensures \result ==> new Main().f(0, arg);
  //@ ensures !\result ==> true;
  public static boolean g (int arg) {
    if (arg == 0)
      return new Main().f(0, arg);
    return true;
  }

  //@ requires a < 5;
  //@ ensures \result ==> true;
  //@ ensures !\result ==> false;
  public boolean f(int a, int b) {
    Integer i = null;
    if (a < 5) {
      i = Integer.valueOf(4);
      i.floatValue();
    } else
      return false;
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/TestLazy.java:3: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().f(0, arg);
                          ^
1 error

class Main {
  //@ requires arg == 0;
  //@ ensures \result ==> f(0, arg);
  //@ ensures !\result ==> true;
  public static boolean g (int arg) {
    if (arg == 0)
      return new Main().f(0, arg);
    return true;
  }

  //@ requires a < 5;
  //@ ensures \result ==> true;
  //@ ensures !\result ==> false;
  public boolean f(int a, int b) {
    Integer i = null;
    if (a < 5) {
      i = Integer.valueOf(4);
      i.floatValue();
    } else
      return false;
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/TestLazy.java:3: error: non-static method f(int,int) cannot be referenced from a static context
  //@ ensures \result ==> f(0, arg);
                          ^
1 error

class Main {
  //@ requires arg == 0;
  //@ ensures \result ==> new Main().f(0, arg);
  //@ ensures !\result ==> true;
  public static boolean g (int arg) {
    if (arg == 0)
      return new Main().f(0, arg);
    return true;
  }

  //@ requires a < 5;
  //@ ensures \result ==> true;
  //@ ensures !\result ==> false;
  public boolean f(int a, int b) {
    Integer i = null;
    if (a < 5) {
      i = Integer.valueOf(4);
      i.floatValue();
    } else
      return false;
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/TestLazy.java:3: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().f(0, arg);
                          ^
1 error

class Main {
  //@ requires arg == 0;
  //@ ensures \result ==> f(0, arg);
  //@ ensures !\result ==> true;
  public static boolean g (int arg) {
    if (arg == 0)
      return new Main().f(0, arg);
    return true;
  }

  //@ requires a < 5;
  //@ ensures \result ==> true;
  //@ ensures !\result ==> false;
  public boolean f(int a, int b) {
    Integer i = null;
    if (a < 5) {
      i = Integer.valueOf(4);
      i.floatValue();
    } else
      return false;
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/TestLazy.java:3: error: non-static method f(int,int) cannot be referenced from a static context
  //@ ensures \result ==> f(0, arg);
                          ^
1 error

class Main {
  //@ requires arg == 0;
  //@ ensures \result ==> new Main().f(0, arg);
  //@ ensures !\result ==> true;
  public static boolean g (int arg) {
    if (arg == 0)
      return new Main().f(0, arg);
    return true;
  }

  //@ requires a < 5;
  //@ ensures \result ==> true;
  //@ ensures !\result ==> false;
  public boolean f(int a, int b) {
    Integer i = null;
    if (a < 5) {
      i = Integer.valueOf(4);
      i.floatValue();
    } else
      return false;
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/TestLazy.java:3: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().f(0, arg);
                          ^
1 error

class Main {
  //@ requires arg == 0;
  //@ ensures \result ==> f(0, arg);
  //@ ensures !\result ==> true;
  public static boolean g (int arg) {
    if (arg == 0)
      return f(0, arg);
    return true;
  }

  //@ requires a < 5;
  //@ ensures \result ==> true;
  //@ ensures !\result ==> false;
  public boolean f(int a, int b) {
    Integer i = null;
    if (a < 5) {
      i = Integer.valueOf(4);
      i.floatValue();
    } else
      return false;
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/TestLazy.java:3: error: non-static method f(int,int) cannot be referenced from a static context
  //@ ensures \result ==> f(0, arg);
                          ^
/home/max/Documents/JMLGPT/tmp/TestLazy.java:7: error: non-static method f(int,int) cannot be referenced from a static context
      return f(0, arg);
             ^
2 errors

class Main {
  //@ requires arg == 0;
  //@ ensures \result ==> new Main().f(0, arg);
  //@ ensures !\result ==> true;
  public static boolean g (int arg) {
    if (arg == 0)
      return new Main().f(0, arg);
    return true;
  }

  //@ requires a < 5;
  //@ ensures \result ==> true;
  //@ ensures !\result ==> false;
  public boolean f(int a, int b) {
    Integer i = null;
    if (a < 5) {
      i = Integer.valueOf(4);
      i.floatValue();
    } else
      return false;
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/TestLazy.java:3: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().f(0, arg);
                          ^
1 error

class Main {
  //@ requires arg == 0;
  //@ ensures \result ==> f(0, arg);
  //@ ensures !\result ==> true;
  public static boolean g (int arg) {
    if (arg == 0)
      return f(0, arg);
    return true;
  }

  //@ requires a < 5;
  //@ ensures \result ==> true;
  //@ ensures !\result ==> false;
  public boolean f(int a, int b) {
    Integer i = null;
    if (a < 5) {
      i = Integer.valueOf(4);
      i.floatValue();
    } else
      return false;
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/TestLazy.java:3: error: non-static method f(int,int) cannot be referenced from a static context
  //@ ensures \result ==> f(0, arg);
                          ^
/home/max/Documents/JMLGPT/tmp/TestLazy.java:7: error: non-static method f(int,int) cannot be referenced from a static context
      return f(0, arg);
             ^
2 errors

class Main {
  //@ requires arg == 0;
  //@ ensures \result ==> new Main().f(0, arg);
  //@ ensures !\result ==> true;
  public static boolean g (int arg) {
    if (arg == 0)
      return new Main().f(0, arg);
    return true;
  }

  //@ requires a < 5;
  //@ ensures \result ==> true;
  //@ ensures !\result ==> false;
  public boolean f(int a, int b) {
    Integer i = null;
    if (a < 5) {
      i = Integer.valueOf(4);
      i.floatValue();
    } else
      return false;
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/TestLazy.java:3: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().f(0, arg);
                          ^
1 error

class Main {
  //@ requires arg == 0;
  //@ ensures \result ==> new Main().f(0, arg);  
  //@ ensures !\result ==> true;
  public static boolean g (int arg) {
    if (arg == 0)
      return new Main().f(0, arg);
    return true;
  }

  //@ requires a < 5;
  //@ ensures \result ==> true;
  //@ ensures !\result ==> false;
  public boolean f(int a, int b) {
    Integer i = null;
    if (a < 5) {
      i = Integer.valueOf(4);
      i.floatValue();
    } else
      return false;
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/TestLazy.java:3: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().f(0, arg);  
                          ^
1 error

class Main {
  //@ requires arg == 0;
 
  //@ ensures !\result ==> true;
  public static boolean g (int arg) {
    if (arg == 0)
      return new Main().f(0, arg);
    return true;
  }

  //@ requires a < 5;
  //@ ensures \result ==> true;
  //@ ensures !\result ==> false;
  public boolean f(int a, int b) {
    Integer i = null;
    if (a < 5) {
      i = Integer.valueOf(4);
      i.floatValue();
    } else
      return false;
    return true;
  }
}

