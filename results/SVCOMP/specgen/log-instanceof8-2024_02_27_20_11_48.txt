class Main {
  //@ ensures \result <==> i instanceof Integer;
  public static boolean test(Integer i) {
    if (i instanceof Integer) {
      return true;
    } else {
      return false;
    }
  }

  //@ ensures \result <==> !test(null) && test(new Integer(1));
  public static boolean f() {
    return (!test(null)) && (test(new Integer(1)));
  }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:11: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> !test(null) && test(new Integer(1));
                                               ^
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 12582912 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid23189.log

class Main {
  //@ ensures \result <==> i != null && i instanceof Integer;
  public static boolean test(Integer i) {
    if (i instanceof Integer) {
      return true;
    } else {
      return false;
    }
  }

  //@ ensures \result <==> !test(null) && test(new Integer(1));
  public static boolean f() {
    return (!test(null)) && (test(new Integer(1)));
  }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 2097152 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid23217.log

class Main {
  //@ ensures \result <==> i != null && i.getClass().getName().equals("java.lang.Integer");
  public static boolean test(Integer i) {
    if (i instanceof Integer) {
      return true;
    } else {
      return false;
    }
  }

  //@ ensures \result <==> !test(null) && test(new Integer(1));
  public static boolean f() {
    return (!test(null)) && (test(new Integer(1)));
  }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:11: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> !test(null) && test(new Integer(1));
                                               ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
1 error

class Main {
  //@ ensures \result <==> i != null && i.getClass().getName().equals("java.lang.Integer");
  public static boolean test(Integer i) {
    if (i instanceof Integer) {
      return true;
    } else {
      return false;
    }
  }

  //@ ensures \result <==> !test(null) && (new Integer(1)).getClass().getName().equals("java.lang.Integer");
  public static boolean f() {
    return (!test(null)) && (new Integer(1)).getClass().getName().equals("java.lang.Integer");
  }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:11: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> !test(null) && (new Integer(1)).getClass().getName().equals("java.lang.Integer");
                                           ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
1 error

class Main {
  //@ ensures \result <==> i != null && i.getClass().getName().equals("java.lang.Integer");
  public static boolean test(Integer i) {
    if (i instanceof Integer) {
      return true;
    } else {
      return false;
    }
  }

  //@ ensures \result <==> !test(null) && new Integer(1) instanceof Integer;
  public static boolean f() {
    return (!test(null)) && new Integer(1) instanceof Integer;
  }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:11: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> !test(null) && new Integer(1) instanceof Integer;
                                          ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
1 error

class Main {
  //@ ensures \result <==> i != null && i.getClass().getName().equals("java.lang.Integer");
  public static boolean test(Integer i) {
    if (i instanceof Integer) {
      return true;
    } else {
      return false;
    }
  }

  //@ ensures \result <==> !test(null) && Integer.valueOf(1) instanceof Integer;
  public static boolean f() {
    return (!test(null)) && Integer.valueOf(1) instanceof Integer;
  }
}
