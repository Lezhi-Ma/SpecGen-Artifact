public class OverapproximationString01 {
  //@ requires s != null;
  //@ ensures (\result == "abcnot possible") || (\result == "abc" + s);
  //@ ensures \result.equals("not possible") ==> \result.equals("abcnot possible");
  //@ ensures \result.equals("not possible") ==> \result.equals("abc" + s);
  public static void foo(String s) {
    String prefix = "abc";
    String complete = prefix + s;
    if (complete.equals("not possible")) {
      assert (true);
    } else {
      assert (false);
    }
  }

}
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:3: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures (\result == "abcnot possible") || (\result == "abc" + s);
                ^
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:3: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures (\result == "abcnot possible") || (\result == "abc" + s);
                                                  ^
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:4: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures \result.equals("not possible") ==> \result.equals("abcnot possible");
               ^
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:4: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures \result.equals("not possible") ==> \result.equals("abcnot possible");
                                                  ^
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:5: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures \result.equals("not possible") ==> \result.equals("abc" + s);
               ^
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:5: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures \result.equals("not possible") ==> \result.equals("abc" + s);
                                                  ^
6 errors

public class OverapproximationString01 {
  //@ requires s != null;
  //@ ensures complete.equals("not possible") ==> complete.equals("abcnot possible");
  //@ ensures complete.equals("not possible") ==> complete.equals("abc" + s);
  public static void foo(String s) {
    String prefix = "abc";
    String complete = prefix + s;
    if (complete.equals("not possible")) {
      assert (true);
    } else {
      assert (false);
    }
  }

}
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:3: error: cannot find symbol
  //@ ensures complete.equals("not possible") ==> complete.equals("abcnot possible");
              ^
  symbol:   variable complete
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:3: error: cannot find symbol
  //@ ensures complete.equals("not possible") ==> complete.equals("abcnot possible");
                                                  ^
  symbol:   variable complete
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:4: error: cannot find symbol
  //@ ensures complete.equals("not possible") ==> complete.equals("abc" + s);
              ^
  symbol:   variable complete
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:4: error: cannot find symbol
  //@ ensures complete.equals("not possible") ==> complete.equals("abc" + s);
                                                  ^
  symbol:   variable complete
  location: class OverapproximationString01
4 errors

public class OverapproximationString01 {
  //@ requires s != null;
  //@ ensures prefix.equals("abc") && s != null ==> complete.equals("abc" + s);
  //@ ensures complete.equals("not possible") ==> complete.equals("abcnot possible");
  public static void foo(String s) {
    String prefix = "abc";
    String complete = prefix + s;
    if (complete.equals("not possible")) {
      assert (true);
    } else {
      assert (false);
    }
  }

}
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:3: error: cannot find symbol
  //@ ensures prefix.equals("abc") && s != null ==> complete.equals("abc" + s);
              ^
  symbol:   variable prefix
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:3: error: cannot find symbol
  //@ ensures prefix.equals("abc") && s != null ==> complete.equals("abc" + s);
                                                    ^
  symbol:   variable complete
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:4: error: cannot find symbol
  //@ ensures complete.equals("not possible") ==> complete.equals("abcnot possible");
              ^
  symbol:   variable complete
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:4: error: cannot find symbol
  //@ ensures complete.equals("not possible") ==> complete.equals("abcnot possible");
                                                  ^
  symbol:   variable complete
  location: class OverapproximationString01
4 errors

public class OverapproximationString01 {
  //@ requires s != null;
  //@ ensures s != null ==> complete.equals("abc" + s);
  //@ ensures complete.equals("not possible") ==> complete.equals("abcnot possible");
  public static void foo(String s) {
    String prefix = "abc";
    String complete = prefix + s;
    if (complete.equals("not possible")) {
      assert (true);
    } else {
      assert (false);
    }
  }

}
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:3: error: cannot find symbol
  //@ ensures s != null ==> complete.equals("abc" + s);
                            ^
  symbol:   variable complete
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:4: error: cannot find symbol
  //@ ensures complete.equals("not possible") ==> complete.equals("abcnot possible");
              ^
  symbol:   variable complete
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:4: error: cannot find symbol
  //@ ensures complete.equals("not possible") ==> complete.equals("abcnot possible");
                                                  ^
  symbol:   variable complete
  location: class OverapproximationString01
3 errors

public class OverapproximationString01 {
  //@ requires s != null;
  //@ ensures s != null ==> prefix.equals("abc") && complete.equals("abc" + s);
  //@ ensures complete.equals("not possible") ==> complete.equals("abcnot possible");
  public static void foo(String s) {
    String prefix = "abc";
    String complete = prefix + s;
    if (complete.equals("not possible")) {
      assert (true);
    } else {
      assert (false);
    }
  }

}
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:3: error: cannot find symbol
  //@ ensures s != null ==> prefix.equals("abc") && complete.equals("abc" + s);
                            ^
  symbol:   variable prefix
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:3: error: cannot find symbol
  //@ ensures s != null ==> prefix.equals("abc") && complete.equals("abc" + s);
                                                    ^
  symbol:   variable complete
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:4: error: cannot find symbol
  //@ ensures complete.equals("not possible") ==> complete.equals("abcnot possible");
              ^
  symbol:   variable complete
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:4: error: cannot find symbol
  //@ ensures complete.equals("not possible") ==> complete.equals("abcnot possible");
                                                  ^
  symbol:   variable complete
  location: class OverapproximationString01
4 errors

public class OverapproximationString01 {
  //@ requires s != null;
  //@ ensures s != null ==> s.equals("abc") && complete.equals("abc" + s);
  //@ ensures complete.equals("not possible") ==> complete.equals("abcnot possible");
  public static void foo(String s) {
    String prefix = "abc";
    String complete = prefix + s;
    if (complete.equals("not possible")) {
      assert (true);
    } else {
      assert (false);
    }
  }

}
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:3: error: cannot find symbol
  //@ ensures s != null ==> s.equals("abc") && complete.equals("abc" + s);
                                               ^
  symbol:   variable complete
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:4: error: cannot find symbol
  //@ ensures complete.equals("not possible") ==> complete.equals("abcnot possible");
              ^
  symbol:   variable complete
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:4: error: cannot find symbol
  //@ ensures complete.equals("not possible") ==> complete.equals("abcnot possible");
                                                  ^
  symbol:   variable complete
  location: class OverapproximationString01
3 errors

public class OverapproximationString01 {
  //@ requires s != null;
  //@ ensures s != null ==> s.equals("abc") && (s.equals("not possible") ==> s.equals("abcnot possible"));
  public static void foo(String s) {
    String prefix = "abc";
    String complete = prefix + s;
    if (complete.equals("not possible")) {
      assert (true);
    } else {
      assert (false);
    }
  }

}
