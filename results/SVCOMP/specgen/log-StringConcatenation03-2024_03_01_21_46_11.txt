public class StringConcatenation03 {
    //@ requires s1 != null && s2 != null;
    //@ ensures \result == true <==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 314572800 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid17861.log

public class StringConcatenation03 {
    //@ requires s1 != null && s2 != null;
    //@ ensures \result == true <==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 138412032 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid17893.log

public class StringConcatenation03 {
    //@ requires s1 != null && s2 != null;
    //@ ensures \result == true <==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 171966464 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid17927.log

public class StringConcatenation03 {
    //@ requires s1 != null && s2 != null;
    //@ ensures \result == true <==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 186646528 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid17959.log

public class StringConcatenation03 {
    //@ requires s1 != null && s2 != null;
    //@ ensures \result == true <==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 171966464 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid17992.log

public class StringConcatenation03 {
    //@ requires s1 != null && s2 != null;
    //@ ensures \result == true <==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 98566144 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18024.log

public class StringConcatenation03 {
    //@ requires s1 != null && s2 != null;
    //@ ensures \result == true <==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 312475648 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18056.log

public class StringConcatenation03 {
    //@ requires s1 != null && s2 != null;
    //@ ensures \result == true <==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 111149056 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18088.log

public class StringConcatenation03 {
    //@ requires s1 != null && s2 != null;
    //@ ensures \result == true <==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 105906176 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18120.log

public class StringConcatenation03 {
    //@ requires s1 != null && s2 != null;
    //@ ensures \result == true <==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 239075328 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18153.log

