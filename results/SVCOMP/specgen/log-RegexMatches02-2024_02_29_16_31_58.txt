import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegexMatches02 {
    //@ requires string1 != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); string1.charAt(i) != null);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    public static boolean f(String string1) {
        Pattern expression = Pattern.compile("W.*\\d[0-35-9]-\\d\\d-\\d\\d");
        Matcher matcher = expression.matcher(string1);

        //@ maintaining (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
        //@ maintaining (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
        //@ maintaining (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
        //@ maintaining (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
        //@ maintaining (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
        //@ maintaining (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
        //@ decreases string1.length();
        while (matcher.find()) {
            System.out.println(matcher.group());
            String tmp = matcher.group();
            if (!tmp.equals("WWWWW's Birthday is 12-17-77"))
                return false;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/RegexMatches02.java:7: error: bad operand types for binary operator '!='
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); string1.charAt(i) != null);
                                                                                               ^
  first type:  char
  second type: <null>
1 error

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegexMatches02 {
    //@ requires string1 != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); string1.charAt(i) != '\u0000');
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
    public static boolean f(String string1) {
        Pattern expression = Pattern.compile("W.*\\d[0-35-9]-\\d\\d-\\d\\d");
        Matcher matcher = expression.matcher(string1);

        //@ maintaining (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
        //@ maintaining (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
        //@ maintaining (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
        //@ maintaining (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
        //@ maintaining (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
        //@ maintaining (\forall int i; 0 <= i && i < string1.length(); (int)Character.MIN_VALUE <= (int)string1.charAt(i) && (int)string1.charAt(i) <= (int)Character.MAX_VALUE);
        //@ decreases string1.length();
        while (matcher.find()) {
            System.out.println(matcher.group());
            String tmp = matcher.group();
            if (!tmp.equals("WWWWW's Birthday is 12-17-77"))
                return false;
        }
        return true;
    }
}
