public class MinePump {

    boolean pumpRunning = false;

    boolean systemActive = true;

    Environment env;

    //@ ensures this.env == env;
    public MinePump(Environment env) {
        super();
        this.env = env;
    }

    //@ ensures pumpRunning ==> env.lowerWaterLevel();
    //@ ensures systemActive ==> processEnvironment();
    public void timeShift() {
        if (pumpRunning) env.lowerWaterLevel();
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
    //@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning;
    void activatePump() {
        pumpRunning = true;
    }

    //@ ensures !pumpRunning;
    public boolean isPumpRunning() {
        return pumpRunning;
    }

    //@ ensures !pumpRunning;
    void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result <==> env.isMethaneLevelCritical();
    boolean isMethaneAlarm() {
        return env.isMethaneLevelCritical();
    }

    //@ ensures \result.equals("Pump(System:" + (systemActive ? "On" : "Off") + ",Pump:" + (pumpRunning ? "On" : "Off") + ") " + env.toString());
    @Override
    public String toString() {
        return "Pump(System:"
            + (systemActive ? "On" : "Off")
            + ",Pump:"
            + (pumpRunning ? "On" : "Off")
            + ") "
            + env.toString();
    }

    //@ ensures !pumpRunning;
    public Environment getEnv() {
        return env;
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result <==> systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:7: error: cannot find symbol
    Environment env;
    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:10: error: cannot find symbol
    public MinePump(Environment env) {
                    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:66: error: cannot find symbol
    public Environment getEnv() {
           ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:9: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures this.env == env;
                    ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:15: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures pumpRunning ==> env.lowerWaterLevel();
                ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:15: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures pumpRunning ==> env.lowerWaterLevel();
                                ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures systemActive ==> processEnvironment();
                ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: incompatible types: void cannot be converted to boolean
    //@ ensures systemActive ==> processEnvironment();
                                                   ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:24: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
                ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:24: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
                               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:24: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
                                                     ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
                                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: incompatible types: void cannot be converted to boolean
    //@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
                                                                  ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:39: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures !pumpRunning;
                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:54: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result.equals("Pump(System:" + (systemActive ? "On" : "Off") + ",Pump:" + (pumpRunning ? "On" : "Off") + ") " + env.toString());
                                                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:54: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result.equals("Pump(System:" + (systemActive ? "On" : "Off") + ",Pump:" + (pumpRunning ? "On" : "Off") + ") " + env.toString());
                                                                                            ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:54: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result.equals("Pump(System:" + (systemActive ? "On" : "Off") + ",Pump:" + (pumpRunning ? "On" : "Off") + ") " + env.toString());
                                                                                                                                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:65: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures !pumpRunning;
                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:70: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures !pumpRunning;
                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:79: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures !pumpRunning;
                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:85: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result <==> systemActive;
                             ^
22 errors

public class MinePump {

    private /*@ spec_public @*/ boolean pumpRunning = false;

    private /*@ spec_public @*/ boolean systemActive = true;

    private /*@ spec_public @*/ Environment env;

    //@ ensures this.env == env;
    public MinePump(Environment env) {
        super();
        this.env = env;
    }

    //@ ensures pumpRunning ==> env.lowerWaterLevel();
    //@ ensures systemActive ==> processEnvironment();
    public void timeShift() {
        if (pumpRunning) env.lowerWaterLevel();
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
    //@ ensures !pumpRunning ==> processEnvironment__wrappee__base();
    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning;
    void activatePump() {
        pumpRunning = true;
    }

    //@ ensures !pumpRunning;
    public boolean isPumpRunning() {
        return pumpRunning;
    }

    //@ ensures !pumpRunning;
    void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result <==> env.isMethaneLevelCritical();
    boolean isMethaneAlarm() {
        return env.isMethaneLevelCritical();
    }

    //@ ensures \result.equals("Pump(System:" + (systemActive ? "On" : "Off") + ",Pump:" + (pumpRunning ? "On" : "Off") + ") " + env.toString());
    @Override
    public String toString() {
        return "Pump(System:"
            + (systemActive ? "On" : "Off")
            + ",Pump:"
            + (pumpRunning ? "On" : "Off")
            + ") "
            + env.toString();
    }

    //@ ensures !pumpRunning;
    public Environment getEnv() {
        return env;
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result <==> systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:7: error: cannot find symbol
    private /*@ spec_public @*/ Environment env;
                                ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:10: error: cannot find symbol
    public MinePump(Environment env) {
                    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:66: error: cannot find symbol
    public Environment getEnv() {
           ^
  symbol:   class Environment
  location: class MinePump
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 18874368 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid3593.log

