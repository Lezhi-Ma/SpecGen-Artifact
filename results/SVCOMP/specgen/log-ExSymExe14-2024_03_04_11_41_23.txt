class Main {
  static int field;
  static int field2;

  //@ requires arg >= Short.MIN_VALUE && arg <= Short.MAX_VALUE;
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test(x, arg, field2));
  public static boolean f(Short arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = arg;
    return inst.test(x, arg, field2);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE && r >= Integer.MIN_VALUE && r <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= x) ==> (r == x + z && x == z - 3 && z == r && \result == false) && (z > x) ==> (r == x + z && x == z - 3 && z == r && \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe14");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z <= x) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= r) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe14.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test(x, arg, field2));
                                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExe14.java:6: error: cannot find symbol
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test(x, arg, field2));
                                                                        ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe14.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test(x, arg, field2));
                                                                                ^
3 errors

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= Short.MIN_VALUE && arg <= Short.MAX_VALUE;
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test(x, arg, field2));
  public static boolean f(Short arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = arg;
    return inst.test(x, arg, field2);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE && r >= Integer.MIN_VALUE && r <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= x) ==> (r == x + z && x == z - 3 && z == r && \result == false) && (z > x) ==> (r == x + z && x == z - 3 && z == r && \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe14");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z <= x) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= r) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe14.java:6: error: cannot find symbol
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test(x, arg, field2));
                                                                        ^
  symbol:   variable x
  location: class Main
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= Short.MIN_VALUE && arg <= Short.MAX_VALUE;
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test(x, arg, field2));
  public static boolean f(Short arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = arg;
    return inst.test(x, arg, field2);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE && r >= Integer.MIN_VALUE && r <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= x) ==> (r == x + z && x == z - 3 && z == r && \result == false) && (z > x) ==> (r == x + z && x == z - 3 && z == r && \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe14");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z <= x) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= r) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe14.java:6: error: cannot find symbol
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test(x, arg, field2));
                                                                        ^
  symbol:   variable x
  location: class Main
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= Short.MIN_VALUE && arg <= Short.MAX_VALUE;
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test(arg, field2));
  public static boolean f(Short arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = arg;
    return inst.test(arg, field2);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE && r >= Integer.MIN_VALUE && r <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= x) ==> (r == x + z && x == z - 3 && z == r && \result == false) && (z > x) ==> (r == x + z && x == z - 3 && z == r && \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe14");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z <= x) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= r) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe14.java:6: error: method test in class Main cannot be applied to given types;
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test(arg, field2));
                                                                   ^
  required: int,int,int
  found:    Short,int
  reason: actual and formal argument lists differ in length
/home/max/Documents/JMLGPT/tmp/ExSymExe14.java:14: error: method test in class Main cannot be applied to given types;
    return inst.test(arg, field2);
               ^
  required: int,int,int
  found:    Short,int
  reason: actual and formal argument lists differ in length
2 errors

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= Short.MIN_VALUE && arg <= Short.MAX_VALUE;
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test(arg, field2));
  public static boolean f(Short arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = arg;
    return inst.test((int)arg, field2, 0);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE && r >= Integer.MIN_VALUE && r <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= x) ==> (r == x + z && x == z - 3 && z == r && \result == false) && (z > x) ==> (r == x + z && x == z - 3 && z == r && \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe14");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z <= x) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= r) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe14.java:6: error: method test in class Main cannot be applied to given types;
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test(arg, field2));
                                                                   ^
  required: int,int,int
  found:    Short,int
  reason: actual and formal argument lists differ in length
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= Short.MIN_VALUE && arg <= Short.MAX_VALUE;
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test((int)arg, field2, 0));
  public static boolean f(Short arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = arg;
    return inst.test((int)arg, field2, 0);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE && r >= Integer.MIN_VALUE && r <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= x) ==> (r == x + z && x == z - 3 && z == r && \result == false) && (z > x) ==> (r == x + z && x == z - 3 && z == r && \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe14");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z <= x) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= r) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe14.java:6: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test((int)arg, field2, 0));
                                                                   ^
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= Short.MIN_VALUE && arg <= Short.MAX_VALUE;
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == new Main().test((int)arg, field2, 0));
  public static boolean f(Short arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = arg;
    return inst.test((int)arg, field2, 0);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE && r >= Integer.MIN_VALUE && r <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= x) ==> (r == x + z && x == z - 3 && z == r && \result == false) && (z > x) ==> (r == x + z && x == z - 3 && z == r && \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe14");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z <= x) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= r) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe14.java:6: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == new Main().test((int)arg, field2, 0));
                                                                   ^
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= Short.MIN_VALUE && arg <= Short.MAX_VALUE;
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test((int)arg, field2, 0));
  public static boolean f(Short arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = arg;
    return inst.test((int)arg, field2, 0);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE && r >= Integer.MIN_VALUE && r <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= x) ==> (r == x + z && x == z - 3 && z == r && \result == false) && (z > x) ==> (r == x + z && x == z - 3 && z == r && \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe14");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z <= x) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= r) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe14.java:6: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test((int)arg, field2, 0));
                                                                   ^
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= Short.MIN_VALUE && arg <= Short.MAX_VALUE;
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == new Main().test((int)arg, field2, 0));
  public static boolean f(Short arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = arg;
    return inst.test((int)arg, field2, 0);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE && r >= Integer.MIN_VALUE && r <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= x) ==> (r == x + z && x == z - 3 && z == r && \result == false) && (z > x) ==> (r == x + z && x == z - 3 && z == r && \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe14");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z <= x) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= r) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe14.java:6: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == new Main().test((int)arg, field2, 0));
                                                                   ^
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= Short.MIN_VALUE && arg <= Short.MAX_VALUE;
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test((int)arg, field2, 0));
  public static boolean f(Short arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = arg;
    return inst.test((int)arg, field2, 0);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE && r >= Integer.MIN_VALUE && r <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= x) ==> (r == x + z && x == z - 3 && z == r && \result == false) && (z > x) ==> (r == x + z && x == z - 3 && z == r && \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe14");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z <= x) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= r) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe14.java:6: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test((int)arg, field2, 0));
                                                                   ^
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= Short.MIN_VALUE && arg <= Short.MAX_VALUE;
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test((int)arg, field2, 0));  
  public static boolean f(Short arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = arg;
    return inst.test((int)arg, field2, 0);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE && r >= Integer.MIN_VALUE && r <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= x) ==> (r == x + z && x == z - 3 && z == r && \result == false) && (z > x) ==> (r == x + z && x == z - 3 && z == r && \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe14");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z <= x) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= r) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe14.java:6: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result == (arg < 0) ==> (field == arg && \result == test((int)arg, field2, 0));  
                                                                   ^
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= Short.MIN_VALUE && arg <= Short.MAX_VALUE;
  //@ ensures \result == (arg <= 0) ==> (field == arg && \result == test((int)arg, field2, 0));  
  public static boolean f(Short arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = arg;
    return inst.test((int)arg, field2, 0);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE && r >= Integer.MIN_VALUE && r <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= x) ==> (r == x + z && x == z - 3 && z == r && \result == false) && (z > x) ==> (r == x + z && x == z - 3 && z == r && \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe14");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z <= x) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= r) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe14.java:6: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result == (arg <= 0) ==> (field == arg && \result == test((int)arg, field2, 0));  
                                                                    ^
1 error

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ requires arg >= Short.MIN_VALUE && arg <= Short.MAX_VALUE;
 
  public static boolean f(Short arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = arg;
    return inst.test((int)arg, field2, 0);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE && r >= Integer.MIN_VALUE && r <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= x) ==> (r == x + z && x == z - 3 && z == r && \result == false) && (z > x) ==> (r == x + z && x == z - 3 && z == r && \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe14");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z <= x) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= r) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}


