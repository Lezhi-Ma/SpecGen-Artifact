public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
    public static boolean f() {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i && j != 3; !tokens[j].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
    //@ requires sentence != null;
                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
                                                           ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
                                                                                     ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:5: error: cannot find symbol
        String[] tokens = sentence.split(" ");
                          ^
  symbol:   variable sentence
  location: class TokenTest02
4 errors

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
    public static boolean f() {
        String sentence = "example sentence for testing";
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i && j != 3; !tokens[j].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
    //@ requires sentence != null;
                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
                                                           ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
                                                                                     ^
  symbol:   variable tokens
  location: class TokenTest02
3 errors

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
    public static boolean f() {
        String sentence = "example sentence for testing";
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i && j != 3; !tokens[j].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
    //@ requires sentence != null;
                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
                                                           ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
                                                                                     ^
  symbol:   variable tokens
  location: class TokenTest02
3 errors

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
    public static boolean f() {
        String sentence = "example sentence for testing";
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i && j != 3; !tokens[j].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
    //@ requires sentence != null;
                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
                                                           ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
                                                                                     ^
  symbol:   variable tokens
  location: class TokenTest02
3 errors

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
    public static boolean f() {
        String sentence = "example sentence for testing";
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i && j != 3; !tokens[j].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
    //@ requires sentence != null;
                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
                                                           ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
                                                                                     ^
  symbol:   variable tokens
  location: class TokenTest02
3 errors

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
    public static boolean f() {
        String sentence = "example sentence for testing";
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i && j != 3; !tokens[j].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
    //@ requires sentence != null;
                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
                                                           ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
                                                                                     ^
  symbol:   variable tokens
  location: class TokenTest02
3 errors

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
    public static boolean f() {
        String sentence = "example sentence for testing";
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i && j != 3; !tokens[j].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
    //@ requires sentence != null;
                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
                                                           ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
                                                                                     ^
  symbol:   variable tokens
  location: class TokenTest02
3 errors

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i && j != 3; !tokens[j].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
                                                           ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length && i != 3; !tokens[i].equals("genneration"));
                                                                                     ^
  symbol:   variable tokens
  location: class TokenTest02
2 errors

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.length() && i != 3; !sentence.substring(i, i+1).equals("genneration"));
    public static boolean f(String sentence) {
        int i = 0;
        //@ maintaining 0 <= i && i <= sentence.length();
        //@ maintaining (\forall int j; 0 <= j && j < i && j != 3; !sentence.substring(j, j+1).equals("genneration"));
        //@ decreases sentence.length() - i;
        for (i = 0; i < sentence.length(); i++) {
            if (i == 3) {
                if (!sentence.substring(i, i+1).equals("genneration")) {
                    return false;
                }
            }
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:16:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.length() && i != 3; !sentence.substring(i, i+1).equals("genneration"));
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 < i && i < sentence.length() && i != 3; !sentence.substring(i, i+1).equals("genneration"));  
    public static boolean f(String sentence) {
        int i = 0;
        //@ maintaining 0 <= i && i <= sentence.length();
        //@ maintaining (\forall int j; 0 <= j && j < i && j != 3; !sentence.substring(j, j+1).equals("genneration"));
        //@ decreases sentence.length() - i;
        for (i = 0; i < sentence.length(); i++) {
            if (i == 3) {
                if (!sentence.substring(i, i+1).equals("genneration")) {
                    return false;
                }
            }
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:16:
    //@ ensures \result <==> (\forall int i; 0 < i && i < sentence.length() && i != 3; !sentence.substring(i, i+1).equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 < i && i <= sentence.length() && i != 3; !sentence.substring(i, i+1).equals("genneration"));  
    public static boolean f(String sentence) {
        int i = 0;
        //@ maintaining 0 <= i && i <= sentence.length();
        //@ maintaining (\forall int j; 0 <= j && j < i && j != 3; !sentence.substring(j, j+1).equals("genneration"));
        //@ decreases sentence.length() - i;
        for (i = 0; i < sentence.length(); i++) {
            if (i == 3) {
                if (!sentence.substring(i, i+1).equals("genneration")) {
                    return false;
                }
            }
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:16:
    //@ ensures \result <==> (\forall int i; 0 < i && i <= sentence.length() && i != 3; !sentence.substring(i, i+1).equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.length() && i != 3; !sentence.substring(i, i+1).equals("genneration"));  
    public static boolean f(String sentence) {
        int i = 0;
        //@ maintaining 0 <= i && i <= sentence.length();
        //@ maintaining (\forall int j; 0 <= j && j < i && j != 3; !sentence.substring(j, j+1).equals("genneration"));
        //@ decreases sentence.length() - i;
        for (i = 0; i < sentence.length(); i++) {
            if (i == 3) {
                if (!sentence.substring(i, i+1).equals("genneration")) {
                    return false;
                }
            }
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:16:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.length() && i != 3; !sentence.substring(i, i+1).equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= sentence.length() && i != 3; !sentence.substring(i, i+1).equals("genneration"));  
    public static boolean f(String sentence) {
        int i = 0;
        //@ maintaining 0 <= i && i <= sentence.length();
        //@ maintaining (\forall int j; 0 <= j && j < i && j != 3; !sentence.substring(j, j+1).equals("genneration"));
        //@ decreases sentence.length() - i;
        for (i = 0; i < sentence.length(); i++) {
            if (i == 3) {
                if (!sentence.substring(i, i+1).equals("genneration")) {
                    return false;
                }
            }
        }
        return true;
    }
}

