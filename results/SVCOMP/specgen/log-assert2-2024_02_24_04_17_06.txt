import java.util.Random;

class assert2 {
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    public static void main() {
        int i = new Random().nextInt();
        
        //@ assert i >= Integer.MIN_VALUE && i <= Integer.MAX_VALUE;
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:4: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
                 ^
/home/max/Documents/JMLGPT/tmp/assert2.java:4: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
                                                 ^
2 errors

import java.util.Random;

class assert2 {
    //@ ensures i >= Integer.MIN_VALUE && i <= Integer.MAX_VALUE;
    public static void main() {
        int i = new Random().nextInt();
        
        //@ assert i >= Integer.MIN_VALUE && i <= Integer.MAX_VALUE;
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:4: error: cannot find symbol
    //@ ensures i >= Integer.MIN_VALUE && i <= Integer.MAX_VALUE;
                ^
  symbol:   variable i
  location: class assert2
/home/max/Documents/JMLGPT/tmp/assert2.java:4: error: cannot find symbol
    //@ ensures i >= Integer.MIN_VALUE && i <= Integer.MAX_VALUE;
                                          ^
  symbol:   variable i
  location: class assert2
2 errors

import java.util.Random;

class assert2 {
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
    public static void main() {
        int i = new Random().nextInt();
        
        //@ assert i >= Integer.MIN_VALUE && i <= Integer.MAX_VALUE;
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:4: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
                 ^
/home/max/Documents/JMLGPT/tmp/assert2.java:4: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
                                                 ^
2 errors

import java.util.Random;

class assert2 {
    //@ ensures true; // No post-condition specified for main method
    public static void main() {
        int i = new Random().nextInt();
        
        //@ assert i >= Integer.MIN_VALUE && i <= Integer.MAX_VALUE;
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:9: verify: The prover cannot establish an assertion (Assert) in method main: i is greater 1000
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
                       ^
1 verification failure

import java.util.Random;

class assert2 {
    //@ ensures true; // No post-condition specified for main method
    public static void main() {
        int i = new Random().nextInt();
        
        //@ assert i >= Integer.MIN_VALUE && i <= Integer.MAX_VALUE;
        //@ assert i >= 1000 ==> i > 1000 : "i is greater 1000";
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:9: verify: The prover cannot establish an assertion (Assert) in method main: i is greater 1000
        //@ assert i >= 1000 ==> i > 1000 : "i is greater 1000";
            ^
1 verification failure

import java.util.Random;

class assert2 {
    //@ ensures true; // No post-condition specified for main method
    public static void main() {
        int i = new Random().nextInt();
        
        //@ assert i >= Integer.MIN_VALUE && i <= Integer.MAX_VALUE;
        //@ assert !(i >= 1000) || i > 1000 : "i is greater 1000";
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:9: verify: The prover cannot establish an assertion (Assert) in method main: i is greater 1000
        //@ assert !(i >= 1000) || i > 1000 : "i is greater 1000";
            ^
1 verification failure

import java.util.Random;

class assert2 {
    //@ ensures true; // No post-condition specified for main method
    public static void main() {
        int i = new Random().nextInt();
        
        //@ assert i >= Integer.MIN_VALUE && i <= Integer.MAX_VALUE;
        //@ assert i < 1000 || i > 1000 : "i is greater 1000";
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:9: verify: The prover cannot establish an assertion (Assert) in method main: i is greater 1000
        //@ assert i < 1000 || i > 1000 : "i is greater 1000";
            ^
1 verification failure

import java.util.Random;

class assert2 {
    //@ ensures true; // No post-condition specified for main method
    public static void main() {
        int i = new Random().nextInt();
        
        //@ assert i >= Integer.MIN_VALUE && i <= Integer.MAX_VALUE;
        //@ assert i != 1000 || i > 1000 : "i is greater 1000";
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:9: verify: The prover cannot establish an assertion (Assert) in method main: i is greater 1000
        //@ assert i != 1000 || i > 1000 : "i is greater 1000";
            ^
1 verification failure

import java.util.Random;

class assert2 {
    //@ ensures true; // No post-condition specified for main method
    public static void main() {
        int i = new Random().nextInt();
        
        //@ assert i >= Integer.MIN_VALUE && i <= Integer.MAX_VALUE;
        //@ assert i != 1000 || i > 1000 : "i is greater 1000";
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:9: verify: The prover cannot establish an assertion (Assert) in method main: i is greater 1000
        //@ assert i != 1000 || i > 1000 : "i is greater 1000";
            ^
1 verification failure

import java.util.Random;

class assert2 {
    //@ ensures true; // No post-condition specified for main method
    public static void main() {
        int i = new Random().nextInt();
        
        //@ assert i >= Integer.MIN_VALUE && i <= Integer.MAX_VALUE;
        //@ assert i >= 1000 || i < 1000 : "i is not greater than 1000";
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:10: verify: The prover cannot establish an assertion (Assert) in method main: i is greater 1000
        if (i >= 1000) assert i > 1000 : "i is greater 1000";
                       ^
1 verification failure

