public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\forall int i; 0 <= i && i < args.length; Integer.parseInt(args[i]) >= Integer.MIN_VALUE && Integer.parseInt(args[i]) <= Integer.MAX_VALUE);
  //@ ensures (\forall int i; 0 <= i && i < args.length; Integer.parseInt(args[i]) != Integer.parseInt(args[(i+1)%args.length]) || Integer.parseInt(args[i]) == Integer.parseInt(args[(i+1)%args.length]));
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
  //@ requires (\exists int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
  //@ requires (\exists int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
  //@ requires Integer.parseInt(a) >= Integer.MIN_VALUE && Integer.parseInt(a) <= Integer.MAX_VALUE;
  //@ requires Integer.parseInt(b) >= Integer.MIN_VALUE && Integer.parseInt(b) <= Integer.MAX_VALUE;
  //@ ensures Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 171966464 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid912.log

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\forall int i; 0 <= i && i < args.length; Integer.parseInt(args[i]) >= Integer.MIN_VALUE && Integer.parseInt(args[i]) <= Integer.MAX_VALUE);
  //@ ensures (\forall int i; 0 <= i && i < args.length; Integer.parseInt(args[i]) != Integer.parseInt(args[(i+1)%args.length]) || Integer.parseInt(args[i]) == Integer.parseInt(args[(i+1)%args.length]));
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
  //@ requires (\exists int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
  //@ requires (\exists int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
  //@ requires Integer.parseInt(a) >= Integer.MIN_VALUE && Integer.parseInt(a) <= Integer.MAX_VALUE;
  //@ requires Integer.parseInt(b) >= Integer.MIN_VALUE && Integer.parseInt(b) <= Integer.MAX_VALUE;
  //@ ensures Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 52428800 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid1291.log

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\forall int i; 0 <= i && i < args.length; Integer.parseInt(args[i]) >= Integer.MIN_VALUE && Integer.parseInt(args[i]) <= Integer.MAX_VALUE);
  //@ ensures (\forall int i; 0 <= i && i < args.length; Integer.parseInt(args[i]) != Integer.parseInt(args[(i+1)%args.length]) || Integer.parseInt(args[i]) == Integer.parseInt(args[(i+1)%args.length]));
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
  //@ requires (\exists int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
  //@ requires (\exists int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
  //@ requires Integer.parseInt(a) >= Integer.MIN_VALUE && Integer.parseInt(a) <= Integer.MAX_VALUE;
  //@ requires Integer.parseInt(b) >= Integer.MIN_VALUE && Integer.parseInt(b) <= Integer.MAX_VALUE;
  //@ ensures Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 81788928 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid1358.log

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\forall int i; 0 <= i && i < args.length; Integer.parseInt(args[i]) >= Integer.MIN_VALUE && Integer.parseInt(args[i]) <= Integer.MAX_VALUE);
  //@ ensures (\forall int i; 0 <= i && i < args.length; Integer.parseInt(args[i]) != Integer.parseInt(args[(i+1)%args.length]) || Integer.parseInt(args[i]) == Integer.parseInt(args[(i+1)%args.length]));
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
  //@ requires (\exists int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
  //@ requires (\exists int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
  //@ requires Integer.parseInt(a) >= Integer.MIN_VALUE && Integer.parseInt(a) <= Integer.MAX_VALUE;
  //@ requires Integer.parseInt(b) >= Integer.MIN_VALUE && Integer.parseInt(b) <= Integer.MAX_VALUE;
  //@ ensures Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }
}
/home/max/Documents/JMLGPT/tmp/calc.java:23: verify: The prover cannot establish an assertion (UndefinedCalledMethodPrecondition: /home/max/Documents/JMLGPT/openjml/specs/java/lang/Integer.jml:175:) in method do_stuff
  //@ requires Integer.parseInt(a) >= Integer.MIN_VALUE && Integer.parseInt(a) <= Integer.MAX_VALUE;
                               ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/Integer.jml:175: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/calc.java:23:
    public static /*@ pure @*/ int parseInt(String s)
                                   ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/Integer.jml:168: verify: Precondition conjunct is false: java.lang.Integer.parseable(s, 10)
      @      requires parseable(s, 10);
                               ^
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 263192576 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid1559.log

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\forall int i; 0 <= i && i < args.length; isInteger(args[i]));
  //@ ensures (\forall int i; 0 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
  //@ requires isInteger(a);
  //@ requires isInteger(b);
  //@ ensures areDifferentOrEqual(a, b);
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}
/home/max/Documents/JMLGPT/tmp/calc.java:7: error: non-static method isInteger(String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 <= i && i < args.length; isInteger(args[i]));
                                                         ^
/home/max/Documents/JMLGPT/tmp/calc.java:8: error: non-static method areDifferentOrEqual(String,String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));
                                                         ^
/home/max/Documents/JMLGPT/tmp/calc.java:21: error: An identifier with private visibility may not be used in a requires clause with package visibility
  //@ requires isInteger(a);
               ^
/home/max/Documents/JMLGPT/tmp/calc.java:22: error: An identifier with private visibility may not be used in a requires clause with package visibility
  //@ requires isInteger(b);
               ^
/home/max/Documents/JMLGPT/tmp/calc.java:23: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures areDifferentOrEqual(a, b);
              ^
5 errors

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\forall int i; 0 <= i && i < args.length; isInteger(args[i]));
  //@ ensures (\forall int i; 0 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
  //@ ensures isInteger(a);
  //@ ensures isInteger(b);
  //@ ensures areDifferentOrEqual(a, b);
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}
/home/max/Documents/JMLGPT/tmp/calc.java:7: error: non-static method isInteger(String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 <= i && i < args.length; isInteger(args[i]));
                                                         ^
/home/max/Documents/JMLGPT/tmp/calc.java:8: error: non-static method areDifferentOrEqual(String,String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));
                                                         ^
/home/max/Documents/JMLGPT/tmp/calc.java:21: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures isInteger(a);
              ^
/home/max/Documents/JMLGPT/tmp/calc.java:22: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures isInteger(b);
              ^
/home/max/Documents/JMLGPT/tmp/calc.java:23: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures areDifferentOrEqual(a, b);
              ^
5 errors

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\forall int i; 0 <= i && i < args.length; isInteger(args[i]));
  //@ ensures (\forall int i; 0 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
  //@ ensures isInteger(a);
  //@ ensures isInteger(b);
  //@ ensures areDifferentOrEqual(a, b);
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}
/home/max/Documents/JMLGPT/tmp/calc.java:7: error: non-static method isInteger(String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 <= i && i < args.length; isInteger(args[i]));
                                                         ^
/home/max/Documents/JMLGPT/tmp/calc.java:8: error: non-static method areDifferentOrEqual(String,String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));
                                                         ^
/home/max/Documents/JMLGPT/tmp/calc.java:21: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures isInteger(a);
              ^
/home/max/Documents/JMLGPT/tmp/calc.java:22: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures isInteger(b);
              ^
/home/max/Documents/JMLGPT/tmp/calc.java:23: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures areDifferentOrEqual(a, b);
              ^
5 errors

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\forall int i; 0 <= i && i < args.length; isInteger(args[i]));
  //@ ensures (\forall int i; 0 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
  //@ ensures isInteger(a);
  //@ ensures isInteger(b);
  //@ ensures areDifferentOrEqual(a, b);
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}
/home/max/Documents/JMLGPT/tmp/calc.java:7: error: non-static method isInteger(String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 <= i && i < args.length; isInteger(args[i]));
                                                         ^
/home/max/Documents/JMLGPT/tmp/calc.java:8: error: non-static method areDifferentOrEqual(String,String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));
                                                         ^
/home/max/Documents/JMLGPT/tmp/calc.java:21: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures isInteger(a);
              ^
/home/max/Documents/JMLGPT/tmp/calc.java:22: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures isInteger(b);
              ^
/home/max/Documents/JMLGPT/tmp/calc.java:23: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures areDifferentOrEqual(a, b);
              ^
5 errors

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\forall int i; 0 <= i && i < args.length; isInteger(args[i]));
  //@ ensures (\forall int i; 0 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
  //@ ensures isInteger(a);
  //@ ensures isInteger(b);
  //@ ensures areDifferentOrEqual(a, b);
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}
/home/max/Documents/JMLGPT/tmp/calc.java:7: error: non-static method isInteger(String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 <= i && i < args.length; isInteger(args[i]));
                                                         ^
/home/max/Documents/JMLGPT/tmp/calc.java:8: error: non-static method areDifferentOrEqual(String,String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));
                                                         ^
/home/max/Documents/JMLGPT/tmp/calc.java:21: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures isInteger(a);
              ^
/home/max/Documents/JMLGPT/tmp/calc.java:22: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures isInteger(b);
              ^
/home/max/Documents/JMLGPT/tmp/calc.java:23: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures areDifferentOrEqual(a, b);
              ^
5 errors

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\forall int i; 0 <= i && i < args.length; isInteger(args[i]));
  //@ ensures (\forall int i; 0 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
  //@ ensures isInteger(a);
  //@ ensures isInteger(b);
  //@ ensures areDifferentOrEqual(a, b);
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}
/home/max/Documents/JMLGPT/tmp/calc.java:7: error: non-static method isInteger(String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 <= i && i < args.length; isInteger(args[i]));
                                                         ^
/home/max/Documents/JMLGPT/tmp/calc.java:8: error: non-static method areDifferentOrEqual(String,String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));
                                                         ^
/home/max/Documents/JMLGPT/tmp/calc.java:21: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures isInteger(a);
              ^
/home/max/Documents/JMLGPT/tmp/calc.java:22: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures isInteger(b);
              ^
/home/max/Documents/JMLGPT/tmp/calc.java:23: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures areDifferentOrEqual(a, b);
              ^
5 errors

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\forall int i; 0 < i && i < args.length; isInteger(args[i]));  
  //@ ensures (\forall int i; 0 < i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
  //@ ensures isInteger(a);  
  //@ ensures isInteger(b);  
  //@ ensures areDifferentOrEqual(a, b);  
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}

/home/max/Documents/JMLGPT/tmp/calc.java:7: error: non-static method isInteger(String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 < i && i < args.length; isInteger(args[i]));  
                                                        ^
/home/max/Documents/JMLGPT/tmp/calc.java:8: error: non-static method areDifferentOrEqual(String,String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 < i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
                                                        ^
/home/max/Documents/JMLGPT/tmp/calc.java:21: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures isInteger(a);  
              ^
/home/max/Documents/JMLGPT/tmp/calc.java:22: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures isInteger(b);  
              ^
/home/max/Documents/JMLGPT/tmp/calc.java:23: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures areDifferentOrEqual(a, b);  
              ^
5 errors

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\forall int i; 0 < i && i <= args.length; isInteger(args[i]));  
  //@ ensures (\forall int i; 0 < i && i <= args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
 
 
 
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}

/home/max/Documents/JMLGPT/tmp/calc.java:7: error: non-static method isInteger(String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 < i && i <= args.length; isInteger(args[i]));  
                                                         ^
/home/max/Documents/JMLGPT/tmp/calc.java:8: error: non-static method areDifferentOrEqual(String,String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 < i && i <= args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
                                                         ^
2 errors

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\forall int i; 0 <= i && i < args.length; isInteger(args[i]));  
  //@ ensures (\forall int i; 0 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
 
 
 
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}

/home/max/Documents/JMLGPT/tmp/calc.java:7: error: non-static method isInteger(String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 <= i && i < args.length; isInteger(args[i]));  
                                                         ^
/home/max/Documents/JMLGPT/tmp/calc.java:8: error: non-static method areDifferentOrEqual(String,String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
                                                         ^
2 errors

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\forall int i; 0 <= i && i <= args.length; isInteger(args[i]));  
  //@ ensures (\forall int i; 0 <= i && i <= args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
 
 
 
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}

/home/max/Documents/JMLGPT/tmp/calc.java:7: error: non-static method isInteger(String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 <= i && i <= args.length; isInteger(args[i]));  
                                                          ^
/home/max/Documents/JMLGPT/tmp/calc.java:8: error: non-static method areDifferentOrEqual(String,String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 <= i && i <= args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
                                                          ^
2 errors

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\forall int i; 0 - 1 <= i && i < args.length; isInteger(args[i]));  
  //@ ensures (\forall int i; 0 - 1 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
 
 
 
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}

/home/max/Documents/JMLGPT/tmp/calc.java:7: error: non-static method isInteger(String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 - 1 <= i && i < args.length; isInteger(args[i]));  
                                                             ^
/home/max/Documents/JMLGPT/tmp/calc.java:8: error: non-static method areDifferentOrEqual(String,String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 - 1 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
                                                             ^
2 errors

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\forall int i; 0 - 1 <= i && i <= args.length; isInteger(args[i]));  
  //@ ensures (\forall int i; 0 - 1 <= i && i <= args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
 
 
 
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}

/home/max/Documents/JMLGPT/tmp/calc.java:7: error: non-static method isInteger(String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 - 1 <= i && i <= args.length; isInteger(args[i]));  
                                                              ^
/home/max/Documents/JMLGPT/tmp/calc.java:8: error: non-static method areDifferentOrEqual(String,String) cannot be referenced from a static context
  //@ ensures (\forall int i; 0 - 1 <= i && i <= args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
                                                              ^
2 errors

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\exists int i; 0 < i && i < args.length; isInteger(args[i]));  
  //@ ensures (\exists int i; 0 < i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
 
 
 
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}

/home/max/Documents/JMLGPT/tmp/calc.java:7: error: non-static method isInteger(String) cannot be referenced from a static context
  //@ ensures (\exists int i; 0 < i && i < args.length; isInteger(args[i]));  
                                                        ^
/home/max/Documents/JMLGPT/tmp/calc.java:8: error: non-static method areDifferentOrEqual(String,String) cannot be referenced from a static context
  //@ ensures (\exists int i; 0 < i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
                                                        ^
2 errors

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\exists int i; 0 < i && i <= args.length; isInteger(args[i]));  
  //@ ensures (\exists int i; 0 < i && i <= args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
 
 
 
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}

/home/max/Documents/JMLGPT/tmp/calc.java:7: error: non-static method isInteger(String) cannot be referenced from a static context
  //@ ensures (\exists int i; 0 < i && i <= args.length; isInteger(args[i]));  
                                                         ^
/home/max/Documents/JMLGPT/tmp/calc.java:8: error: non-static method areDifferentOrEqual(String,String) cannot be referenced from a static context
  //@ ensures (\exists int i; 0 < i && i <= args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
                                                         ^
2 errors

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\exists int i; 0 <= i && i < args.length; isInteger(args[i]));  
  //@ ensures (\exists int i; 0 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
 
 
 
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}

/home/max/Documents/JMLGPT/tmp/calc.java:7: error: non-static method isInteger(String) cannot be referenced from a static context
  //@ ensures (\exists int i; 0 <= i && i < args.length; isInteger(args[i]));  
                                                         ^
/home/max/Documents/JMLGPT/tmp/calc.java:8: error: non-static method areDifferentOrEqual(String,String) cannot be referenced from a static context
  //@ ensures (\exists int i; 0 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
                                                         ^
2 errors

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\exists int i; 0 <= i && i <= args.length; isInteger(args[i]));  
  //@ ensures (\exists int i; 0 <= i && i <= args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
 
 
 
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}

/home/max/Documents/JMLGPT/tmp/calc.java:7: error: non-static method isInteger(String) cannot be referenced from a static context
  //@ ensures (\exists int i; 0 <= i && i <= args.length; isInteger(args[i]));  
                                                          ^
/home/max/Documents/JMLGPT/tmp/calc.java:8: error: non-static method areDifferentOrEqual(String,String) cannot be referenced from a static context
  //@ ensures (\exists int i; 0 <= i && i <= args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
                                                          ^
2 errors

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\exists int i; 0 - 1 <= i && i < args.length; isInteger(args[i]));  
  //@ ensures (\exists int i; 0 - 1 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
 
 
 
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}

/home/max/Documents/JMLGPT/tmp/calc.java:7: error: non-static method isInteger(String) cannot be referenced from a static context
  //@ ensures (\exists int i; 0 - 1 <= i && i < args.length; isInteger(args[i]));  
                                                             ^
/home/max/Documents/JMLGPT/tmp/calc.java:8: error: non-static method areDifferentOrEqual(String,String) cannot be referenced from a static context
  //@ ensures (\exists int i; 0 - 1 <= i && i < args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
                                                             ^
2 errors

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
  //@ ensures (\exists int i; 0 - 1 <= i && i <= args.length; isInteger(args[i]));  
  //@ ensures (\exists int i; 0 - 1 <= i && i <= args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
 
 
 
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}

/home/max/Documents/JMLGPT/tmp/calc.java:7: error: non-static method isInteger(String) cannot be referenced from a static context
  //@ ensures (\exists int i; 0 - 1 <= i && i <= args.length; isInteger(args[i]));  
                                                              ^
/home/max/Documents/JMLGPT/tmp/calc.java:8: error: non-static method areDifferentOrEqual(String,String) cannot be referenced from a static context
  //@ ensures (\exists int i; 0 - 1 <= i && i <= args.length; areDifferentOrEqual(args[i], args[(i+1)%args.length]));  
                                                              ^
2 errors

public class calc {
  //@ requires args != null;
  //@ requires args.length >= 2;
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i] != null);
  //@ ensures (\forall int i; 0 <= i && i < args.length; args[i].length() > 0);
  //@ ensures (\forall int i; 0 <= i && i < args.length; (\exists int j; 0 <= j && j < args[i].length(); Character.isDigit(args[i].charAt(j))));
 
 
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null;
  //@ requires b != null;
  //@ requires a.length() > 0;
  //@ requires b.length() > 0;
 
 
 
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }

  //@ ensures \result == (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE);
  private /*@ pure @*/ boolean isInteger(String s) {
    try {
      Integer.parseInt(s);
      return true;
    } catch (NumberFormatException e) {
      return false;
    }
  }

  //@ ensures \result == (Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b));
  private /*@ pure @*/ boolean areDifferentOrEqual(String a, String b) {
    return Integer.parseInt(a) != Integer.parseInt(b) || Integer.parseInt(a) == Integer.parseInt(b);
  }
}

#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 178257920 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid2190.log

