class Hanoi {

    static int counter = 0;

    //@ requires n >= 1;
    //@ ensures \result == 1;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n >= 0;
    //@ ensures counter == 2^n - 1;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
}
/home/max/Documents/JMLGPT/tmp/Hanoi.java:15: error: bad operand types for binary operator '^'
    //@ ensures counter == 2^n - 1;
                            ^
  first type:  boolean
  second type: int
1 error

class Hanoi {

    static int counter = 0;

    //@ requires n >= 1;
    //@ ensures \result == 1;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n >= 0;
    //@ ensures counter == (1 << n) - 1;
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
}
/home/max/Documents/JMLGPT/tmp/Hanoi.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:15:) in method applyHanoi
          return;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:18:
    //@ ensures counter == (1 << n) - 1;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:11: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:6:) in method hanoi
        return 2 * (hanoi(n - 1)) + 1;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:11:
    //@ ensures \result == 1;
        ^
4 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n >= 1;
    //@ ensures \result == 1;  
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n >= 0;
    //@ ensures counter == (1 << n) - 1;  
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:15:) in method applyHanoi
          return;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:18:
    //@ ensures counter == (1 << n) - 1;  
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:11: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:6:) in method hanoi
        return 2 * (hanoi(n - 1)) + 1;
        ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:11:
    //@ ensures \result == 1;  
        ^
4 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n >= 1;
 
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n >= 0;
    //@ ensures counter == (1 << n) + 1;  
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
}

/home/max/Documents/JMLGPT/tmp/Hanoi.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Hanoi.java:15:) in method applyHanoi
          return;
          ^
/home/max/Documents/JMLGPT/tmp/Hanoi.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Hanoi.java:18:
    //@ ensures counter == (1 << n) + 1;  
        ^
2 verification failures

class Hanoi {

    static int counter = 0;

    //@ requires n >= 1;
 
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires n >= 0;
 
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
}


