class Main {
  //@ ensures \result ==> \typeof(i) == \type(Integer);
  //@ ensures !\result ==> \typeof(i) != \type(Integer);
  public static boolean test(Integer i) {
    if (i instanceof Integer) {
      return true;
    } else {
      return false;
    }
  }

  //@ ensures \result ==> !test(null) && test(new Integer(1));
  public static boolean f() {
    return (!test(null)) && (test(new Integer(1)));
  }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:12: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> !test(null) && test(new Integer(1));
                                              ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
1 error

class Main {
  //@ ensures \result ==> \typeof(i) == \type(Integer);
  //@ ensures !\result ==> \typeof(i) != \type(Integer);
  public static boolean test(Integer i) {
    if (i instanceof Integer) {
      return true;
    } else {
      return false;
    }
  }

  //@ ensures \result ==> !test(null) && test(new Integer(1));
  public static boolean f() {
    return (!test(null)) && (test(new Integer(1)));
  }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:12: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> !test(null) && test(new Integer(1));
                                              ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
1 error

class Main {
  //@ ensures \result ==> \typeof(i) == \type(Integer);
  //@ ensures !\result ==> \typeof(i) != \type(Integer);
  public static boolean test(Integer i) {
    if (i instanceof Integer) {
      return true;
    } else {
      return false;
    }
  }

  //@ ensures \result ==> !test(null) && test(1);
  public static boolean f() {
    return (!test(null)) && (test(1));
  }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:14: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/instanceof8.java:4:) in method f: i in test(java.lang.Integer)
    return (!test(null)) && (test(1));
                  ^
/home/max/Documents/JMLGPT/tmp/instanceof8.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/instanceof8.java:14:
  public static boolean test(Integer i) {
                             ^
2 verification failures

class Main {
  //@ requires i != null;
  //@ ensures \result ==> \typeof(i) == \type(Integer);
  //@ ensures !\result ==> \typeof(i) != \type(Integer);
  public static boolean test(Integer i) {
    if (i instanceof Integer) {
      return true;
    } else {
      return false;
    }
  }

  //@ ensures \result ==> !test(null) && test(1);
  public static boolean f() {
    return (!test(null)) && (test(1));
  }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:15: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/instanceof8.java:5:) in method f: i in test(java.lang.Integer)
    return (!test(null)) && (test(1));
                  ^
/home/max/Documents/JMLGPT/tmp/instanceof8.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/instanceof8.java:15:
  public static boolean test(Integer i) {
                             ^
2 verification failures

class Main {
  //@ requires i != null;
  //@ ensures \result ==> \typeof(i) == \type(Integer);
  //@ ensures !\result ==> \typeof(i) != \type(Integer);
  public static boolean test(Integer i) {
    if (i instanceof Integer) {
      return true;
    } else {
      return false;
    }
  }

  //@ ensures \result ==> !test(null) && test(new Integer(1));
  public static boolean f() {
    return (!test(null)) && (test(new Integer(1)));
  }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:13: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> !test(null) && test(new Integer(1));
                                              ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
1 error

class Main {
  //@ requires i != null;
  //@ ensures \result ==> \typeof(i) == \type(Integer);
  //@ ensures !\result ==> \typeof(i) != \type(Integer);
  public static boolean test(Integer i) {
    if (i instanceof Integer) {
      return true;
    } else {
      return false;
    }
  }

  //@ ensures \result ==> !test(null) && test(1);
  public static boolean f() {
    return (!test(null)) && (test(1));
  }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:15: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/instanceof8.java:5:) in method f: i in test(java.lang.Integer)
    return (!test(null)) && (test(1));
                  ^
/home/max/Documents/JMLGPT/tmp/instanceof8.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/instanceof8.java:15:
  public static boolean test(Integer i) {
                             ^
2 verification failures

class Main {
  //@ requires i != null;
  //@ ensures \result ==> \typeof(i) == \type(Integer);
  //@ ensures !\result ==> \typeof(i) != \type(Integer);
  public static boolean test(Integer i) {
    if (i instanceof Integer) {
      return true;
    } else {
      return false;
    }
  }

  //@ ensures \result ==> !test(null) && test(new Integer(1));
  public static boolean f() {
    return (!test(null)) && (test(new Integer(1)));
  }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:13: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> !test(null) && test(new Integer(1));
                                              ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
1 error

class Main {
  //@ requires i != null;
  //@ ensures \result ==> \typeof(i) == \type(Integer);
  //@ ensures !\result ==> \typeof(i) != \type(Integer);
  public static boolean test(Integer i) {
    if (i instanceof Integer) {
      return true;
    } else {
      return false;
    }
  }

  //@ ensures \result ==> !test(null) && test(1);
  public static boolean f() {
    return (!test(null)) && (test(1));
  }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:15: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/instanceof8.java:5:) in method f: i in test(java.lang.Integer)
    return (!test(null)) && (test(1));
                  ^
/home/max/Documents/JMLGPT/tmp/instanceof8.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/instanceof8.java:15:
  public static boolean test(Integer i) {
                             ^
2 verification failures

class Main {
  //@ requires i != null;
  //@ ensures \result ==> \typeof(i) == \type(Integer);
  //@ ensures !\result ==> \typeof(i) != \type(Integer);
  public static boolean test(Integer i) {
    if (i instanceof Integer) {
      return true;
    } else {
      return false;
    }
  }

  //@ ensures \result ==> !test(null) && test(new Integer(1));
  public static boolean f() {
    return (!test(null)) && (test(new Integer(1)));
  }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:13: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> !test(null) && test(new Integer(1));
                                              ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
1 error

class Main {
  //@ requires i != null;
  //@ ensures \result ==> \typeof(i) == \type(Integer);
  //@ ensures !\result ==> \typeof(i) != \type(Integer);
  public static boolean test(Integer i) {
    if (i instanceof Integer) {
      return true;
    } else {
      return false;
    }
  }

  //@ ensures \result ==> !test(null) && test(1);
  public static boolean f() {
    return (!test(null)) && (test(1));
  }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:15: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/instanceof8.java:5:) in method f: i in test(java.lang.Integer)
    return (!test(null)) && (test(1));
                  ^
/home/max/Documents/JMLGPT/tmp/instanceof8.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/instanceof8.java:15:
  public static boolean test(Integer i) {
                             ^
2 verification failures

