public class StringStartEnd02 {

    //@ requires args.length >= 4;
    //@ ensures \result ==> (\exists int j; 0 <= j && j < 4; args[j].startsWith("te")) && (\forall int j; 0 <= j && j < 4; args[j].startsWith("te") ==> j == \old(j));
    //@ ensures !\result ==> (\forall int j; 0 <= j && j < 4; !args[j].startsWith("te"));
    public static boolean f(String[] args) {
        if (args.length < 4)
            return false;
        int i = 0;

        for (int j = 0; j < 4; j++) {
            if (args[j].startsWith("te"))
                ++i;
        }

        return i == 1;
    }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:12: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method f
            if (args[j].startsWith("te"))
                    ^
1 verification failure

public class StringStartEnd02 {

    //@ requires args.length >= 4;
    //@ ensures \result ==> (\exists int j; 0 <= j && j < 4; args[j].startsWith("te")) && (\forall int j; 0 <= j && j < 4; args[j].startsWith("te") ==> j == \old(j));
    //@ ensures !\result ==> (\forall int j; 0 <= j && j < 4; !args[j].startsWith("te"));
    public static boolean f(String[] args) {
        if (args.length < 4)
            return false;
        int i = 0;

        for (int j = 0; j < 4; j++) {
            //@ assume 0 <= j && j < args.length;
            if (args[j].startsWith("te"))
                ++i;
        }

        return i == 1;
    }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:13: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
            if (args[j].startsWith("te"))
                                  ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:13:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class StringStartEnd02 {

    //@ requires args.length >= 4;
    //@ ensures \result ==> (\exists int j; 0 <= j && j < 4; args[j].startsWith("te")) && (\forall int j; 0 <= j && j < 4; args[j].startsWith("te") ==> j == \old(j));
    //@ ensures !\result ==> (\forall int j; 0 <= j && j < 4; !args[j].startsWith("te"));
    public static boolean f(String[] args) {
        if (args.length < 4)
            return false;
        int i = 0;

        for (int j = 0; j < 4; j++) {
            //@ assume 0 <= j && j < args.length;
            if (args[j].startsWith("te"))
                ++i;
        }

        return i == 1;
    }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:13: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
            if (args[j].startsWith("te"))
                                  ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:13:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class StringStartEnd02 {

    //@ requires args.length >= 4;
    //@ ensures \result ==> (\exists int j; 0 <= j && j < 4; args[j].startsWith("te")) && (\forall int j; 0 <= j && j < 4; args[j].startsWith("te") ==> j == \old(j));
    //@ ensures !\result ==> (\forall int j; 0 <= j && j < 4; !args[j].startsWith("te"));
    public static boolean f(String[] args) {
        if (args.length < 4)
            return false;
        int i = 0;

        for (int j = 0; j < 4; j++) {
            //@ assume 0 <= j && j < args.length;
            if (args[j].startsWith("te"))
                ++i;
        }

        return i == 1;
    }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:13: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
            if (args[j].startsWith("te"))
                                  ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:13:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class StringStartEnd02 {

    //@ requires args.length >= 4;
    //@ ensures \result ==> (\exists int j; 0 <= j && j < 4; args[j].startsWith("te")) && (\forall int j; 0 <= j && j < 4; args[j].startsWith("te") ==> j == \old(j));
    //@ ensures !\result ==> (\forall int j; 0 <= j && j < 4; !args[j].startsWith("te"));
    public static boolean f(String[] args) {
        if (args.length < 4)
            return false;
        int i = 0;

        for (int j = 0; j < 4; j++) {
            //@ assume 0 <= j && j < args.length;
            if (args[j].startsWith("te"))
                ++i;
        }

        return i == 1;
    }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:13: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
            if (args[j].startsWith("te"))
                                  ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:13:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class StringStartEnd02 {

    //@ requires args.length >= 4;
    //@ ensures \result ==> (\exists int j; 0 <= j && j < 4; args[j].startsWith("te")) && (\forall int j; 0 <= j && j < 4; args[j].startsWith("te") ==> j == \old(j));
    //@ ensures !\result ==> (\forall int j; 0 <= j && j < 4; !args[j].startsWith("te"));
    public static boolean f(String[] args) {
        if (args.length < 4)
            return false;
        int i = 0;

        for (int j = 0; j < 4; j++) {
            //@ assume 0 <= j && j < args.length;
            if (args[j].startsWith("te"))
                ++i;
        }

        return i == 1;
    }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:13: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
            if (args[j].startsWith("te"))
                                  ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:13:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class StringStartEnd02 {

    //@ requires args.length >= 4;
    //@ ensures \result ==> (\exists int j; 0 <= j && j < 4; args[j].startsWith("te")) && (\forall int j; 0 <= j && j < 4; args[j].startsWith("te") ==> j == \old(j));
    //@ ensures !\result ==> (\forall int j; 0 <= j && j < 4; !args[j].startsWith("te"));
    public static boolean f(String[] args) {
        if (args.length < 4)
            return false;
        int i = 0;

        for (int j = 0; j < 4; j++) {
            //@ assume 0 <= j && j < args.length;
            if (args[j].startsWith("te"))
                ++i;
        }

        return i == 1;
    }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:13: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
            if (args[j].startsWith("te"))
                                  ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:13:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class StringStartEnd02 {

    //@ requires args.length >= 4;
    //@ ensures \result ==> (\exists int j; 0 <= j && j < 4; args[j].startsWith("te")) && (\forall int j; 0 <= j && j < 4; args[j].startsWith("te") ==> j == \old(j));
    //@ ensures !\result ==> (\forall int j; 0 <= j && j < 4; !args[j].startsWith("te"));
    public static boolean f(String[] args) {
        if (args.length < 4)
            return false;
        int i = 0;

        for (int j = 0; j < 4; j++) {
            //@ assume 0 <= j && j < args.length;
            if (args[j].startsWith("te"))
                ++i;
        }

        return i == 1;
    }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:13: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
            if (args[j].startsWith("te"))
                                  ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:13:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class StringStartEnd02 {

    //@ requires args != null && args.length >= 4;
    //@ ensures \result ==> (\exists int j; 0 <= j && j < 4; args[j].startsWith("te")) && (\forall int j; 0 <= j && j < 4; args[j].startsWith("te") ==> j == \old(j));
    //@ ensures !\result ==> (\forall int j; 0 <= j && j < 4; !args[j].startsWith("te"));
    public static boolean f(String[] args) {
        if (args == null || args.length < 4)
            return false;
        int i = 0;

        for (int j = 0; j < 4; j++) {
            //@ assume 0 <= j && j < args.length;
            if (args[j].startsWith("te"))
                ++i;
        }

        return i == 1;
    }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:13: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
            if (args[j].startsWith("te"))
                                  ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:13:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class StringStartEnd02 {

    //@ requires args != null && args.length >= 4;
    //@ ensures \result ==> (\exists int j; 0 <= j && j < 4; args[j].startsWith("te")) && (\forall int j; 0 <= j && j < 4; args[j].startsWith("te") ==> j == \old(j));
    //@ ensures !\result ==> (\forall int j; 0 <= j && j < 4; !args[j].startsWith("te"));
    public static boolean f(String[] args) {
        if (args == null || args.length < 4)
            return false;
        int i = 0;

        for (int j = 0; j < 4; j++) {
            //@ assume 0 <= j && j < args.length;
            if (args[j].startsWith("te"))
                ++i;
        }

        return i == 1;
    }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:13: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
            if (args[j].startsWith("te"))
                                  ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:13:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

