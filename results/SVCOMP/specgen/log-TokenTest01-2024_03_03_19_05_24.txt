public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length == 4) return false;

        int i = 0;
        for (String token : tokens) {
            System.out.println(token);
            if (i == 0) {
                if (!token.equals("automatic"))
                    return false;
            }
            else if (i == 1) {
                if (!token.equals("test"))
                    return false;
            }
            else if (i == 2) {
                if (!token.equals("case"))
                    return false;
            }
            else if (i == 3) {
                if (!token.equals("generation"))
                    return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                           ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                          ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                                                           ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                                                                                         ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                                                                                                                       ^
  symbol:   variable tokens
  location: class TokenTest01
5 errors

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length == 4) return false;

        int i = 0;
        for (String token : tokens) {
            System.out.println(token);
            if (i == 0) {
                if (!token.equals("automatic"))
                    return false;
            }
            else if (i == 1) {
                if (!token.equals("test"))
                    return false;
            }
            else if (i == 2) {
                if (!token.equals("case"))
                    return false;
            }
            else if (i == 3) {
                if (!token.equals("generation"))
                    return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                              ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                                               ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                                                                             ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; tokens[i].equals("automatic") && tokens[i+1].equals("test") && tokens[i+2].equals("case") && tokens[i+3].equals("generation"));
                                                                                                                                                           ^
  symbol:   variable tokens
  location: class TokenTest01
4 errors

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; sentence.split(" ")[i].equals("automatic") && sentence.split(" ")[i+1].equals("test") && sentence.split(" ")[i+2].equals("case") && sentence.split(" ")[i+3].equals("generation"));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length == 4) return false;

        int i = 0;
        for (String token : tokens) {
            System.out.println(token);
            if (i == 0) {
                if (!token.equals("automatic"))
                    return false;
            }
            else if (i == 1) {
                if (!token.equals("test"))
                    return false;
            }
            else if (i == 2) {
                if (!token.equals("case"))
                    return false;
            }
            else if (i == 3) {
                if (!token.equals("generation"))
                    return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; sentence.split(" ")[i].equals("automatic") && sentence.split(" ")[i+1].equals("test") && sentence.split(" ")[i+2].equals("case") && sentence.split(" ")[i+3].equals("generation"));
                                                              ^
  symbol:   variable sentence
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; sentence.split(" ")[i].equals("automatic") && sentence.split(" ")[i+1].equals("test") && sentence.split(" ")[i+2].equals("case") && sentence.split(" ")[i+3].equals("generation"));
                                                                                                            ^
  symbol:   variable sentence
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; sentence.split(" ")[i].equals("automatic") && sentence.split(" ")[i+1].equals("test") && sentence.split(" ")[i+2].equals("case") && sentence.split(" ")[i+3].equals("generation"));
                                                                                                                                                       ^
  symbol:   variable sentence
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; sentence.split(" ")[i].equals("automatic") && sentence.split(" ")[i+1].equals("test") && sentence.split(" ")[i+2].equals("case") && sentence.split(" ")[i+3].equals("generation"));
                                                                                                                                                                                                  ^
  symbol:   variable sentence
  location: class TokenTest01
4 errors

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals(sentence.split(" ")[i]) && "test".equals(sentence.split(" ")[i+1]) && "case".equals(sentence.split(" ")[i+2]) && "generation".equals(sentence.split(" ")[i+3]));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length == 4) return false;

        int i = 0;
        for (String token : tokens) {
            System.out.println(token);
            if (i == 0) {
                if (!token.equals("automatic"))
                    return false;
            }
            else if (i == 1) {
                if (!token.equals("test"))
                    return false;
            }
            else if (i == 2) {
                if (!token.equals("case"))
                    return false;
            }
            else if (i == 3) {
                if (!token.equals("generation"))
                    return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals(sentence.split(" ")[i]) && "test".equals(sentence.split(" ")[i+1]) && "case".equals(sentence.split(" ")[i+2]) && "generation".equals(sentence.split(" ")[i+3]));
                                                                                 ^
  symbol:   variable sentence
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals(sentence.split(" ")[i]) && "test".equals(sentence.split(" ")[i+1]) && "case".equals(sentence.split(" ")[i+2]) && "generation".equals(sentence.split(" ")[i+3]));
                                                                                                                          ^
  symbol:   variable sentence
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals(sentence.split(" ")[i]) && "test".equals(sentence.split(" ")[i+1]) && "case".equals(sentence.split(" ")[i+2]) && "generation".equals(sentence.split(" ")[i+3]));
                                                                                                                                                                     ^
  symbol:   variable sentence
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals(sentence.split(" ")[i]) && "test".equals(sentence.split(" ")[i+1]) && "case".equals(sentence.split(" ")[i+2]) && "generation".equals(sentence.split(" ")[i+3]));
                                                                                                                                                                                                                      ^
  symbol:   variable sentence
  location: class TokenTest01
4 errors

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 < i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 < i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 < i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 < i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 < i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 < i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 < i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 < i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 < i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 < i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 < i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 < i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 < i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 < i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 < i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 < i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 < i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 < i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 < i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 < i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 < i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 < i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 < i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 < i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 < i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 < i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 < i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 < i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 < i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 < i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 < i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 < i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 < i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 < i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 < i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 < i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 < i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 < i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 < i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 < i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 < i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 < i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 < i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 < i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 < i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 < i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 < i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 < i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 < i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 < i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 < i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 < i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 < i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 < i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 < i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 < i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 < i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 < i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 < i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 < i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 < i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 < i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 < i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 < i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") && "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") && "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") && "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:2:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:6:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= 4; "automatic".equals("automatic") || "test".equals("test") || "case".equals("case") || "generation".equals("generation"));  
        ^
2 verification failures

public class TokenTest01 {
 
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length != 4) return false;

        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest01.java:8: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: TokenTest01.f(), Callee: java.lang.String.equals(java.lang.Object))
        return tokens[0].equals("automatic") && tokens[1].equals("test") && tokens[2].equals("case") && tokens[3].equals("generation");
                               ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:8:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

