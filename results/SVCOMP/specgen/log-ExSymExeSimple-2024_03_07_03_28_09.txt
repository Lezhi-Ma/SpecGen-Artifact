class Main {
  static class Node {
    //@ requires true;
    //@ ensures \result <==> a > b;
    //@ ensures !\result <==> a <= b;
    public /*@ pure @*/ boolean test(int a, int b) {
      if (a > b) {
        return false;
      } else if (a == b) System.out.println("eq");
      else
        System.out.println("<");
      return true;
    }
  }

  //@ requires arg < Integer.MAX_VALUE;
  //@ ensures \result <==> n.test(arg, arg + 1);
  //@ ensures !\result <==> !n.test(arg, arg + 1);
  public static boolean f(int arg) {
    if (arg >= Integer.MAX_VALUE) return true;
    Main inst = new Main();
    Node n = new Node();
    return n.test(arg, arg + 1);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSimple.java:17: error: cannot find symbol
  //@ ensures \result <==> n.test(arg, arg + 1);
                           ^
  symbol:   variable n
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeSimple.java:18: error: cannot find symbol
  //@ ensures !\result <==> !n.test(arg, arg + 1);
                             ^
  symbol:   variable n
  location: class Main
2 errors

class Main {
  static class Node {
    //@ requires true;
    //@ ensures \result <==> a > b;
    //@ ensures !\result <==> a <= b;
    public /*@ pure @*/ boolean test(int a, int b) {
      if (a > b) {
        return false;
      } else if (a == b) System.out.println("eq");
      else
        System.out.println("<");
      return true;
    }
  }

  //@ requires arg < Integer.MAX_VALUE;
  //@ ensures \result <==> n.test(arg, arg + 1);
  //@ ensures !\result <==> !n.test(arg, arg + 1);
  public static boolean f(int arg) {
    if (arg >= Integer.MAX_VALUE) return true;
    Main inst = new Main();
    Node n = inst.new Node();
    return n.test(arg, arg + 1);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSimple.java:17: error: cannot find symbol
  //@ ensures \result <==> n.test(arg, arg + 1);
                           ^
  symbol:   variable n
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeSimple.java:18: error: cannot find symbol
  //@ ensures !\result <==> !n.test(arg, arg + 1);
                             ^
  symbol:   variable n
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeSimple.java:22: error: qualified new of static class
    Node n = inst.new Node();
             ^
3 errors

class Main {
  static class Node {
    //@ requires true;
    //@ ensures \result <==> a > b;
    //@ ensures !\result <==> a <= b;
    public /*@ pure @*/ boolean test(int a, int b) {
      if (a > b) {
        return false;
      } else if (a == b) System.out.println("eq");
      else
        System.out.println("<");
      return true;
    }
  }

  //@ requires arg < Integer.MAX_VALUE;
  //@ ensures \result <==> new Node().test(arg, arg + 1);
  //@ ensures !\result <==> !new Node().test(arg, arg + 1);
  public static boolean f(int arg) {
    if (arg >= Integer.MAX_VALUE) return true;
    Main inst = new Main();
    return new Node().test(arg, arg + 1);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSimple.java:17: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> new Node().test(arg, arg + 1);
                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSimple.java:18: error: Object allocation is not permitted in specification expressions
  //@ ensures !\result <==> !new Node().test(arg, arg + 1);
                             ^
2 errors

class Main {
  static class Node {
    //@ requires true;
    //@ ensures \result <==> a > b;
    //@ ensures !\result <==> a <= b;
    public /*@ pure @*/ boolean test(int a, int b) {
      if (a > b) {
        return false;
      } else if (a == b) System.out.println("eq");
      else
        System.out.println("<");
      return true;
    }
  }

  //@ requires arg < Integer.MAX_VALUE;
  //@ ensures \result <==> new Node().test(arg, arg + 1);
  //@ ensures !\result <==> !new Node().test(arg, arg + 1);
  public static boolean f(int arg) {
    if (arg >= Integer.MAX_VALUE) return true;
    Main inst = new Main();
    Node n = inst.new Node();
    return n.test(arg, arg + 1);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSimple.java:17: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> new Node().test(arg, arg + 1);
                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSimple.java:18: error: Object allocation is not permitted in specification expressions
  //@ ensures !\result <==> !new Node().test(arg, arg + 1);
                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSimple.java:22: error: qualified new of static class
    Node n = inst.new Node();
             ^
3 errors

class Main {
  static class Node {
    //@ requires true;
    //@ ensures \result <==> a > b;
    //@ ensures !\result <==> a <= b;
    public /*@ pure @*/ boolean test(int a, int b) {
      if (a > b) {
        return false;
      } else if (a == b) System.out.println("eq");
      else
        System.out.println("<");
      return true;
    }
  }

  //@ requires arg < Integer.MAX_VALUE;
  //@ ensures \result <==> new Node().test(arg, arg + 1);
  //@ ensures !\result <==> !new Node().test(arg, arg + 1);
  public static boolean f(int arg) {
    if (arg >= Integer.MAX_VALUE) return true;
    Main inst = new Main();
    Node n = new Node();
    return n.test(arg, arg + 1);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSimple.java:17: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> new Node().test(arg, arg + 1);
                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExeSimple.java:18: error: Object allocation is not permitted in specification expressions
  //@ ensures !\result <==> !new Node().test(arg, arg + 1);
                             ^
2 errors

class Main {
  static class Node {
    //@ requires true;
    //@ ensures \result <==> a > b;
    //@ ensures !\result <==> a <= b;
    public /*@ pure @*/ boolean test(int a, int b) {
      if (a > b) {
        return false;
      } else if (a == b) System.out.println("eq");
      else
        System.out.println("<");
      return true;
    }
  }

  //@ requires arg < Integer.MAX_VALUE;
  //@ ensures \result <==> true;
  //@ ensures !\result <==> false;
  public static boolean f(int arg) {
    if (arg >= Integer.MAX_VALUE) return true;
    Main inst = new Main();
    Node n = inst.new Node();
    return n.test(arg, arg + 1);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSimple.java:22: error: qualified new of static class
    Node n = inst.new Node();
             ^
1 error

class Main {
  static class Node {
    //@ requires true;
    //@ ensures \result <==> a > b;
    //@ ensures !\result <==> a <= b;
    public /*@ pure @*/ boolean test(int a, int b) {
      if (a > b) {
        return false;
      } else if (a == b) System.out.println("eq");
      else
        System.out.println("<");
      return true;
    }
  }

  //@ requires arg < Integer.MAX_VALUE;
  //@ ensures \result <==> true;
  //@ ensures !\result <==> false;
  public static boolean f(int arg) {
    if (arg >= Integer.MAX_VALUE) return true;
    Node n = new Node();
    return n.test(arg, arg + 1);
  }
}
