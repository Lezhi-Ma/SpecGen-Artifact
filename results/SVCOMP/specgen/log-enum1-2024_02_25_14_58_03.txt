enum enum1 {
  VAL1,
  VAL2,
  VAL3,
  VAL4,
  VAL5;

  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}
EXCEPTION-JmlMethodSpecs java.lang.NullPointerException: Cannot invoke "com.sun.tools.javac.tree.JCTree$JCMethodDecl.getReturnType()" because "md" is null
java.lang.NullPointerException: Cannot invoke "com.sun.tools.javac.tree.JCTree$JCMethodDecl.getReturnType()" because "md" is null
	at jdk.compiler/org.jmlspecs.openjml.ext.SingletonExpressions$1.typecheck(SingletonExpressions.java:41)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.visitJmlSingleton(JmlAttr.java:4697)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlSingleton.accept(JmlTree.java:2949)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:680)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.attribTree(JmlAttr.java:4766)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribExpr(Attr.java:733)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.visitIndexed(Attr.java:4051)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.visitIndexed(JmlAttr.java:5844)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCArrayAccess.accept(JCTree.java:2246)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:680)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.attribTree(JmlAttr.java:4766)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribExpr(Attr.java:733)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.visitBinary(Attr.java:3887)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.visitBinary(JmlAttr.java:4806)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBinary.accept(JCTree.java:2111)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:680)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.attribTree(JmlAttr.java:4766)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribExpr(Attr.java:726)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.attribExpr(JmlAttr.java:7570)
	at jdk.compiler/org.jmlspecs.openjml.ext.QuantifiedExpressions$QuantifiedExpression.typecheck(QuantifiedExpressions.java:202)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.visitJmlQuantifiedExpr(JmlAttr.java:5101)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlQuantifiedExpr.accept(JmlTree.java:2855)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:680)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.attribTree(JmlAttr.java:4766)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.visitParens(Attr.java:3826)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCParens.accept(JCTree.java:1969)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:680)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.attribTree(JmlAttr.java:4766)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribExpr(Attr.java:726)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.attribExpr(JmlAttr.java:7570)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.visitJmlMethodClauseExpr(JmlAttr.java:3848)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodClauseExpr.accept(JmlTree.java:2501)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.visitJmlSpecificationCase(JmlAttr.java:4195)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlSpecificationCase.accept(JmlTree.java:3046)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.visitJmlMethodSpecs(JmlAttr.java:4270)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodSpecs.accept(JmlTree.java:2709)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.visitBlock(JmlAttr.java:738)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlBlock.accept(JmlTree.java:1452)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:680)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.attribTree(JmlAttr.java:4766)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:754)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.attribStat(JmlAttr.java:581)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:5378)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.attribClassBody(JmlAttr.java:557)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5269)
	at jdk.compiler/com.sun.tools.javac.comp.JmlAttr.attribClass(JmlAttr.java:423)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:5107)
	at jdk.compiler/com.sun.tools.javac.comp.Attr.attrib(Attr.java:5052)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1320)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.attribute(JmlCompiler.java:304)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:936)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.compile(JmlCompiler.java:197)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:321)
	at jdk.compiler/org.jmlspecs.openjml.Main.compile(Main.java:534)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:374)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:332)
	at jdk.compiler/org.jmlspecs.openjml.Main.main(Main.java:295)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:53)

enum enum1 {
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}
/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  ^
1 error

enum enum1 {
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  VAL1,
  VAL2,
  VAL3,
  VAL4,
  VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}
/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1,
      ^
2 errors

enum enum1 {
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}
/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}
/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}
/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}
/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}
/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}
/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}
/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
  //@ ensures (\forall int i; 0 < i && i < enum1.values().length; \result[i] == enum1.values()[i]);  
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}

/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\forall int i; 0 < i && i < enum1.values().length; \result[i] == enum1.values()[i]);  
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
  //@ ensures (\forall int i; 0 < i && i <= enum1.values().length; \result[i] == enum1.values()[i]);  
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}

/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\forall int i; 0 < i && i <= enum1.values().length; \result[i] == enum1.values()[i]);  
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);  
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}

/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\forall int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);  
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
  //@ ensures (\forall int i; 0 <= i && i <= enum1.values().length; \result[i] == enum1.values()[i]);  
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}

/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\forall int i; 0 <= i && i <= enum1.values().length; \result[i] == enum1.values()[i]);  
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
  //@ ensures (\forall int i; 0 - 1 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);  
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}

/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\forall int i; 0 - 1 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);  
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
  //@ ensures (\forall int i; 0 - 1 <= i && i <= enum1.values().length; \result[i] == enum1.values()[i]);  
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}

/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\forall int i; 0 - 1 <= i && i <= enum1.values().length; \result[i] == enum1.values()[i]);  
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
  //@ ensures (\exists int i; 0 < i && i < enum1.values().length; \result[i] == enum1.values()[i]);  
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}

/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\exists int i; 0 < i && i < enum1.values().length; \result[i] == enum1.values()[i]);  
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
  //@ ensures (\exists int i; 0 < i && i <= enum1.values().length; \result[i] == enum1.values()[i]);  
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}

/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\exists int i; 0 < i && i <= enum1.values().length; \result[i] == enum1.values()[i]);  
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
  //@ ensures (\exists int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);  
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}

/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\exists int i; 0 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);  
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
  //@ ensures (\exists int i; 0 <= i && i <= enum1.values().length; \result[i] == enum1.values()[i]);  
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}

/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\exists int i; 0 <= i && i <= enum1.values().length; \result[i] == enum1.values()[i]);  
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
  //@ ensures (\exists int i; 0 - 1 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);  
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}

/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\exists int i; 0 - 1 <= i && i < enum1.values().length; \result[i] == enum1.values()[i]);  
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
  //@ ensures (\exists int i; 0 - 1 <= i && i <= enum1.values().length; \result[i] == enum1.values()[i]);  
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}

/home/max/Documents/JMLGPT/tmp/enum1.java:2: error: enum constant expected here
  //@ ensures (\exists int i; 0 - 1 <= i && i <= enum1.values().length; \result[i] == enum1.values()[i]);  
  ^
/home/max/Documents/JMLGPT/tmp/enum1.java:3: error: <identifier> expected
  VAL1, VAL2, VAL3, VAL4, VAL5;
      ^
2 errors

enum enum1 {
 
  VAL1, VAL2, VAL3, VAL4, VAL5;

  static {
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  //@ requires args != null;
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    assert (e == enum1.VAL5);
  }
}


