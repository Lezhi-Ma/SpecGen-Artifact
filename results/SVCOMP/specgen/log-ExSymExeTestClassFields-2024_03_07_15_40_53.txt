class Main {
  static /*@ spec_public */ int field;
  /*@ spec_public */ int field2;

  //@ requires arg == 2;
  //@ ensures \result == test();
  public static boolean f(int arg) {
    if (arg == 2)
      return (new Main()).test();
    return true;
  }

  //@ ensures field == 0 && field2 == 0 ==> \result == true;
  //@ ensures !(field == 0 && field2 == 0) ==> \result == false;
  public boolean test() {
    if (field == 0 && field2 == 0) System.out.println("br 0");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeTestClassFields.java:6: error: non-static method test() cannot be referenced from a static context
  //@ ensures \result == test();
                         ^
1 error

class Main {
  static /*@ spec_public */ int field;
  /*@ spec_public */ int field2;

  //@ requires arg == 2;
  //@ ensures (new Main()).test() == true;
  public static boolean f(int arg) {
    if (arg == 2)
      return (new Main()).test();
    return true;
  }

  //@ ensures field == 0 && field2 == 0 ==> \result == true;
  //@ ensures !(field == 0 && field2 == 0) ==> \result == false;
  public boolean test() {
    if (field == 0 && field2 == 0) System.out.println("br 0");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeTestClassFields.java:6: error: Object allocation is not permitted in specification expressions
  //@ ensures (new Main()).test() == true;
               ^
1 error

class Main {
  static /*@ spec_public */ int field;
  /*@ spec_public */ int field2;

  //@ requires arg == 2;
  //@ ensures test() == true;
  public static boolean f(int arg) {
    if (arg == 2)
      return (new Main()).test();
    return true;
  }

  //@ ensures field == 0 && field2 == 0 ==> \result == true;
  //@ ensures !(field == 0 && field2 == 0) ==> \result == false;
  public boolean test() {
    if (field == 0 && field2 == 0) System.out.println("br 0");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeTestClassFields.java:6: error: non-static method test() cannot be referenced from a static context
  //@ ensures test() == true;
              ^
1 error

class Main {
  static /*@ spec_public */ int field;
  /*@ spec_public */ int field2;

  //@ requires arg == 2;
  //@ ensures (new Main()).test() == true;
  public static boolean f(int arg) {
    if (arg == 2)
      return (new Main()).test();
    return true;
  }

  //@ ensures field == 0 && field2 == 0 ==> \result == true;
  //@ ensures !(field == 0 && field2 == 0) ==> \result == false;
  public boolean test() {
    if (field == 0 && field2 == 0) System.out.println("br 0");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeTestClassFields.java:6: error: Object allocation is not permitted in specification expressions
  //@ ensures (new Main()).test() == true;
               ^
1 error

class Main {
  static /*@ spec_public */ int field;
  /*@ spec_public */ int field2;

  //@ requires arg == 2;
  //@ ensures test() == true;
  public static boolean f(int arg) {
    if (arg == 2)
      return new Main().test();
    return true;
  }

  //@ ensures field == 0 && field2 == 0 ==> \result == true;
  //@ ensures !(field == 0 && field2 == 0) ==> \result == false;
  public boolean test() {
    if (field == 0 && field2 == 0) System.out.println("br 0");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeTestClassFields.java:6: error: non-static method test() cannot be referenced from a static context
  //@ ensures test() == true;
              ^
1 error

class Main {
  static /*@ spec_public */ int field;
  /*@ spec_public */ int field2;

  //@ requires arg == 2;
  //@ ensures (new Main()).test() == true;
  public static boolean f(int arg) {
    if (arg == 2)
      return (new Main()).test();
    return true;
  }

  //@ ensures field == 0 && field2 == 0 ==> \result == true;
  //@ ensures !(field == 0 && field2 == 0) ==> \result == false;
  public boolean test() {
    if (field == 0 && field2 == 0) System.out.println("br 0");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeTestClassFields.java:6: error: Object allocation is not permitted in specification expressions
  //@ ensures (new Main()).test() == true;
               ^
1 error

class Main {
  static /*@ spec_public */ int field;
  /*@ spec_public */ int field2;

  //@ requires arg == 2;
  //@ ensures test() == true;
  public static boolean f(int arg) {
    if (arg == 2)
      return new Main().test();
    return true;
  }

  //@ ensures field == 0 && field2 == 0 ==> \result == true;
  //@ ensures !(field == 0 && field2 == 0) ==> \result == false;
  public boolean test() {
    if (field == 0 && field2 == 0) System.out.println("br 0");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeTestClassFields.java:6: error: non-static method test() cannot be referenced from a static context
  //@ ensures test() == true;
              ^
1 error

class Main {
  static /*@ spec_public */ int field;
  /*@ spec_public */ int field2;

  //@ requires arg == 2;
  //@ ensures (new Main()).test() == true;
  public static boolean f(int arg) {
    if (arg == 2)
      return (new Main()).test();
    return true;
  }

  //@ ensures field == 0 && field2 == 0 ==> \result == true;
  //@ ensures !(field == 0 && field2 == 0) ==> \result == false;
  public boolean test() {
    if (field == 0 && field2 == 0) System.out.println("br 0");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeTestClassFields.java:6: error: Object allocation is not permitted in specification expressions
  //@ ensures (new Main()).test() == true;
               ^
1 error

class Main {
  static /*@ spec_public */ int field;
  /*@ spec_public */ int field2;

  //@ requires arg == 2;
  //@ ensures test() == true;
  public static boolean f(int arg) {
    if (arg == 2)
      return new Main().test();
    return true;
  }

  //@ ensures field == 0 && field2 == 0 ==> \result == true;
  //@ ensures !(field == 0 && field2 == 0) ==> \result == false;
  public boolean test() {
    if (field == 0 && field2 == 0) System.out.println("br 0");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeTestClassFields.java:6: error: non-static method test() cannot be referenced from a static context
  //@ ensures test() == true;
              ^
1 error

class Main {
  static /*@ spec_public */ int field;
  /*@ spec_public */ int field2;

  //@ requires arg == 2;
  //@ ensures (new Main()).test() == true;
  public static boolean f(int arg) {
    if (arg == 2)
      return (new Main()).test();
    return true;
  }

  //@ ensures field == 0 && field2 == 0 ==> \result == true;
  //@ ensures !(field == 0 && field2 == 0) ==> \result == false;
  public boolean test() {
    if (field == 0 && field2 == 0) System.out.println("br 0");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeTestClassFields.java:6: error: Object allocation is not permitted in specification expressions
  //@ ensures (new Main()).test() == true;
               ^
1 error

class Main {
  static /*@ spec_public */ int field;
  /*@ spec_public */ int field2;

  //@ requires arg == 2;
  //@ ensures (new Main()).test() == true;  
  public static boolean f(int arg) {
    if (arg == 2)
      return (new Main()).test();
    return true;
  }

  //@ ensures field == 0 && field2 == 0 ==> \result == true;
  //@ ensures !(field == 0 && field2 == 0) ==> \result == false;
  public boolean test() {
    if (field == 0 && field2 == 0) System.out.println("br 0");
    else {
      return false;
    }
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExeTestClassFields.java:6: error: Object allocation is not permitted in specification expressions
  //@ ensures (new Main()).test() == true;  
               ^
1 error

class Main {
  static /*@ spec_public */ int field;
  /*@ spec_public */ int field2;

  //@ requires arg == 2;
 
  public static boolean f(int arg) {
    if (arg == 2)
      return (new Main()).test();
    return true;
  }

  //@ ensures field == 0 && field2 == 0 ==> \result == true;
  //@ ensures !(field == 0 && field2 == 0) ==> \result == false;
  public boolean test() {
    if (field == 0 && field2 == 0) System.out.println("br 0");
    else {
      return false;
    }
    return true;
  }
}


