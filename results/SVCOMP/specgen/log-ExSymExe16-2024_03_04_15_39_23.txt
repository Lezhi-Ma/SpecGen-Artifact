class Main {
  static int field;

  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(x, field);
  }
  
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x == 0) System.out.println("branch BOO1");
    else
      System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: cannot find symbol
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
                          ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: cannot find symbol
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
                                            ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: cannot find symbol
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
                                                 ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: cannot find symbol
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
                                                          ^
  symbol:   variable z
  location: class Main
4 errors

class Main {
  static int field;

  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(x, field);
  }
  
  //@ requires z >= 0;
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x == 0) System.out.println("branch BOO1");
    else
      System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: cannot find symbol
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
                          ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: cannot find symbol
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
                                            ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: cannot find symbol
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
                                                 ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: cannot find symbol
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
                                                          ^
  symbol:   variable z
  location: class Main
4 errors

class Main {
  static int field;

  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(x, field);
  }
  
  //@ requires z >= 0;
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x == 0) System.out.println("branch BOO1");
    else
      System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: cannot find symbol
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
                          ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: cannot find symbol
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
                                            ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: cannot find symbol
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
                                                 ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: cannot find symbol
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
                                                          ^
  symbol:   variable z
  location: class Main
4 errors

class Main {
  static int field;

  //@ ensures \result == (this.field == 0 ? false : (x == this.field - 3 ? (this.field == 0 ? false : true) : true));
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(x, field);
  }
  
  //@ requires z >= 0;
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x == 0) System.out.println("branch BOO1");
    else
      System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: non-static variable this cannot be referenced from a static context
  //@ ensures \result == (this.field == 0 ? false : (x == this.field - 3 ? (this.field == 0 ? false : true) : true));
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result == (this.field == 0 ? false : (x == this.field - 3 ? (this.field == 0 ? false : true) : true));
                              ^
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: cannot find symbol
  //@ ensures \result == (this.field == 0 ? false : (x == this.field - 3 ? (this.field == 0 ? false : true) : true));
                                                     ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: non-static variable this cannot be referenced from a static context
  //@ ensures \result == (this.field == 0 ? false : (x == this.field - 3 ? (this.field == 0 ? false : true) : true));
                                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result == (this.field == 0 ? false : (x == this.field - 3 ? (this.field == 0 ? false : true) : true));
                                                              ^
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: non-static variable this cannot be referenced from a static context
  //@ ensures \result == (this.field == 0 ? false : (x == this.field - 3 ? (this.field == 0 ? false : true) : true));
                                                                            ^
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result == (this.field == 0 ? false : (x == this.field - 3 ? (this.field == 0 ? false : true) : true));
                                                                                ^
7 errors

class Main {
  static /*@ spec_public @*/ int field;

  //@ ensures \result == (field == 0 ? false : (x == field - 3 ? (field == 0 ? false : true) : true));
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(x, field);
  }
  
  //@ requires z >= 0;
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x == 0) System.out.println("branch BOO1");
    else
      System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: cannot find symbol
  //@ ensures \result == (field == 0 ? false : (x == field - 3 ? (field == 0 ? false : true) : true));
                                                ^
  symbol:   variable x
  location: class Main
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ ensures \result == (field == 0 ? false : (x == field - 3 ? (field == 0 ? false : true) : true));
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(x, field);
  }
  
  //@ requires z >= 0;
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x == 0) System.out.println("branch BOO1");
    else
      System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: error: cannot find symbol
  //@ ensures \result == (field == 0 ? false : (x == field - 3 ? (field == 0 ? false : true) : true));
                                                ^
  symbol:   variable x
  location: class Main
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ ensures \result == (field == 0 ? false : (field - 3 == field - 3 ? (field == 0 ? false : true) : true));
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(x, field);
  }
  
  //@ requires z >= 0;
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x == 0) System.out.println("branch BOO1");
    else
      System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:9: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4:) in method f
    return inst.test(x, field);
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExe16.java:9:
  //@ ensures \result == (field == 0 ? false : (field - 3 == field - 3 ? (field == 0 ? false : true) : true));
      ^
2 verification failures

class Main {
  static /*@ spec_public @*/ int field;

  //@ ensures \result == (field == 0 ? false : (field - 3 == field - 3 ? (field == 0 ? false : true) : true));  
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(x, field);
  }
  
  //@ requires z >= 0;
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x == 0) System.out.println("branch BOO1");
    else
      System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:9: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4:) in method f
    return inst.test(x, field);
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExe16.java:9:
  //@ ensures \result == (field == 0 ? false : (field - 3 == field - 3 ? (field == 0 ? false : true) : true));  
      ^
2 verification failures

class Main {
  static /*@ spec_public @*/ int field;

  //@ ensures \result == (field == 0 ? false : (field + 3 == field + 3 ? (field == 0 ? false : true) : true));  
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(x, field);
  }
  
  //@ requires z >= 0;
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x == 0) System.out.println("branch BOO1");
    else
      System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:9: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4:) in method f
    return inst.test(x, field);
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExe16.java:9:
  //@ ensures \result == (field == 0 ? false : (field + 3 == field + 3 ? (field == 0 ? false : true) : true));  
      ^
2 verification failures

class Main {
  static /*@ spec_public @*/ int field;

  //@ ensures \result == (field == 0 ? false : (field + 3 == field - 3 ? (field == 0 ? false : true) : true));  
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(x, field);
  }
  
  //@ requires z >= 0;
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x == 0) System.out.println("branch BOO1");
    else
      System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:9: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4:) in method f
    return inst.test(x, field);
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExe16.java:9:
  //@ ensures \result == (field == 0 ? false : (field + 3 == field - 3 ? (field == 0 ? false : true) : true));  
      ^
2 verification failures

class Main {
  static /*@ spec_public @*/ int field;

  //@ ensures \result == (field == 0 ? false : (field - 3 == field + 3 ? (field == 0 ? false : true) : true));  
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(x, field);
  }
  
  //@ requires z >= 0;
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x == 0) System.out.println("branch BOO1");
    else
      System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:9: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4:) in method f
    return inst.test(x, field);
    ^
/home/max/Documents/JMLGPT/tmp/ExSymExe16.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExe16.java:9:
  //@ ensures \result == (field == 0 ? false : (field - 3 == field + 3 ? (field == 0 ? false : true) : true));  
      ^
2 verification failures

class Main {
  static /*@ spec_public @*/ int field;

 
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(x, field);
  }
  
  //@ requires z >= 0;
  //@ ensures \result == (z == 0 ? false : (x == z - 3 ? (z == 0 ? false : true) : true));
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe16");
    int y = 3;
    x = z - y;
    if (z == 0) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x == 0) System.out.println("branch BOO1");
    else
      System.out.println("branch BOO2");
    return true;
  }
}


