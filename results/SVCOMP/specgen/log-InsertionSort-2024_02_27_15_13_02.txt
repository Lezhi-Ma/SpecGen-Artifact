public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 < i && i < a.length-1; a[i] < a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 < i && i < a.length-1; a[i] < a[i+1]);  
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 < i && i < a.length-1; a[i] <= a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 < i && i < a.length-1; a[i] <= a[i+1]);  
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 < i && i < a.length-1; a[i] - 1 <= a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 < i && i < a.length-1; a[i] - 1 <= a[i+1]);  
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 < i && i <= a.length-1; a[i] < a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 < i && i <= a.length-1; a[i] < a[i+1]);  
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 < i && i <= a.length-1; a[i] <= a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 < i && i <= a.length-1; a[i] <= a[i+1]);  
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 < i && i <= a.length-1; a[i] - 1 <= a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 < i && i <= a.length-1; a[i] - 1 <= a[i+1]);  
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] < a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] < a[i+1]);  
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);  
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] - 1 <= a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] - 1 <= a[i+1]);  
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 <= i && i <= a.length-1; a[i] < a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 <= i && i <= a.length-1; a[i] < a[i+1]);  
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 <= i && i <= a.length-1; a[i] <= a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 <= i && i <= a.length-1; a[i] <= a[i+1]);  
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 <= i && i <= a.length-1; a[i] - 1 <= a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 <= i && i <= a.length-1; a[i] - 1 <= a[i+1]);  
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 - 1 <= i && i < a.length-1; a[i] < a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 - 1 <= i && i < a.length-1; a[i] < a[i+1]);  
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 - 1 <= i && i < a.length-1; a[i] <= a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 - 1 <= i && i < a.length-1; a[i] <= a[i+1]);  
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 - 1 <= i && i < a.length-1; a[i] - 1 <= a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 - 1 <= i && i < a.length-1; a[i] - 1 <= a[i+1]);  
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 - 1 <= i && i <= a.length-1; a[i] < a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 - 1 <= i && i <= a.length-1; a[i] < a[i+1]);  
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 - 1 <= i && i <= a.length-1; a[i] <= a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 - 1 <= i && i <= a.length-1; a[i] <= a[i+1]);  
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\forall int i; 0 - 1 <= i && i <= a.length-1; a[i] - 1 <= a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

/home/max/Documents/JMLGPT/tmp/InsertionSort.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:4:) in method sort
  public static void sort(int[] a) {
                     ^
/home/max/Documents/JMLGPT/tmp/InsertionSort.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/InsertionSort.java:5:
  //@ ensures (\forall int i; 0 - 1 <= i && i <= a.length-1; a[i] - 1 <= a[i+1]);  
      ^
2 verification failures

public class InsertionSort {

  //@ requires a != null;
  //@ ensures (\exists int i; 0 < i && i < a.length-1; a[i] < a[i+1]);  
  public static void sort(int[] a) {
    final int N = a.length;
    for (int i = 1; i < N; i++) { // N branches
      int j = i - 1;
      int x = a[i];
      // First branch (j >= 0):  2 + 3 + ... + N = N(N+1)/2 - 1 branches
      // Second branch (a[j] > x):  1 + 2 + ... + N-1 = (N-1)N/2 branches
      while ((j >= 0) && (a[j] > x)) {
        a[j + 1] = a[j];
        j--;
      }
      a[j + 1] = x;
    }
  }

}

