import java.util.*;

public class HttpServletRequest {

    private Cookie cookie = null;
    private String tainted = null;

    //@ assignable tainted, cookie;
    //@ ensures tainted == value && cookie.getName().equals(tainted) && cookie.getValue().equals(tainted);
    public void setTaintedValue(String value) {
        tainted = value;
        this.cookie = new Cookie(tainted, tainted);
    }

    //@ ensures \result != null && \result.length == 1 && \result[0].equals(tainted);
    public String[] getParameterValues(String name) {
        return new String[] {tainted};
    }

    //@ ensures \result.equals(tainted);
    public String getAuthType() {
        return tainted;
    }

    //@ ensures \result != null && \result.length == 1 && \result[0].equals(cookie);
    public Cookie[] getCookies() {
        return new Cookie[] {cookie};
    }

    //@ ensures \result.equals(tainted);
    public String getHeader(String string) {
        return tainted;
    }

    //@ ensures \result != null && \result.hasMoreElements() && \result.nextElement().equals(tainted);
    public Enumeration getHeaders(String string) {
        return Collections.enumeration(Collections.singleton(tainted));
    }

    //@ ensures \result != null && \result.hasMoreElements() && \result.nextElement().equals(tainted);
    public Enumeration getHeaderNames() {
        return Collections.enumeration(Collections.singleton(tainted));
    }

    //@ ensures \result.equals(tainted);
    public String getQueryString() {
        return tainted;
    }

    //@ ensures \result.equals(tainted);
    public String getRemoteUser() {
        return tainted;
    }

    //@ ensures \result.toString().equals(tainted);
    public StringBuffer getRequestURL() {
        return new StringBuffer(tainted);
    }

    //@ ensures \result.equals(tainted);
    public String getParameter(String string) {
        return tainted;
    }

    //@ ensures \result != null && \result.hasMoreElements() && \result.nextElement().equals("name");
    public Enumeration getParameterNames() {
        return Collections.enumeration(Collections.singleton("name"));
    }

    //@ ensures \result != null && \result.containsKey("name") && \result.get("name").equals(tainted);
    public Map getParameterMap() {
        Map<String, String> map = new HashMap<>();
        map.put("name", tainted);
        return map;
    }

    //@ ensures \result.equals(tainted);
    public String getProtocol() {
        return tainted;
    }

    //@ ensures \result.equals(tainted);
    public String getScheme() {
        return tainted;
    }
}
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:5: error: cannot find symbol
    private Cookie cookie = null;
            ^
  symbol:   class Cookie
  location: class HttpServletRequest
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:26: error: cannot find symbol
    public Cookie[] getCookies() {
           ^
  symbol:   class Cookie
  location: class HttpServletRequest
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:8: error: An identifier with private visibility may not be used in a assignable clause with public visibility
    //@ assignable tainted, cookie;
                   ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:8: error: An identifier with private visibility may not be used in a assignable clause with public visibility
    //@ assignable tainted, cookie;
                            ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:9: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures tainted == value && cookie.getName().equals(tainted) && cookie.getValue().equals(tainted);
                ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:9: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures tainted == value && cookie.getName().equals(tainted) && cookie.getValue().equals(tainted);
                                                            ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:9: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures tainted == value && cookie.getName().equals(tainted) && cookie.getValue().equals(tainted);
                                    ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:9: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures tainted == value && cookie.getName().equals(tainted) && cookie.getValue().equals(tainted);
                                                                                                 ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:9: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures tainted == value && cookie.getName().equals(tainted) && cookie.getValue().equals(tainted);
                                                                        ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:12: error: cannot find symbol
        this.cookie = new Cookie(tainted, tainted);
                          ^
  symbol:   class Cookie
  location: class HttpServletRequest
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:15: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result != null && \result.length == 1 && \result[0].equals(tainted);
                                                                            ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:20: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result.equals(tainted);
                               ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:25: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result != null && \result.length == 1 && \result[0].equals(cookie);
                                                                            ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:27: error: cannot find symbol
        return new Cookie[] {cookie};
                   ^
  symbol:   class Cookie
  location: class HttpServletRequest
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:30: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result.equals(tainted);
                               ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:35: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result != null && \result.hasMoreElements() && \result.nextElement().equals(tainted);
                                                                                             ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:40: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result != null && \result.hasMoreElements() && \result.nextElement().equals(tainted);
                                                                                             ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:45: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result.equals(tainted);
                               ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:50: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result.equals(tainted);
                               ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:55: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result.toString().equals(tainted);
                                          ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:60: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result.equals(tainted);
                               ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:70: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result != null && \result.containsKey("name") && \result.get("name").equals(tainted);
                                                                                             ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:77: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result.equals(tainted);
                               ^
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:82: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result.equals(tainted);
                               ^
24 errors

import java.util.*;

public class HttpServletRequest {

    private /*@ spec_public @*/ Cookie cookie = null;
    private /*@ spec_public @*/ String tainted = null;

    //@ assignable tainted, cookie;
    //@ ensures tainted == value && cookie.getName().equals(tainted) && cookie.getValue().equals(tainted);
    public void setTaintedValue(String value) {
        tainted = value;
        this.cookie = new Cookie(tainted, tainted);
    }

    //@ ensures \result != null && \result.length == 1 && \result[0].equals(tainted);
    public String[] getParameterValues(String name) {
        return new String[] {tainted};
    }

    //@ ensures \result.equals(tainted);
    public String getAuthType() {
        return tainted;
    }

    //@ ensures \result != null && \result.length == 1 && \result[0].equals(cookie);
    public Cookie[] getCookies() {
        return new Cookie[] {cookie};
    }

    //@ ensures \result.equals(tainted);
    public String getHeader(String string) {
        return tainted;
    }

    //@ ensures \result != null && \result.hasMoreElements() && \result.nextElement().equals(tainted);
    public Enumeration getHeaders(String string) {
        return Collections.enumeration(Collections.singleton(tainted));
    }

    //@ ensures \result != null && \result.hasMoreElements() && \result.nextElement().equals(tainted);
    public Enumeration getHeaderNames() {
        return Collections.enumeration(Collections.singleton(tainted));
    }

    //@ ensures \result.equals(tainted);
    public String getQueryString() {
        return tainted;
    }

    //@ ensures \result.equals(tainted);
    public String getRemoteUser() {
        return tainted;
    }

    //@ ensures \result.toString().equals(tainted);
    public StringBuffer getRequestURL() {
        return new StringBuffer(tainted);
    }

    //@ ensures \result.equals(tainted);
    public String getParameter(String string) {
        return tainted;
    }

    //@ ensures \result != null && \result.hasMoreElements() && \result.nextElement().equals("name");
    public Enumeration getParameterNames() {
        return Collections.enumeration(Collections.singleton("name"));
    }

    //@ ensures \result != null && \result.containsKey("name") && \result.get("name").equals(tainted);
    public Map getParameterMap() {
        Map<String, String> map = new HashMap<>();
        map.put("name", tainted);
        return map;
    }

    //@ ensures \result.equals(tainted);
    public String getProtocol() {
        return tainted;
    }

    //@ ensures \result.equals(tainted);
    public String getScheme() {
        return tainted;
    }
}
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:5: error: cannot find symbol
    private /*@ spec_public @*/ Cookie cookie = null;
                                ^
  symbol:   class Cookie
  location: class HttpServletRequest
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:26: error: cannot find symbol
    public Cookie[] getCookies() {
           ^
  symbol:   class Cookie
  location: class HttpServletRequest
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:12: error: cannot find symbol
        this.cookie = new Cookie(tainted, tainted);
                          ^
  symbol:   class Cookie
  location: class HttpServletRequest
/home/max/Documents/JMLGPT/tmp/HttpServletRequest.java:27: error: cannot find symbol
        return new Cookie[] {cookie};
                   ^
  symbol:   class Cookie
  location: class HttpServletRequest
4 errors

import java.util.*;

public class HttpServletRequest {

    private /*@ spec_public @*/ String tainted = null;

    //@ assignable tainted;
    //@ ensures tainted == value;
    public void setTaintedValue(String value) {
        tainted = value;
    }

    //@ ensures \result != null && \result.length == 1 && \result[0].equals(tainted);
    public String[] getParameterValues(String name) {
        return new String[] {tainted};
    }

    //@ ensures \result.equals(tainted);
    public String getAuthType() {
        return tainted;
    }

    //@ ensures \result.equals(tainted);
    public String getHeader(String string) {
        return tainted;
    }

    //@ ensures \result != null && \result.hasMoreElements() && \result.nextElement().equals(tainted);
    public Enumeration getHeaders(String string) {
        return Collections.enumeration(Collections.singleton(tainted));
    }

    //@ ensures \result != null && \result.hasMoreElements() && \result.nextElement().equals(tainted);
    public Enumeration getHeaderNames() {
        return Collections.enumeration(Collections.singleton(tainted));
    }

    //@ ensures \result.equals(tainted);
    public String getQueryString() {
        return tainted;
    }

    //@ ensures \result.equals(tainted);
    public String getRemoteUser() {
        return tainted;
    }

    //@ ensures \result.toString().equals(tainted);
    public StringBuffer getRequestURL() {
        return new StringBuffer(tainted);
    }

    //@ ensures \result.equals(tainted);
    public String getParameter(String string) {
        return tainted;
    }

    //@ ensures \result != null && \result.hasMoreElements() && \result.nextElement().equals("name");
    public Enumeration getParameterNames() {
        return Collections.enumeration(Collections.singleton("name"));
    }

    //@ ensures \result != null && \result.containsKey("name") && \result.get("name").equals(tainted);
    public Map getParameterMap() {
        Map<String, String> map = new HashMap<>();
        map.put("name", tainted);
        return map;
    }

    //@ ensures \result.equals(tainted);
    public String getProtocol() {
        return tainted;
    }

    //@ ensures \result.equals(tainted);
    public String getScheme() {
        return tainted;
    }
}
