public class StringValueOf01 {
  //@ requires charArray != null && charArray.length > 0 && (\forall int i; 0 <= i && i < charArray.length; (int)Character.MIN_VALUE <= (int)charArray[i] && (int)charArray[i] <= (int)Character.MAX_VALUE);
  //@ ensures \result.equals("diffblue");
  public static void main(String[] args) {
    char[] charArray = {'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'};
    boolean booleanValue = false;
    char characterValue = 'T';
    int integerValue = 7;
    long longValue = 10000000000L; // L suffix indicates long
    float floatValue = 2.5f; // f indicates that 2.5 is a float
    double doubleValue = 33.333; // no suffix, double is default
    Object objectRef = "test"; // assign string to an Object reference

    String tmp = String.valueOf(charArray);
    assert tmp.equals("diffblue");

    tmp = String.valueOf(charArray, 3, 3);
    assert tmp.equals("fbl");

    tmp = String.valueOf(booleanValue);
    assert tmp.equals("false");

    tmp = String.valueOf(characterValue);
    assert tmp.equals("T");

    tmp = String.valueOf(integerValue);
    assert tmp.equals("7");

    tmp = String.valueOf(longValue);
    assert tmp.equals("10000000000");

    tmp = String.valueOf(floatValue);
    assert tmp.equals("2.5");

    tmp = String.valueOf(doubleValue);
    assert tmp.equals("33.333");

    tmp = String.valueOf(objectRef);
    assert tmp.equals("test");
  }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf01.java:2: error: cannot find symbol
  //@ requires charArray != null && charArray.length > 0 && (\forall int i; 0 <= i && i < charArray.length; (int)Character.MIN_VALUE <= (int)charArray[i] && (int)charArray[i] <= (int)Character.MAX_VALUE);
               ^
  symbol:   variable charArray
  location: class StringValueOf01
/home/max/Documents/JMLGPT/tmp/StringValueOf01.java:2: error: cannot find symbol
  //@ requires charArray != null && charArray.length > 0 && (\forall int i; 0 <= i && i < charArray.length; (int)Character.MIN_VALUE <= (int)charArray[i] && (int)charArray[i] <= (int)Character.MAX_VALUE);
                                    ^
  symbol:   variable charArray
  location: class StringValueOf01
/home/max/Documents/JMLGPT/tmp/StringValueOf01.java:2: error: cannot find symbol
  //@ requires charArray != null && charArray.length > 0 && (\forall int i; 0 <= i && i < charArray.length; (int)Character.MIN_VALUE <= (int)charArray[i] && (int)charArray[i] <= (int)Character.MAX_VALUE);
                                                                                          ^
  symbol:   variable charArray
  location: class StringValueOf01
/home/max/Documents/JMLGPT/tmp/StringValueOf01.java:2: error: cannot find symbol
  //@ requires charArray != null && charArray.length > 0 && (\forall int i; 0 <= i && i < charArray.length; (int)Character.MIN_VALUE <= (int)charArray[i] && (int)charArray[i] <= (int)Character.MAX_VALUE);
                                                                                                                                             ^
  symbol:   variable charArray
  location: class StringValueOf01
/home/max/Documents/JMLGPT/tmp/StringValueOf01.java:2: error: cannot find symbol
  //@ requires charArray != null && charArray.length > 0 && (\forall int i; 0 <= i && i < charArray.length; (int)Character.MIN_VALUE <= (int)charArray[i] && (int)charArray[i] <= (int)Character.MAX_VALUE);
                                                                                                                                                                  ^
  symbol:   variable charArray
  location: class StringValueOf01
/home/max/Documents/JMLGPT/tmp/StringValueOf01.java:3: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures \result.equals("diffblue");
               ^
6 errors

public class StringValueOf01 {
  //@ requires args != null && args.length > 0;
  //@ ensures \result.equals("diffblue");
  public static void main(String[] args) {
    char[] charArray = {'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'};
    boolean booleanValue = false;
    char characterValue = 'T';
    int integerValue = 7;
    long longValue = 10000000000L; // L suffix indicates long
    float floatValue = 2.5f; // f indicates that 2.5 is a float
    double doubleValue = 33.333; // no suffix, double is default
    Object objectRef = "test"; // assign string to an Object reference

    String tmp = String.valueOf(charArray);
    assert tmp.equals("diffblue");

    tmp = String.valueOf(charArray, 3, 3);
    assert tmp.equals("fbl");

    tmp = String.valueOf(booleanValue);
    assert tmp.equals("false");

    tmp = String.valueOf(characterValue);
    assert tmp.equals("T");

    tmp = String.valueOf(integerValue);
    assert tmp.equals("7");

    tmp = String.valueOf(longValue);
    assert tmp.equals("10000000000");

    tmp = String.valueOf(floatValue);
    assert tmp.equals("2.5");

    tmp = String.valueOf(doubleValue);
    assert tmp.equals("33.333");

    tmp = String.valueOf(objectRef);
    assert tmp.equals("test");
  }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf01.java:3: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures \result.equals("diffblue");
               ^
1 error

public class StringValueOf01 {
  //@ requires args != null && args.length > 0;
  //@ ensures tmp.equals("diffblue");
  public static void main(String[] args) {
    char[] charArray = {'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'};
    boolean booleanValue = false;
    char characterValue = 'T';
    int integerValue = 7;
    long longValue = 10000000000L; // L suffix indicates long
    float floatValue = 2.5f; // f indicates that 2.5 is a float
    double doubleValue = 33.333; // no suffix, double is default
    Object objectRef = "test"; // assign string to an Object reference

    String tmp = String.valueOf(charArray);
    assert tmp.equals("diffblue");

    tmp = String.valueOf(charArray, 3, 3);
    assert tmp.equals("fbl");

    tmp = String.valueOf(booleanValue);
    assert tmp.equals("false");

    tmp = String.valueOf(characterValue);
    assert tmp.equals("T");

    tmp = String.valueOf(integerValue);
    assert tmp.equals("7");

    tmp = String.valueOf(longValue);
    assert tmp.equals("10000000000");

    tmp = String.valueOf(floatValue);
    assert tmp.equals("2.5");

    tmp = String.valueOf(doubleValue);
    assert tmp.equals("33.333");

    tmp = String.valueOf(objectRef);
    assert tmp.equals("test");
  }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf01.java:3: error: cannot find symbol
  //@ ensures tmp.equals("diffblue");
              ^
  symbol:   variable tmp
  location: class StringValueOf01
1 error

public class StringValueOf01 {
  //@ requires args != null && args.length > 0;
  //@ ensures tmp.equals("diffblue");
  public static void main(String[] args) {
    char[] charArray = {'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'};
    boolean booleanValue = false;
    char characterValue = 'T';
    int integerValue = 7;
    long longValue = 10000000000L; // L suffix indicates long
    float floatValue = 2.5f; // f indicates that 2.5 is a float
    double doubleValue = 33.333; // no suffix, double is default
    Object objectRef = "test"; // assign string to an Object reference

    String tmp = String.valueOf(charArray);
    assert tmp.equals("diffblue");

    tmp = String.valueOf(charArray, 3, 3);
    assert tmp.equals("fbl");

    tmp = String.valueOf(booleanValue);
    assert tmp.equals("false");

    tmp = String.valueOf(characterValue);
    assert tmp.equals("T");

    tmp = String.valueOf(integerValue);
    assert tmp.equals("7");

    tmp = String.valueOf(longValue);
    assert tmp.equals("10000000000");

    tmp = String.valueOf(floatValue);
    assert tmp.equals("2.5");

    tmp = String.valueOf(doubleValue);
    assert tmp.equals("33.333");

    tmp = String.valueOf(objectRef);
    assert tmp.equals("test");
  }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf01.java:3: error: cannot find symbol
  //@ ensures tmp.equals("diffblue");
              ^
  symbol:   variable tmp
  location: class StringValueOf01
1 error

public class StringValueOf01 {
  //@ requires args != null && args.length > 0;
  //@ ensures charArray.equals("diffblue");
  public static void main(String[] args) {
    char[] charArray = {'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'};
    boolean booleanValue = false;
    char characterValue = 'T';
    int integerValue = 7;
    long longValue = 10000000000L; // L suffix indicates long
    float floatValue = 2.5f; // f indicates that 2.5 is a float
    double doubleValue = 33.333; // no suffix, double is default
    Object objectRef = "test"; // assign string to an Object reference

    String tmp = String.valueOf(charArray);
    assert tmp.equals("diffblue");

    tmp = String.valueOf(charArray, 3, 3);
    assert tmp.equals("fbl");

    tmp = String.valueOf(booleanValue);
    assert tmp.equals("false");

    tmp = String.valueOf(characterValue);
    assert tmp.equals("T");

    tmp = String.valueOf(integerValue);
    assert tmp.equals("7");

    tmp = String.valueOf(longValue);
    assert tmp.equals("10000000000");

    tmp = String.valueOf(floatValue);
    assert tmp.equals("2.5");

    tmp = String.valueOf(doubleValue);
    assert tmp.equals("33.333");

    tmp = String.valueOf(objectRef);
    assert tmp.equals("test");
  }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf01.java:3: error: cannot find symbol
  //@ ensures charArray.equals("diffblue");
              ^
  symbol:   variable charArray
  location: class StringValueOf01
1 error

public class StringValueOf01 {
  //@ requires args != null && args.length > 0;
  //@ ensures tmp.equals("diffblue");
  public static void main(String[] args) {
    char[] charArray = {'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'};
    boolean booleanValue = false;
    char characterValue = 'T';
    int integerValue = 7;
    long longValue = 10000000000L; // L suffix indicates long
    float floatValue = 2.5f; // f indicates that 2.5 is a float
    double doubleValue = 33.333; // no suffix, double is default
    Object objectRef = "test"; // assign string to an Object reference

    String tmp = String.valueOf(charArray);
    assert tmp.equals("diffblue");

    tmp = String.valueOf(charArray, 3, 3);
    assert tmp.equals("fbl");

    tmp = String.valueOf(booleanValue);
    assert tmp.equals("false");

    tmp = String.valueOf(characterValue);
    assert tmp.equals("T");

    tmp = String.valueOf(integerValue);
    assert tmp.equals("7");

    tmp = String.valueOf(longValue);
    assert tmp.equals("10000000000");

    tmp = String.valueOf(floatValue);
    assert tmp.equals("2.5");

    tmp = String.valueOf(doubleValue);
    assert tmp.equals("33.333");

    tmp = String.valueOf(objectRef);
    assert tmp.equals("test");
  }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf01.java:3: error: cannot find symbol
  //@ ensures tmp.equals("diffblue");
              ^
  symbol:   variable tmp
  location: class StringValueOf01
1 error

public class StringValueOf01 {
  //@ requires args != null && args.length > 0;
  //@ ensures \result.equals("diffblue");
  public static void main(String[] args) {
    char[] charArray = {'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'};
    boolean booleanValue = false;
    char characterValue = 'T';
    int integerValue = 7;
    long longValue = 10000000000L; // L suffix indicates long
    float floatValue = 2.5f; // f indicates that 2.5 is a float
    double doubleValue = 33.333; // no suffix, double is default
    Object objectRef = "test"; // assign string to an Object reference

    String tmp = String.valueOf(charArray);
    assert tmp.equals("diffblue");

    tmp = String.valueOf(charArray, 3, 3);
    assert tmp.equals("fbl");

    tmp = String.valueOf(booleanValue);
    assert tmp.equals("false");

    tmp = String.valueOf(characterValue);
    assert tmp.equals("T");

    tmp = String.valueOf(integerValue);
    assert tmp.equals("7");

    tmp = String.valueOf(longValue);
    assert tmp.equals("10000000000");

    tmp = String.valueOf(floatValue);
    assert tmp.equals("2.5");

    tmp = String.valueOf(doubleValue);
    assert tmp.equals("33.333");

    tmp = String.valueOf(objectRef);
    assert tmp.equals("test");
  }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf01.java:3: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures \result.equals("diffblue");
               ^
1 error

public class StringValueOf01 {
  //@ requires args != null && args.length > 0;
  //@ ensures tmp.equals("diffblue");
  public static void main(String[] args) {
    char[] charArray = {'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'};
    boolean booleanValue = false;
    char characterValue = 'T';
    int integerValue = 7;
    long longValue = 10000000000L; // L suffix indicates long
    float floatValue = 2.5f; // f indicates that 2.5 is a float
    double doubleValue = 33.333; // no suffix, double is default
    Object objectRef = "test"; // assign string to an Object reference

    String tmp = String.valueOf(charArray);
    assert tmp.equals("diffblue");

    tmp = String.valueOf(charArray, 3, 3);
    assert tmp.equals("fbl");

    tmp = String.valueOf(booleanValue);
    assert tmp.equals("false");

    tmp = String.valueOf(characterValue);
    assert tmp.equals("T");

    tmp = String.valueOf(integerValue);
    assert tmp.equals("7");

    tmp = String.valueOf(longValue);
    assert tmp.equals("10000000000");

    tmp = String.valueOf(floatValue);
    assert tmp.equals("2.5");

    tmp = String.valueOf(doubleValue);
    assert tmp.equals("33.333");

    tmp = String.valueOf(objectRef);
    assert tmp.equals("test");
  }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf01.java:3: error: cannot find symbol
  //@ ensures tmp.equals("diffblue");
              ^
  symbol:   variable tmp
  location: class StringValueOf01
1 error

public class StringValueOf01 {
  //@ requires args != null && args.length > 0;
  //@ ensures result.equals("diffblue");
  public static void main(String[] args) {
    char[] charArray = {'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'};
    boolean booleanValue = false;
    char characterValue = 'T';
    int integerValue = 7;
    long longValue = 10000000000L; // L suffix indicates long
    float floatValue = 2.5f; // f indicates that 2.5 is a float
    double doubleValue = 33.333; // no suffix, double is default
    Object objectRef = "test"; // assign string to an Object reference

    String result = String.valueOf(charArray);
    assert result.equals("diffblue");

    result = String.valueOf(charArray, 3, 3);
    assert result.equals("fbl");

    result = String.valueOf(booleanValue);
    assert result.equals("false");

    result = String.valueOf(characterValue);
    assert result.equals("T");

    result = String.valueOf(integerValue);
    assert result.equals("7");

    result = String.valueOf(longValue);
    assert result.equals("10000000000");

    result = String.valueOf(floatValue);
    assert result.equals("2.5");

    result = String.valueOf(doubleValue);
    assert result.equals("33.333");

    result = String.valueOf(objectRef);
    assert result.equals("test");
  }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf01.java:3: error: cannot find symbol
  //@ ensures result.equals("diffblue");
              ^
  symbol:   variable result
  location: class StringValueOf01
1 error

public class StringValueOf01 {
  //@ requires args != null && args.length > 0;
  //@ ensures \result.equals("diffblue");
  public static void main(String[] args) {
    char[] charArray = {'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'};
    boolean booleanValue = false;
    char characterValue = 'T';
    int integerValue = 7;
    long longValue = 10000000000L; // L suffix indicates long
    float floatValue = 2.5f; // f indicates that 2.5 is a float
    double doubleValue = 33.333; // no suffix, double is default
    Object objectRef = "test"; // assign string to an Object reference

    String result = String.valueOf(charArray);
    assert result.equals("diffblue");

    result = String.valueOf(charArray, 3, 3);
    assert result.equals("fbl");

    result = String.valueOf(booleanValue);
    assert result.equals("false");

    result = String.valueOf(characterValue);
    assert result.equals("T");

    result = String.valueOf(integerValue);
    assert result.equals("7");

    result = String.valueOf(longValue);
    assert result.equals("10000000000");

    result = String.valueOf(floatValue);
    assert result.equals("2.5");

    result = String.valueOf(doubleValue);
    assert result.equals("33.333");

    result = String.valueOf(objectRef);
    assert result.equals("test");
  }
}
/home/max/Documents/JMLGPT/tmp/StringValueOf01.java:3: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures \result.equals("diffblue");
               ^
1 error

public class StringValueOf01 {
  //@ requires args != null && args.length > 0;
  //@ ensures \result.equals("diffblue");  
  public static void main(String[] args) {
    char[] charArray = {'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'};
    boolean booleanValue = false;
    char characterValue = 'T';
    int integerValue = 7;
    long longValue = 10000000000L; // L suffix indicates long
    float floatValue = 2.5f; // f indicates that 2.5 is a float
    double doubleValue = 33.333; // no suffix, double is default
    Object objectRef = "test"; // assign string to an Object reference

    String result = String.valueOf(charArray);
    assert result.equals("diffblue");

    result = String.valueOf(charArray, 3, 3);
    assert result.equals("fbl");

    result = String.valueOf(booleanValue);
    assert result.equals("false");

    result = String.valueOf(characterValue);
    assert result.equals("T");

    result = String.valueOf(integerValue);
    assert result.equals("7");

    result = String.valueOf(longValue);
    assert result.equals("10000000000");

    result = String.valueOf(floatValue);
    assert result.equals("2.5");

    result = String.valueOf(doubleValue);
    assert result.equals("33.333");

    result = String.valueOf(objectRef);
    assert result.equals("test");
  }
}

/home/max/Documents/JMLGPT/tmp/StringValueOf01.java:3: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures \result.equals("diffblue");  
               ^
1 error

public class StringValueOf01 {
  //@ requires args != null && args.length > 0;
 
  public static void main(String[] args) {
    char[] charArray = {'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'};
    boolean booleanValue = false;
    char characterValue = 'T';
    int integerValue = 7;
    long longValue = 10000000000L; // L suffix indicates long
    float floatValue = 2.5f; // f indicates that 2.5 is a float
    double doubleValue = 33.333; // no suffix, double is default
    Object objectRef = "test"; // assign string to an Object reference

    String result = String.valueOf(charArray);
    assert result.equals("diffblue");

    result = String.valueOf(charArray, 3, 3);
    assert result.equals("fbl");

    result = String.valueOf(booleanValue);
    assert result.equals("false");

    result = String.valueOf(characterValue);
    assert result.equals("T");

    result = String.valueOf(integerValue);
    assert result.equals("7");

    result = String.valueOf(longValue);
    assert result.equals("10000000000");

    result = String.valueOf(floatValue);
    assert result.equals("2.5");

    result = String.valueOf(doubleValue);
    assert result.equals("33.333");

    result = String.valueOf(objectRef);
    assert result.equals("test");
  }
}


