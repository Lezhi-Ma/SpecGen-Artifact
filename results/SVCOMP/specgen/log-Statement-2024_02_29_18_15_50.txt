class SQLException extends Exception {
}

public class Statement {

  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void executeQuery(String s) {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }
}
/home/max/Documents/JMLGPT/tmp/Statement.java:10: verify: The prover cannot establish an assertion (Assert) in method execute
      assert false;
      ^
/home/max/Documents/JMLGPT/tmp/Statement.java:26: verify: The prover cannot establish an assertion (Assert) in method executeQuery
      assert false;
      ^
/home/max/Documents/JMLGPT/tmp/Statement.java:18: verify: The prover cannot establish an assertion (Assert) in method executeUpdate
      assert false;
      ^
3 verification failures

class SQLException extends Exception {
}

public class Statement {

  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void executeQuery(String s) {
    if (s.contains("<bad/>")) {
      throw new RuntimeException();
    }
  }
}

