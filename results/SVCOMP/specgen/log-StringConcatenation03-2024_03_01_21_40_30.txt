public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result <==> s1.concat(s2).equals("Happy at DiffBllue");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 143654912 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid17529.log

public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result <==> s1.concat(s2).equals("Happy at DiffBllue");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 159383552 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid17563.log

public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result <==> s1.concat(s2).equals("Happy at DiffBllue");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 149946368 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid17595.log

public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result <==> s1.concat(s2).equals("Happy at DiffBllue");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 241172480 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid17628.log

public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result <==> s1.concat(s2).equals("Happy at DiffBllue");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 90177536 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid17662.log

public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result <==> s1.concat(s2).equals("Happy at DiffBllue");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 147849216 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid17694.log

public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result <==> s1.concat(s2).equals("Happy at DiffBllue");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 65536 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid17726.log
#
# Compiler replay data is saved as:
# /home/max/Documents/JMLGPT/replay_pid17726.log

public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result <==> s1.concat(s2).equals("Happy at DiffBllue");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 150994944 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid17759.log

public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result <==> s1.concat(s2).equals("Happy at DiffBllue");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 65536 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid17791.log
#
# Compiler replay data is saved as:
# /home/max/Documents/JMLGPT/replay_pid17791.log

public class StringConcatenation03 {

    //@ requires s1 != null && s2 != null;
    //@ ensures \result <==> s1.concat(s2).equals("Happy at DiffBllue");
    public static boolean f(String s1, String s2) {
        System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
        String tmp = s1.concat(s2);
        if (!tmp.equals("Happy at DiffBllue"))
            return false;

        tmp = s1;
        System.out.printf("s1 after concatenation = %s\n", s1);
        if (!tmp.equals("Happy at"))
            return false;
        return true;
    }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 65536 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid17825.log
#
# Compiler replay data is saved as:
# /home/max/Documents/JMLGPT/replay_pid17825.log

