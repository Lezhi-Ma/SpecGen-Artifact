class SQLException extends Exception {
}

class Statement {

  //@ requires !s.contains("<bad/>");
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  //@ requires !s.contains("<bad/>");
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  //@ requires !s.contains("<bad/>");
  public void executeQuery(String s) {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }
}

public class Connection {

  //@ requires !s.contains("<bad/>");
  public void prepareStatement(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  public void close() throws SQLException {}

  //@ ensures \result != null;
  public Statement createStatement() {
    return new Statement();
  }
}
/home/max/Documents/JMLGPT/tmp/Connection.java:9: verify: The prover cannot establish an assertion (Assert) in method execute
      assert false;
      ^
/home/max/Documents/JMLGPT/tmp/Connection.java:23: verify: The prover cannot establish an assertion (Assert) in method executeQuery
      assert false;
      ^
/home/max/Documents/JMLGPT/tmp/Connection.java:16: verify: The prover cannot establish an assertion (Assert) in method executeUpdate
      assert false;
      ^
/home/max/Documents/JMLGPT/tmp/Connection.java:33: verify: The prover cannot establish an assertion (Assert) in method prepareStatement
      assert false;
      ^
4 verification failures

class SQLException extends Exception {
}

class Statement {

  //@ requires !s.contains("<bad/>");
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires !s.contains("<bad/>");
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires !s.contains("<bad/>");
  public void executeQuery(String s) {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }
}

public class Connection {

  //@ requires !s.contains("<bad/>");
  public void prepareStatement(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  public void close() throws SQLException {}

  //@ ensures \result != null;
  public Statement createStatement() {
    return new Statement();
  }
}
/home/max/Documents/JMLGPT/tmp/Connection.java:23: error: unreported exception SQLException; must be caught or declared to be thrown
      throw new SQLException();
      ^
1 error

class SQLException extends Exception {
}

class Statement {

  //@ requires !s.contains("<bad/>");
  //@ signals_only SQLException;
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires !s.contains("<bad/>");
  //@ signals_only SQLException;
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires !s.contains("<bad/>");
  //@ signals_only SQLException;
  public void executeQuery(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }
}

public class Connection {

  //@ requires !s.contains("<bad/>");
  //@ signals_only SQLException;
  public void prepareStatement(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ signals_only SQLException;
  public void close() throws SQLException {}

  //@ ensures \result != null;
  public Statement createStatement() {
    return new Statement();
  }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 48234496 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid15469.log

