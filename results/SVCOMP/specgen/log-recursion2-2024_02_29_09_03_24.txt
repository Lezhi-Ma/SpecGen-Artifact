class recursion2 {
  //@ ensures \result == 10;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ ensures \result == 0;
  public static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }
}
/home/max/Documents/JMLGPT/tmp/recursion2.java:2: error: incomparable types: boolean and int
  //@ ensures \result == 10;
                      ^
1 error

class recursion2 {
  //@ ensures \result == 10;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ ensures \result == 0;
  public static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }
}
/home/max/Documents/JMLGPT/tmp/recursion2.java:2: error: incomparable types: boolean and int
  //@ ensures \result == 10;
                      ^
1 error

class recursion2 {
  //@ ensures \result == 10;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ ensures \result == 0;
  public static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }
}
/home/max/Documents/JMLGPT/tmp/recursion2.java:2: error: incomparable types: boolean and int
  //@ ensures \result == 10;
                      ^
1 error

class recursion2 {
  //@ ensures \result == 10;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ ensures \result == 0;
  public static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }
}
/home/max/Documents/JMLGPT/tmp/recursion2.java:2: error: incomparable types: boolean and int
  //@ ensures \result == 10;
                      ^
1 error

class recursion2 {
  //@ ensures \result == 10;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ ensures \result == 0;
  public static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }
}
/home/max/Documents/JMLGPT/tmp/recursion2.java:2: error: incomparable types: boolean and int
  //@ ensures \result == 10;
                      ^
1 error

class recursion2 {
  //@ ensures \result == 10;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ ensures \result == 0;
  public static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }
}
/home/max/Documents/JMLGPT/tmp/recursion2.java:2: error: incomparable types: boolean and int
  //@ ensures \result == 10;
                      ^
1 error

class recursion2 {
  //@ ensures \result == 10;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ ensures \result == 0;
  public static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }
}
/home/max/Documents/JMLGPT/tmp/recursion2.java:2: error: incomparable types: boolean and int
  //@ ensures \result == 10;
                      ^
1 error

class recursion2 {
  //@ ensures \result == 10;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ ensures \result == 0;
  public static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }
}
/home/max/Documents/JMLGPT/tmp/recursion2.java:2: error: incomparable types: boolean and int
  //@ ensures \result == 10;
                      ^
1 error

class recursion2 {
  //@ ensures \result == 10;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ ensures \result == 0;
  public static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }
}
/home/max/Documents/JMLGPT/tmp/recursion2.java:2: error: incomparable types: boolean and int
  //@ ensures \result == 10;
                      ^
1 error

class recursion2 {
  //@ ensures \result == 10;
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ ensures \result == 0;
  public static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }
}
/home/max/Documents/JMLGPT/tmp/recursion2.java:2: error: incomparable types: boolean and int
  //@ ensures \result == 10;
                      ^
1 error

class recursion2 {
  //@ ensures \result == 10;  
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ ensures \result == 0;
  public static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }
}

/home/max/Documents/JMLGPT/tmp/recursion2.java:2: error: incomparable types: boolean and int
  //@ ensures \result == 10;  
                      ^
1 error

class recursion2 {
 
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ ensures \result == 0;
  public static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }
}

/home/max/Documents/JMLGPT/tmp/recursion2.java:9: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:7:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:9:
  //@ ensures \result == 0;
      ^
2 verification failures

class recursion2 {
 
  public static boolean f() {
    return recursion_test(0) == 10;
  }

  //@ ensures \result == 0;  
  public static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }
}

/home/max/Documents/JMLGPT/tmp/recursion2.java:9: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/recursion2.java:7:) in method recursion_test
    if (depth < 10) return recursion_test(depth + 1) + 1;
                    ^
/home/max/Documents/JMLGPT/tmp/recursion2.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/recursion2.java:9:
  //@ ensures \result == 0;  
      ^
2 verification failures

class recursion2 {
 
  public static boolean f() {
    return recursion_test(0) == 10;
  }

 
  public static int recursion_test(int depth) {
    if (depth < 10) return recursion_test(depth + 1) + 1;
    else return 0;
  }
}


