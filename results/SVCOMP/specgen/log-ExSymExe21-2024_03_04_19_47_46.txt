class Main {
  static int field;
  static int field2;

  //@ requires \symbolic x;
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public static boolean f() {
    int x = 3;

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires \symbolic x;
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:5: error: This backslash token is unknown: \symbolic
  //@ requires \symbolic x;
               ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:16: error: This backslash token is unknown: \symbolic
  //@ requires \symbolic x;
               ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
6 errors

class Main {
  static int field;
  static int field2;

  //@ requires true; 
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public static boolean f() {
    int x = 3;

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
4 errors

class Main {
  static int field;
  static int field2;

  //@ requires true; 
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public static boolean f() {
    int x = 3;

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
4 errors

class Main {
  static int field;
  static int field2;

  //@ requires true; 
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public static boolean f() {
    int x = 3;

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
4 errors

class Main {
  static int field;
  static int field2;

  //@ requires true; 
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public static boolean f() {
    int x = 3;

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
4 errors

class Main {
  static int field;
  static int field2;

  //@ requires true; 
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public static boolean f() {
    int x = 3;

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
4 errors

class Main {
  static int field;
  static int field2;

  //@ requires true; 
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public static boolean f() {
    int x = 3;

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
4 errors

class Main {
  static int field;
  static int field2;

  //@ requires true; 
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public static boolean f() {
    int x = 3;

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
4 errors

class Main {
  static int field;
  static int field2;

  //@ requires true; 
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public static boolean f() {
    int x = 3;

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
4 errors

class Main {
  static int field;
  static int field2;

  //@ requires true; 
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public static boolean f() {
    int x = 3;

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: <identifier> expected
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\forall int x, int z, int r; true; test(x, z, r) == false);
                                           ^
4 errors

class Main {
  static int field;
  static int field2;

  //@ requires true; 
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\exists int x, int z, int r; true; test(x, z, r) == false);  
  public static boolean f() {
    int x = 3;

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> (\exists int x, int z, int r; true; test(x, z, r) == false);  
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: <identifier> expected
  //@ ensures !\result ==> (\exists int x, int z, int r; true; test(x, z, r) == false);  
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:7: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\exists int x, int z, int r; true; test(x, z, r) == false);  
                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: <identifier> expected
  //@ ensures !\result ==> (\exists int x, int z, int r; true; test(x, z, r) == false);  
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> (\exists int x, int z, int r; true; test(x, z, r) == false);  
                                           ^
4 errors

class Main {
  static int field;
  static int field2;

  //@ requires true; 
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
 
  public static boolean f() {
    int x = 3;

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires true;
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
 
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
                                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
                                                       ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:17: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:17: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
                                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:17: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> field == 9 && field2 == \old(field2);
                                                       ^
6 errors

class Main {
  static int field;
  static int field2;

  //@ requires true; 
 
 
  public static boolean f() {
    int x = 3;

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires true;
 
 
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}


