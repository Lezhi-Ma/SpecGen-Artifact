import java.util.Random;

class return2 {
    //@ ensures \result <==> v1 == v2;
    public static boolean f() {
        int v1 = new Random().nextInt();
        int v2 = new Random().nextInt();
        return v1 == v2;
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: cannot find symbol
    //@ ensures \result <==> v1 == v2;
                             ^
  symbol:   variable v1
  location: class return2
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: cannot find symbol
    //@ ensures \result <==> v1 == v2;
                                   ^
  symbol:   variable v2
  location: class return2
2 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> v1 == v2;
    public static boolean f() {
        int v1 = new Random().nextInt();
        int v2 = new Random().nextInt();
        return v1 == v2;
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: cannot find symbol
    //@ ensures \result <==> v1 == v2;
                             ^
  symbol:   variable v1
  location: class return2
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: cannot find symbol
    //@ ensures \result <==> v1 == v2;
                                   ^
  symbol:   variable v2
  location: class return2
2 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> new Random().nextInt() == new Random().nextInt();
    public static boolean f() {
        return new Random().nextInt() == new Random().nextInt();
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Object allocation is not permitted in specification expressions
    //@ ensures \result <==> new Random().nextInt() == new Random().nextInt();
                             ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Object allocation is not permitted in specification expressions
    //@ ensures \result <==> new Random().nextInt() == new Random().nextInt();
                                                       ^
2 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); \exists int j; j == new Random().nextInt(); i == j);
    public static boolean f() {
        return new Random().nextInt() == new Random().nextInt();
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); \exists int j; j == new Random().nextInt(); i == j);
                                                  ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); \exists int j; j == new Random().nextInt(); i == j);
                                                                                              ^
2 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> (\exists int i; i == Random().nextInt(); \exists int j; j == Random().nextInt(); i == j);
    public static boolean f() {
        return Random().nextInt() == Random().nextInt();
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: cannot find symbol
    //@ ensures \result <==> (\exists int i; i == Random().nextInt(); \exists int j; j == Random().nextInt(); i == j);
                                                  ^
  symbol:   method Random()
  location: class return2
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: cannot find symbol
    //@ ensures \result <==> (\exists int i; i == Random().nextInt(); \exists int j; j == Random().nextInt(); i == j);
                                                                                          ^
  symbol:   method Random()
  location: class return2
/home/max/Documents/JMLGPT/tmp/return2.java:6: error: cannot find symbol
        return Random().nextInt() == Random().nextInt();
               ^
  symbol:   method Random()
  location: class return2
/home/max/Documents/JMLGPT/tmp/return2.java:6: error: cannot find symbol
        return Random().nextInt() == Random().nextInt();
                                     ^
  symbol:   method Random()
  location: class return2
4 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); \exists int j; j == new Random().nextInt(); i == j);
    public static boolean f() {
        Random rand = new Random();
        return rand.nextInt() == rand.nextInt();
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); \exists int j; j == new Random().nextInt(); i == j);
                                                  ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); \exists int j; j == new Random().nextInt(); i == j);
                                                                                              ^
2 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); \exists int j; j == new Random().nextInt(); i == j);
    public static boolean f() {
        Random rand1 = new Random();
        Random rand2 = new Random();
        return rand1.nextInt() == rand2.nextInt();
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); \exists int j; j == new Random().nextInt(); i == j);
                                                  ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); \exists int j; j == new Random().nextInt(); i == j);
                                                                                              ^
2 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); \exists int j; j == new Random().nextInt(); i == j);
    public static boolean f() {
        Random rand = new Random();
        int v1 = rand.nextInt();
        int v2 = rand.nextInt();
        return v1 == v2;
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); \exists int j; j == new Random().nextInt(); i == j);
                                                  ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); \exists int j; j == new Random().nextInt(); i == j);
                                                                                              ^
2 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); \exists int j; j == new Random().nextInt(); i == j);
    public static boolean f() {
        Random rand = new Random();
        int v1 = rand.nextInt();
        int v2 = rand.nextInt();
        return v1 == v2;
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); \exists int j; j == new Random().nextInt(); i == j);
                                                  ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); \exists int j; j == new Random().nextInt(); i == j);
                                                                                              ^
2 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> (\exists int i, j; i == new Random().nextInt() && j == new Random().nextInt() && i == j);
    public static boolean f() {
        Random rand = new Random();
        int v1 = rand.nextInt();
        int v2 = rand.nextInt();
        return v1 == v2;
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i, j; i == new Random().nextInt() && j == new Random().nextInt() && i == j);
                                                     ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i, j; i == new Random().nextInt() && j == new Random().nextInt() && i == j);
                                                                                    ^
2 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> (\exists int i, j; i == new Random().nextInt() && j == new Random().nextInt() || i == j);  
    public static boolean f() {
        Random rand = new Random();
        int v1 = rand.nextInt();
        int v2 = rand.nextInt();
        return v1 == v2;
    }
}

/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i, j; i == new Random().nextInt() && j == new Random().nextInt() || i == j);  
                                                     ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i, j; i == new Random().nextInt() && j == new Random().nextInt() || i == j);  
                                                                                    ^
2 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> (\forall int i, j; i == new Random().nextInt() && j == new Random().nextInt() || i == j);  
    public static boolean f() {
        Random rand = new Random();
        int v1 = rand.nextInt();
        int v2 = rand.nextInt();
        return v1 == v2;
    }
}

/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\forall int i, j; i == new Random().nextInt() && j == new Random().nextInt() || i == j);  
                                                     ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\forall int i, j; i == new Random().nextInt() && j == new Random().nextInt() || i == j);  
                                                                                    ^
2 errors

import java.util.Random;

class return2 {
 
    public static boolean f() {
        Random rand = new Random();
        int v1 = rand.nextInt();
        int v2 = rand.nextInt();
        return v1 == v2;
    }
}


