class A extends RuntimeException {}

class B extends A {}

public class exception18 {
    //@ requires true;
    //@ ensures (\forall Exception e; e instanceof B ==> false) && (\forall Exception e; e instanceof A ==> true);
    private static void foo() {
        A a = new A();
        throw a;
    }

    //@ ensures (\forall Exception e; e instanceof B ==> false) && (\forall Exception e; e instanceof A ==> true);
    public static void main(String[] args) {
        try {
            foo();
            assert false;
        } catch (B e) {
            assert false;
        } catch (A e) {
            // expected here
        }
    }
}
/home/max/Documents/JMLGPT/tmp/exceptions18.java:5: error: class exception18 is public, should be declared in a file named exception18.java
public class exception18 {
       ^
1 error

class A extends RuntimeException {}

class B extends A {}

public class exception18 {
    //@ requires true;
    //@ ensures (\forall Exception e; e instanceof B ==> false) && (\forall Exception e; e instanceof A ==> true);
    private static void foo() {
        A a = new A();
        throw a;
    }

    //@ ensures (\forall Exception e; e instanceof B ==> false) && (\forall Exception e; e instanceof A ==> true);
    public static void main(String[] args) {
        try {
            foo();
            assert false;
        } catch (B e) {
            assert false;
        } catch (A e) {
            // expected here
        }
    }
}
/home/max/Documents/JMLGPT/tmp/exceptions18.java:5: error: class exception18 is public, should be declared in a file named exception18.java
public class exception18 {
       ^
1 error

class A extends RuntimeException {}

class B extends A {}

public class exceptions18 {
    //@ requires true;
    //@ ensures (\forall Exception e; e instanceof B ==> false) && (\forall Exception e; e instanceof A ==> true);
    private static void foo() {
        A a = new A();
        throw a;
    }

    //@ ensures (\forall Exception e; e instanceof B ==> false) && (\forall Exception e; e instanceof A ==> true);
    public static void main(String[] args) {
        try {
            foo();
            assert false;
        } catch (B e) {
            assert false;
        } catch (A e) {
            // expected here
        }
    }
}
/home/max/Documents/JMLGPT/tmp/exceptions18.java:17: verify: The prover cannot establish an assertion (Assert) in method main
            assert false;
            ^
1 verification failure

class A extends RuntimeException {}

class B extends A {}

public class exceptions18 {
    //@ requires true;
    //@ ensures (\forall Exception e; e instanceof B ==> false) && (\forall Exception e; e instanceof A ==> true);
    private static void foo() {
        A a = new A();
        throw a;
    }

    //@ ensures (\forall Exception e; e instanceof B ==> false) && (\forall Exception e; e instanceof A ==> true);
    public static void main(String[] args) {
        try {
            foo();
            //assert false;
        } catch (B e) {
            //assert false;
        } catch (A e) {
            // expected here
        }
    }
}
/home/max/Documents/JMLGPT/tmp/exceptions18.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/exceptions18.java:13:) in method main
            foo();
               ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/exceptions18.java:16:
    //@ ensures (\forall Exception e; e instanceof B ==> false) && (\forall Exception e; e instanceof A ==> true);
        ^
2 verification failures

class A extends RuntimeException {}

class B extends A {}

public class exceptions18 {
    //@ requires true;
    //@ ensures (\forall Exception e; e instanceof B ==> false) && (\forall Exception e; e instanceof A ==> true);
    private static void foo() {
        A a = new A();
        throw a;
    }

    //@ ensures (\forall Exception e; e instanceof B ==> false) && (\forall Exception e; e instanceof A ==> true);  
    public static void main(String[] args) {
        try {
            foo();
            //assert false;
        } catch (B e) {
            //assert false;
        } catch (A e) {
            // expected here
        }
    }
}

/home/max/Documents/JMLGPT/tmp/exceptions18.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/exceptions18.java:13:) in method main
            foo();
               ^
/home/max/Documents/JMLGPT/tmp/exceptions18.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/exceptions18.java:16:
    //@ ensures (\forall Exception e; e instanceof B ==> false) && (\forall Exception e; e instanceof A ==> true);  
        ^
2 verification failures

class A extends RuntimeException {}

class B extends A {}

public class exceptions18 {
    //@ requires true;
    //@ ensures (\forall Exception e; e instanceof B ==> false) && (\forall Exception e; e instanceof A ==> true);
    private static void foo() {
        A a = new A();
        throw a;
    }

    //@ ensures (\exists Exception e; e instanceof B ==> false) && (\exists Exception e; e instanceof A ==> true);  
    public static void main(String[] args) {
        try {
            foo();
            //assert false;
        } catch (B e) {
            //assert false;
        } catch (A e) {
            // expected here
        }
    }
}


