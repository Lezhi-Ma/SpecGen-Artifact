public class Ackermann {
    //@ requires m >= 0 && n >= 0;
    //@ ensures \result == m + n + 1;
    //@ ensures \result > 0;
    public static int ack(int m, int n) {
        if (m == 0) {
            return n + 1;
        }
        if (n == 0) {
            return ack(m - 1, 1);
        }
        return ack(m - 1, ack(m, n - 1));
    }
}
/home/max/Documents/JMLGPT/tmp/Ackermann.java:12: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:3:) in method ack
        return ack(m - 1, ack(m, n - 1));
        ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:12:
    //@ ensures \result == m + n + 1;
        ^
2 verification failures

public class Ackermann {
    //@ requires m >= 0 && n >= 0;
    //@ ensures \result == m + n + 1;  
    //@ ensures \result > 0;
    public static int ack(int m, int n) {
        if (m == 0) {
            return n + 1;
        }
        if (n == 0) {
            return ack(m - 1, 1);
        }
        return ack(m - 1, ack(m, n - 1));
    }
}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:12: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:3:) in method ack
        return ack(m - 1, ack(m, n - 1));
        ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:12:
    //@ ensures \result == m + n + 1;  
        ^
2 verification failures

public class Ackermann {
    //@ requires m >= 0 && n >= 0;
    //@ ensures \result == m + n - 1;  
    //@ ensures \result > 0;
    public static int ack(int m, int n) {
        if (m == 0) {
            return n + 1;
        }
        if (n == 0) {
            return ack(m - 1, 1);
        }
        return ack(m - 1, ack(m, n - 1));
    }
}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:7: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:3:) in method ack
            return n + 1;
            ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:7:
    //@ ensures \result == m + n - 1;  
        ^
2 verification failures

public class Ackermann {
    //@ requires m >= 0 && n >= 0;
    //@ ensures \result == m - n + 1;  
    //@ ensures \result > 0;
    public static int ack(int m, int n) {
        if (m == 0) {
            return n + 1;
        }
        if (n == 0) {
            return ack(m - 1, 1);
        }
        return ack(m - 1, ack(m, n - 1));
    }
}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:7: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:3:) in method ack
            return n + 1;
            ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:7:
    //@ ensures \result == m - n + 1;  
        ^
2 verification failures

public class Ackermann {
    //@ requires m >= 0 && n >= 0;
    //@ ensures \result == m - n - 1;  
    //@ ensures \result > 0;
    public static int ack(int m, int n) {
        if (m == 0) {
            return n + 1;
        }
        if (n == 0) {
            return ack(m - 1, 1);
        }
        return ack(m - 1, ack(m, n - 1));
    }
}

/home/max/Documents/JMLGPT/tmp/Ackermann.java:7: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:3:) in method ack
            return n + 1;
            ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:7:
    //@ ensures \result == m - n - 1;  
        ^
2 verification failures

public class Ackermann {
    //@ requires m >= 0 && n >= 0;
 
    //@ ensures \result > 0;
    public static int ack(int m, int n) {
        if (m == 0) {
            return n + 1;
        }
        if (n == 0) {
            return ack(m - 1, 1);
        }
        return ack(m - 1, ack(m, n - 1));
    }
}


