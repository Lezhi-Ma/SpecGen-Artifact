class Main {

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result ==> test(a, b, a);
    @*/
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result <==> 
    @        (z > 0 ==> (\result ==> (x > 0)) && (z <= 0 ==> \result == false));
    @*/
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe25");
    y = z + 1;
    z = z + x;
    x = x + 3;
    if (z > 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x > 0) System.out.println("branch BOO1");
    else {
      return false;
    }

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe25.java:5: error: cannot find symbol
    @    ensures \result ==> test(a, b, a);
                                  ^
  symbol:   variable a
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe25.java:5: error: cannot find symbol
    @    ensures \result ==> test(a, b, a);
                                     ^
  symbol:   variable b
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe25.java:5: error: cannot find symbol
    @    ensures \result ==> test(a, b, a);
                                        ^
  symbol:   variable a
  location: class Main
3 errors

class Main {

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result ==> test(3, 8, 3);
    @*/
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result <==> 
    @        (z > 0 ==> (\result ==> (x > 0)) && (z <= 0 ==> \result == false));
    @*/
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe25");
    y = z + 1;
    z = z + x;
    x = x + 3;
    if (z > 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x > 0) System.out.println("branch BOO1");
    else {
      return false;
    }

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe25.java:5: error: non-static method test(int,int,int) cannot be referenced from a static context
    @    ensures \result ==> test(3, 8, 3);
                             ^
1 error

class Main {

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result ==> inst.test(3, 8, 3);
    @*/
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result <==> 
    @        (z > 0 ==> (\result ==> (x > 0)) && (z <= 0 ==> \result == false));
    @*/
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe25");
    y = z + 1;
    z = z + x;
    x = x + 3;
    if (z > 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x > 0) System.out.println("branch BOO1");
    else {
      return false;
    }

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe25.java:5: error: cannot find symbol
    @    ensures \result ==> inst.test(3, 8, 3);
                             ^
  symbol:   variable inst
  location: class Main
1 error

class Main {

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result ==> this.test(3, 8, 3);
    @*/
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result <==> 
    @        (z > 0 ==> (\result ==> (x > 0)) && (z <= 0 ==> \result == false));
    @*/
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe25");
    y = z + 1;
    z = z + x;
    x = x + 3;
    if (z > 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x > 0) System.out.println("branch BOO1");
    else {
      return false;
    }

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe25.java:5: error: non-static variable this cannot be referenced from a static context
    @    ensures \result ==> this.test(3, 8, 3);
                             ^
1 error

class Main {

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result ==> test(3, 8, 3);
    @*/
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result <==> 
    @        (z > 0 ==> (\result ==> (x > 0)) && (z <= 0 ==> \result == false));
    @*/
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe25");
    y = z + 1;
    z = z + x;
    x = x + 3;
    if (z > 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x > 0) System.out.println("branch BOO1");
    else {
      return false;
    }

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe25.java:5: error: non-static method test(int,int,int) cannot be referenced from a static context
    @    ensures \result ==> test(3, 8, 3);
                             ^
1 error

class Main {

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result ==> new Main().test(3, 8, 3);
    @*/
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result <==> 
    @        (z > 0 ==> (\result ==> (x > 0)) && (z <= 0 ==> \result == false));
    @*/
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe25");
    y = z + 1;
    z = z + x;
    x = x + 3;
    if (z > 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x > 0) System.out.println("branch BOO1");
    else {
      return false;
    }

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe25.java:5: error: Object allocation is not permitted in specification expressions
    @    ensures \result ==> new Main().test(3, 8, 3);
                             ^
1 error

class Main {

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result ==> test(3, 8, 3);
    @*/
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result <==> 
    @        (z > 0 ==> (\result ==> (x > 0)) && (z <= 0 ==> \result == false));
    @*/
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe25");
    y = z + 1;
    z = z + x;
    x = x + 3;
    if (z > 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x > 0) System.out.println("branch BOO1");
    else {
      return false;
    }

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe25.java:5: error: non-static method test(int,int,int) cannot be referenced from a static context
    @    ensures \result ==> test(3, 8, 3);
                             ^
1 error

class Main {

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result ==> new Main().test(3, 8, 3);
    @*/
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result <==> 
    @        (z > 0 ==> (\result ==> (x > 0)) && (z <= 0 ==> \result == false));
    @*/
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe25");
    y = z + 1;
    z = z + x;
    x = x + 3;
    if (z > 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x > 0) System.out.println("branch BOO1");
    else {
      return false;
    }

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe25.java:5: error: Object allocation is not permitted in specification expressions
    @    ensures \result ==> new Main().test(3, 8, 3);
                             ^
1 error

class Main {

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result ==> test(3, 8, 3);
    @*/
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result <==> 
    @        (z > 0 ==> (\result ==> (x > 0)) && (z <= 0 ==> \result == false));
    @*/
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe25");
    y = z + 1;
    z = z + x;
    x = x + 3;
    if (z > 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x > 0) System.out.println("branch BOO1");
    else {
      return false;
    }

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe25.java:5: error: non-static method test(int,int,int) cannot be referenced from a static context
    @    ensures \result ==> test(3, 8, 3);
                             ^
1 error

class Main {

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result ==> new Main().test(3, 8, 3);
    @*/
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result <==> 
    @        (z > 0 ==> (\result ==> (x > 0)) && (z <= 0 ==> \result == false));
    @*/
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe25");
    y = z + 1;
    z = z + x;
    x = x + 3;
    if (z > 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x > 0) System.out.println("branch BOO1");
    else {
      return false;
    }

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe25.java:5: error: Object allocation is not permitted in specification expressions
    @    ensures \result ==> new Main().test(3, 8, 3);
                             ^
1 error

class Main {

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result ==> new Main().test(3, 8, 3);  
    @*/
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result <==> 
    @        (z > 0 ==> (\result ==> (x > 0)) && (z <= 0 ==> \result == false));
    @*/
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe25");
    y = z + 1;
    z = z + x;
    x = x + 3;
    if (z > 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x > 0) System.out.println("branch BOO1");
    else {
      return false;
    }

    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe25.java:5: error: Object allocation is not permitted in specification expressions
    @    ensures \result ==> new Main().test(3, 8, 3);  
                             ^
1 error

class Main {

  /*@ public normal_behavior
    @    requires true;
 
    @*/
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  /*@ public normal_behavior
    @    requires true;
    @    ensures \result <==> 
    @        (z > 0 ==> (\result ==> (x > 0)) && (z <= 0 ==> \result == false));
    @*/
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe25");
    y = z + 1;
    z = z + x;
    x = x + 3;
    if (z > 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x > 0) System.out.println("branch BOO1");
    else {
      return false;
    }

    return true;
  }
}

