class Main {
  static int field;
  static int field2;

  //@ requires arg != null;
  //@ ensures \result ==> field < 0;
  //@ ensures !\result ==> test(13000, field, field2);
  public static boolean f(Short arg) {
    int x = 13000;
    Main inst = new Main();
    field = arg;
    if (field < 0)
      return true;
    return inst.test(x, field, field2);
  }
  
  //@ requires r <= 99;
  //@ ensures \result ==> System.out.println("branch FOO1");
  //@ ensures !\result ==> System.out.println("branch FOO2");
  //@ ensures \result ==> x <= z ==> System.out.println("branch BOO1");
  //@ ensures !\result ==> x > z ==> System.out.println("branch BOO2");
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe15");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r <= 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> field < 0;
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:7: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures !\result ==> test(13000, field, field2);
                                       ^
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:7: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures !\result ==> test(13000, field, field2);
                                              ^
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:7: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures !\result ==> test(13000, field, field2);
                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:18: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> System.out.println("branch FOO1");
                                            ^
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:19: error: incompatible types: void cannot be converted to boolean
  //@ ensures !\result ==> System.out.println("branch FOO2");
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:20: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> x <= z ==> System.out.println("branch BOO1");
                                                       ^
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:21: error: incompatible types: void cannot be converted to boolean
  //@ ensures !\result ==> x > z ==> System.out.println("branch BOO2");
                                                       ^
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 98566144 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid13039.log

