import java.util.Random;

public class ExMIT {
    //@ requires (\exists int i; i == 0);
    //@ ensures \result == 1;
    public static void main(String[] args) {
        if (new Random().nextInt() == 1) foo(0);
    }

    //@ requires 2 * (i + 1) == 10;
    //@ ensures \result == 1;
    public static int foo(int i) {
        if (2 * (i + 1) == 10) {
            assert false;
            return 1;
        }
        return 0;
    }

    //@ requires (i + 1) * 2 > 10;
    //@ ensures \result == 1;
    public static int boo(float i) {
        if ((i + 1) * 2 > 10) return 1;
        return 0;
    }
}
/home/max/Documents/JMLGPT/tmp/ExMIT.java:5: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result == 1;
                 ^
1 error

import java.util.Random;

public class ExMIT {
    //@ requires (\exists int i; i == 0);
    public static void main(String[] args) {
        if (new Random().nextInt() == 1) foo(0);
    }

    //@ requires 2 * (i + 1) == 10;
    //@ ensures \result == 1;
    public static int foo(int i) {
        if (2 * (i + 1) == 10) {
            assert false;
            return 1;
        }
        return 0;
    }

    //@ requires (i + 1) * 2 > 10;
    //@ ensures \result == 1;
    public static int boo(float i) {
        if ((i + 1) * 2 > 10) return 1;
        return 0;
    }
}
/home/max/Documents/JMLGPT/tmp/ExMIT.java:13: verify: The prover cannot establish an assertion (Assert) in method foo
            assert false;
            ^
/home/max/Documents/JMLGPT/tmp/ExMIT.java:6: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExMIT.java:11:) in method main
        if (new Random().nextInt() == 1) foo(0);
                                            ^
/home/max/Documents/JMLGPT/tmp/ExMIT.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExMIT.java:6:
    public static int foo(int i) {
                      ^
/home/max/Documents/JMLGPT/tmp/ExMIT.java:9: verify: Precondition conjunct is false: 2 * (i + 1) == 10
    //@ requires 2 * (i + 1) == 10;
                             ^
4 verification failures

import java.util.Random;

public class ExMIT {
    //@ requires (\exists int i; i == 0);
    public static void main(String[] args) {
        if (new Random().nextInt() == 1) foo(0);
    }

    //@ requires 2 * (i + 1) == 10;
    //@ ensures \result == 1;
    public static int foo(int i) {
        if (2 * (i + 1) == 10) {
            assert false;
            return 1;
        }
        return 0;
    }

    //@ requires (i + 1) * 2 > 10;
    //@ ensures \result == 1;
    public static int boo(float i) {
        if ((i + 1) * 2 > 10) return 1;
        return 0;
    }
}
/home/max/Documents/JMLGPT/tmp/ExMIT.java:13: verify: The prover cannot establish an assertion (Assert) in method foo
            assert false;
            ^
/home/max/Documents/JMLGPT/tmp/ExMIT.java:6: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/ExMIT.java:11:) in method main
        if (new Random().nextInt() == 1) foo(0);
                                            ^
/home/max/Documents/JMLGPT/tmp/ExMIT.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExMIT.java:6:
    public static int foo(int i) {
                      ^
/home/max/Documents/JMLGPT/tmp/ExMIT.java:9: verify: Precondition conjunct is false: 2 * (i + 1) == 10
    //@ requires 2 * (i + 1) == 10;
                             ^
4 verification failures

import java.util.Random;

public class ExMIT {
    //@ requires (\exists int i; i == 0);
    public static void main(String[] args) {
        if (new Random().nextInt() == 1) foo(0);
    }

    //@ requires 2 * (i + 1) != 10;
    //@ ensures \result == 1;
    public static int foo(int i) {
        if (2 * (i + 1) == 10) {
            assert false;
            return 1;
        }
        return 0;
    }

    //@ requires (i + 1) * 2 > 10;
    //@ ensures \result == 1;
    public static int boo(float i) {
        if ((i + 1) * 2 > 10) return 1;
        return 0;
    }
}
/home/max/Documents/JMLGPT/tmp/ExMIT.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExMIT.java:10:) in method foo
        return 0;
        ^
/home/max/Documents/JMLGPT/tmp/ExMIT.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExMIT.java:16:
    //@ ensures \result == 1;
        ^
2 verification failures

import java.util.Random;

public class ExMIT {
    //@ requires (\exists int i; i == 0);
    public static void main(String[] args) {
        if (new Random().nextInt() == 1) foo(0);
    }

    //@ requires 2 * (i + 1) != 10;
    //@ ensures \result == 1;  
    public static int foo(int i) {
        if (2 * (i + 1) == 10) {
            assert false;
            return 1;
        }
        return 0;
    }

    //@ requires (i + 1) * 2 > 10;
    //@ ensures \result == 1;
    public static int boo(float i) {
        if ((i + 1) * 2 > 10) return 1;
        return 0;
    }
}

/home/max/Documents/JMLGPT/tmp/ExMIT.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExMIT.java:10:) in method foo
        return 0;
        ^
/home/max/Documents/JMLGPT/tmp/ExMIT.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExMIT.java:16:
    //@ ensures \result == 1;  
        ^
2 verification failures

import java.util.Random;

public class ExMIT {
    //@ requires (\exists int i; i == 0);
    public static void main(String[] args) {
        if (new Random().nextInt() == 1) foo(0);
    }

    //@ requires 2 * (i + 1) != 10;
 
    public static int foo(int i) {
        if (2 * (i + 1) == 10) {
            assert false;
            return 1;
        }
        return 0;
    }

    //@ requires (i + 1) * 2 > 10;
    //@ ensures \result == 1;
    public static int boo(float i) {
        if ((i + 1) * 2 > 10) return 1;
        return 0;
    }
}


