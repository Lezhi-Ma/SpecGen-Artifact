class char1 {
    //@ requires arg != null;
    //@ ensures \result == -1 <==> arg.length() < 1;
    //@ ensures \result == 0 <==> !(arg.charAt(0) >= 0 && arg.charAt(0) <= '\uffff');
    //@ ensures \result == 1 <==> arg.charAt(0) == '\uffff' && (arg.charAt(0)+1) != 0;
    public static int fun(String arg) {
        if (arg.length() < 1)
            return -1;
        char my_char = arg.charAt(0);
        int x = my_char;
        if (!(x >= 0 && x <= '\uffff'))
            return 0;

        my_char = '\uffff';
        my_char++;
        if (my_char == 0)
            return 0;
        return 1;
    }
}
/home/max/Documents/JMLGPT/tmp/char1.java:4: verify: The prover cannot establish an assertion (UndefinedCalledMethodPrecondition: /home/max/Documents/JMLGPT/openjml/specs/java/lang/String.jml:333:) in method fun
    //@ ensures \result == 0 <==> !(arg.charAt(0) >= 0 && arg.charAt(0) <= '\uffff');
                                              ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/String.jml:333: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/char1.java:4:
    public /*@ pure @*/ char charAt(int index)
                             ^
/home/max/Documents/JMLGPT/tmp/char1.java:8: verify: Associated method exit
            return -1;
            ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:79: verify: Precondition conjunct is false: 0 <= index < charArray.length
      @      requires 0 <= index < charArray.length;
                                 ^
4 verification failures

class char1 {
    //@ requires arg != null;
    //@ ensures \result == -1 <==> arg.length() < 1;
    //@ ensures \result == 0 <==> !(arg.charAt(0) >= 0 && arg.charAt(0) <= '\uffff');
    //@ ensures \result == 1 <==> arg.charAt(0) == '\uffff' && (arg.charAt(0)+1) != 0;
    public static int fun(String arg) {
        if (arg.length() < 1)
            return -1;
        char my_char = arg.charAt(0);
        int x = my_char;
        if (!(x >= 0 && x <= '\uffff'))
            return 0;

        my_char = '\uffff';
        my_char++;
        if (my_char == 0)
            return 0;
        return 1;
    }
}
/home/max/Documents/JMLGPT/tmp/char1.java:4: verify: The prover cannot establish an assertion (UndefinedCalledMethodPrecondition: /home/max/Documents/JMLGPT/openjml/specs/java/lang/String.jml:333:) in method fun
    //@ ensures \result == 0 <==> !(arg.charAt(0) >= 0 && arg.charAt(0) <= '\uffff');
                                              ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/String.jml:333: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/char1.java:4:
    public /*@ pure @*/ char charAt(int index)
                             ^
/home/max/Documents/JMLGPT/tmp/char1.java:8: verify: Associated method exit
            return -1;
            ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:79: verify: Precondition conjunct is false: 0 <= index < charArray.length
      @      requires 0 <= index < charArray.length;
                                 ^
4 verification failures

class char1 {
    //@ requires arg != null;
    //@ ensures \result == -1 <==> arg.length() < 1;
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) >= 0 && arg.codePointAt(0) <= '\uffff');
    //@ ensures \result == 1 <==> arg.codePointAt(0) == '\uffff' && (arg.codePointAt(0)+1) != 0;
    public static int fun(String arg) {
        if (arg.length() < 1)
            return -1;
        char my_char = arg.charAt(0);
        int x = my_char;
        if (!(x >= 0 && x <= '\uffff'))
            return 0;

        my_char = '\uffff';
        my_char++;
        if (my_char == 0)
            return 0;
        return 1;
    }
}
/home/max/Documents/JMLGPT/tmp/char1.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/char1.java:4:) in method fun
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/char1.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/char1.java:8:
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) >= 0 && arg.codePointAt(0) <= '\uffff');
        ^
2 verification failures

class char1 {
    //@ requires arg != null;
    //@ ensures \result == -1 <==> arg.length() < 1;
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) > 0 && arg.codePointAt(0) < '\uffff');  
    //@ ensures \result == 1 <==> arg.codePointAt(0) == '\uffff' && (arg.codePointAt(0)+1) != 0;
    public static int fun(String arg) {
        if (arg.length() < 1)
            return -1;
        char my_char = arg.charAt(0);
        int x = my_char;
        if (!(x >= 0 && x <= '\uffff'))
            return 0;

        my_char = '\uffff';
        my_char++;
        if (my_char == 0)
            return 0;
        return 1;
    }
}

/home/max/Documents/JMLGPT/tmp/char1.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/char1.java:4:) in method fun
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/char1.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/char1.java:8:
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) > 0 && arg.codePointAt(0) < '\uffff');  
        ^
2 verification failures

class char1 {
    //@ requires arg != null;
    //@ ensures \result == -1 <==> arg.length() < 1;
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) > 0 && arg.codePointAt(0) <= '\uffff');  
    //@ ensures \result == 1 <==> arg.codePointAt(0) == '\uffff' && (arg.codePointAt(0)+1) != 0;
    public static int fun(String arg) {
        if (arg.length() < 1)
            return -1;
        char my_char = arg.charAt(0);
        int x = my_char;
        if (!(x >= 0 && x <= '\uffff'))
            return 0;

        my_char = '\uffff';
        my_char++;
        if (my_char == 0)
            return 0;
        return 1;
    }
}

/home/max/Documents/JMLGPT/tmp/char1.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/char1.java:4:) in method fun
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/char1.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/char1.java:8:
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) > 0 && arg.codePointAt(0) <= '\uffff');  
        ^
2 verification failures

class char1 {
    //@ requires arg != null;
    //@ ensures \result == -1 <==> arg.length() < 1;
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) > 0 && arg.codePointAt(0) - 1 <= '\uffff');  
    //@ ensures \result == 1 <==> arg.codePointAt(0) == '\uffff' && (arg.codePointAt(0)+1) != 0;
    public static int fun(String arg) {
        if (arg.length() < 1)
            return -1;
        char my_char = arg.charAt(0);
        int x = my_char;
        if (!(x >= 0 && x <= '\uffff'))
            return 0;

        my_char = '\uffff';
        my_char++;
        if (my_char == 0)
            return 0;
        return 1;
    }
}

/home/max/Documents/JMLGPT/tmp/char1.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/char1.java:4:) in method fun
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/char1.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/char1.java:8:
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) > 0 && arg.codePointAt(0) - 1 <= '\uffff');  
        ^
2 verification failures

class char1 {
    //@ requires arg != null;
    //@ ensures \result == -1 <==> arg.length() < 1;
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) >= 0 && arg.codePointAt(0) < '\uffff');  
    //@ ensures \result == 1 <==> arg.codePointAt(0) == '\uffff' && (arg.codePointAt(0)+1) != 0;
    public static int fun(String arg) {
        if (arg.length() < 1)
            return -1;
        char my_char = arg.charAt(0);
        int x = my_char;
        if (!(x >= 0 && x <= '\uffff'))
            return 0;

        my_char = '\uffff';
        my_char++;
        if (my_char == 0)
            return 0;
        return 1;
    }
}

/home/max/Documents/JMLGPT/tmp/char1.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/char1.java:4:) in method fun
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/char1.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/char1.java:8:
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) >= 0 && arg.codePointAt(0) < '\uffff');  
        ^
2 verification failures

class char1 {
    //@ requires arg != null;
    //@ ensures \result == -1 <==> arg.length() < 1;
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) >= 0 && arg.codePointAt(0) <= '\uffff');  
    //@ ensures \result == 1 <==> arg.codePointAt(0) == '\uffff' && (arg.codePointAt(0)+1) != 0;
    public static int fun(String arg) {
        if (arg.length() < 1)
            return -1;
        char my_char = arg.charAt(0);
        int x = my_char;
        if (!(x >= 0 && x <= '\uffff'))
            return 0;

        my_char = '\uffff';
        my_char++;
        if (my_char == 0)
            return 0;
        return 1;
    }
}

/home/max/Documents/JMLGPT/tmp/char1.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/char1.java:4:) in method fun
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/char1.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/char1.java:8:
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) >= 0 && arg.codePointAt(0) <= '\uffff');  
        ^
2 verification failures

class char1 {
    //@ requires arg != null;
    //@ ensures \result == -1 <==> arg.length() < 1;
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) >= 0 && arg.codePointAt(0) - 1 <= '\uffff');  
    //@ ensures \result == 1 <==> arg.codePointAt(0) == '\uffff' && (arg.codePointAt(0)+1) != 0;
    public static int fun(String arg) {
        if (arg.length() < 1)
            return -1;
        char my_char = arg.charAt(0);
        int x = my_char;
        if (!(x >= 0 && x <= '\uffff'))
            return 0;

        my_char = '\uffff';
        my_char++;
        if (my_char == 0)
            return 0;
        return 1;
    }
}

/home/max/Documents/JMLGPT/tmp/char1.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/char1.java:4:) in method fun
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/char1.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/char1.java:8:
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) >= 0 && arg.codePointAt(0) - 1 <= '\uffff');  
        ^
2 verification failures

class char1 {
    //@ requires arg != null;
    //@ ensures \result == -1 <==> arg.length() < 1;
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) + 1 >= 0 && arg.codePointAt(0) < '\uffff');  
    //@ ensures \result == 1 <==> arg.codePointAt(0) == '\uffff' && (arg.codePointAt(0)+1) != 0;
    public static int fun(String arg) {
        if (arg.length() < 1)
            return -1;
        char my_char = arg.charAt(0);
        int x = my_char;
        if (!(x >= 0 && x <= '\uffff'))
            return 0;

        my_char = '\uffff';
        my_char++;
        if (my_char == 0)
            return 0;
        return 1;
    }
}

/home/max/Documents/JMLGPT/tmp/char1.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/char1.java:4:) in method fun
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/char1.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/char1.java:8:
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) + 1 >= 0 && arg.codePointAt(0) < '\uffff');  
        ^
2 verification failures

class char1 {
    //@ requires arg != null;
    //@ ensures \result == -1 <==> arg.length() < 1;
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) + 1 >= 0 && arg.codePointAt(0) <= '\uffff');  
    //@ ensures \result == 1 <==> arg.codePointAt(0) == '\uffff' && (arg.codePointAt(0)+1) != 0;
    public static int fun(String arg) {
        if (arg.length() < 1)
            return -1;
        char my_char = arg.charAt(0);
        int x = my_char;
        if (!(x >= 0 && x <= '\uffff'))
            return 0;

        my_char = '\uffff';
        my_char++;
        if (my_char == 0)
            return 0;
        return 1;
    }
}

/home/max/Documents/JMLGPT/tmp/char1.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/char1.java:4:) in method fun
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/char1.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/char1.java:8:
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) + 1 >= 0 && arg.codePointAt(0) <= '\uffff');  
        ^
2 verification failures

class char1 {
    //@ requires arg != null;
    //@ ensures \result == -1 <==> arg.length() < 1;
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) + 1 >= 0 && arg.codePointAt(0) - 1 <= '\uffff');  
    //@ ensures \result == 1 <==> arg.codePointAt(0) == '\uffff' && (arg.codePointAt(0)+1) != 0;
    public static int fun(String arg) {
        if (arg.length() < 1)
            return -1;
        char my_char = arg.charAt(0);
        int x = my_char;
        if (!(x >= 0 && x <= '\uffff'))
            return 0;

        my_char = '\uffff';
        my_char++;
        if (my_char == 0)
            return 0;
        return 1;
    }
}

/home/max/Documents/JMLGPT/tmp/char1.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/char1.java:4:) in method fun
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/char1.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/char1.java:8:
    //@ ensures \result == 0 <==> !(arg.codePointAt(0) + 1 >= 0 && arg.codePointAt(0) - 1 <= '\uffff');  
        ^
2 verification failures

class char1 {
    //@ requires arg != null;
    //@ ensures \result == -1 <==> arg.length() < 1;
 
    //@ ensures \result == 1 <==> arg.codePointAt(0) == '\uffff' && (arg.codePointAt(0)+1) != 0;
    public static int fun(String arg) {
        if (arg.length() < 1)
            return -1;
        char my_char = arg.charAt(0);
        int x = my_char;
        if (!(x >= 0 && x <= '\uffff'))
            return 0;

        my_char = '\uffff';
        my_char++;
        if (my_char == 0)
            return 0;
        return 1;
    }
}

/home/max/Documents/JMLGPT/tmp/char1.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/char1.java:5:) in method fun
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/char1.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/char1.java:8:
    //@ ensures \result == 1 <==> arg.codePointAt(0) == '\uffff' && (arg.codePointAt(0)+1) != 0;
        ^
2 verification failures

class char1 {
    //@ requires arg != null;
    //@ ensures \result == -1 <==> arg.length() < 1;
 
    //@ ensures \result == 1 <==> arg.codePointAt(0) == '\uffff' && (arg.codePointAt(0)+1) != 0;  
    public static int fun(String arg) {
        if (arg.length() < 1)
            return -1;
        char my_char = arg.charAt(0);
        int x = my_char;
        if (!(x >= 0 && x <= '\uffff'))
            return 0;

        my_char = '\uffff';
        my_char++;
        if (my_char == 0)
            return 0;
        return 1;
    }
}

/home/max/Documents/JMLGPT/tmp/char1.java:8: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/char1.java:5:) in method fun
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/char1.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/char1.java:8:
    //@ ensures \result == 1 <==> arg.codePointAt(0) == '\uffff' && (arg.codePointAt(0)+1) != 0;  
        ^
2 verification failures

class char1 {
    //@ requires arg != null;
    //@ ensures \result == -1 <==> arg.length() < 1;
 
 
    public static int fun(String arg) {
        if (arg.length() < 1)
            return -1;
        char my_char = arg.charAt(0);
        int x = my_char;
        if (!(x >= 0 && x <= '\uffff'))
            return 0;

        my_char = '\uffff';
        my_char++;
        if (my_char == 0)
            return 0;
        return 1;
    }
}


