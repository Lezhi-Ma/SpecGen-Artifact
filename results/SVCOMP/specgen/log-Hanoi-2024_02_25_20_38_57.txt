class Hanoi {
    //@ public static model int counter;
    //@ ensures \result == 1 <==> n == 1;
    //@ ensures \result == 2 * hanoi(n - 1) + 1;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires 0 <= n;
    //@ requires 0 <= from && 0 <= to && 0 <= via;
    //@ ensures counter == hanoi(n);
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
}
/home/max/Documents/JMLGPT/tmp/Hanoi.java:20: error: cannot find symbol
        counter++;
        ^
  symbol:   variable counter
  location: class Hanoi
1 error

class Hanoi {
    //@ public static model int counter;
    //@ ensures \result == 1 <==> n == 1;
    //@ ensures \result == 2 * hanoi(n - 1) + 1;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires 0 <= n;
    //@ requires 0 <= from && 0 <= to && 0 <= via;
    //@ ensures \not_modified(counter);
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
}
/home/max/Documents/JMLGPT/tmp/Hanoi.java:20: error: cannot find symbol
        counter++;
        ^
  symbol:   variable counter
  location: class Hanoi
1 error

class Hanoi {
    //@ public static model int counter;
    //@ ensures \result == 1 <==> n == 1;
    //@ ensures \result == 2 * hanoi(n - 1) + 1;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires 0 <= n;
    //@ requires 0 <= from && 0 <= to && 0 <= via;
    //@ ensures \not_modified(counter);
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        Hanoi.counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
}
/home/max/Documents/JMLGPT/tmp/Hanoi.java:20: error: cannot find symbol
        Hanoi.counter++;
             ^
  symbol:   variable counter
  location: class Hanoi
1 error

class Hanoi {
    //@ public static model int counter;
    //@ ensures \result == 1 <==> n == 1;
    //@ ensures \result == 2 * hanoi(n - 1) + 1;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires 0 <= n;
    //@ requires 0 <= from && 0 <= to && 0 <= via;
    //@ ensures \not_modified(Hanoi.counter);
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        Hanoi.counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
}
/home/max/Documents/JMLGPT/tmp/Hanoi.java:20: error: cannot find symbol
        Hanoi.counter++;
             ^
  symbol:   variable counter
  location: class Hanoi
1 error

class Hanoi {
    //@ public static model int counter;
    //@ ensures \result == 1 <==> n == 1;
    //@ ensures \result == 2 * hanoi(n - 1) + 1;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires 0 <= n;
    //@ requires 0 <= from && 0 <= to && 0 <= via;
    //@ ensures \not_modified(Hanoi.counter);
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        Hanoi.counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
}
/home/max/Documents/JMLGPT/tmp/Hanoi.java:20: error: cannot find symbol
        Hanoi.counter++;
             ^
  symbol:   variable counter
  location: class Hanoi
1 error

class Hanoi {
    //@ public static model int counter;
    //@ ensures \result == 1 <==> n == 1;
    //@ ensures \result == 2 * hanoi(n - 1) + 1;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires 0 <= n;
    //@ requires 0 <= from && 0 <= to && 0 <= via;
    //@ ensures \not_modified(Hanoi.counter);
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
}
/home/max/Documents/JMLGPT/tmp/Hanoi.java:20: error: cannot find symbol
        counter++;
        ^
  symbol:   variable counter
  location: class Hanoi
1 error

class Hanoi {
    //@ public static model int counter;
    //@ ensures \result == 1 <==> n == 1;
    //@ ensures \result == 2 * hanoi(n - 1) + 1;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires 0 <= n;
    //@ requires 0 <= from && 0 <= to && 0 <= via;
    //@ ensures \not_modified(counter);
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
}
/home/max/Documents/JMLGPT/tmp/Hanoi.java:20: error: cannot find symbol
        counter++;
        ^
  symbol:   variable counter
  location: class Hanoi
1 error

class Hanoi {
    //@ public static model int counter;
    //@ ensures \result == 1 <==> n == 1;
    //@ ensures \result == 2 * hanoi(n - 1) + 1;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires 0 <= n;
    //@ requires 0 <= from && 0 <= to && 0 <= via;
    //@ ensures \not_modified(counter);
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
}
/home/max/Documents/JMLGPT/tmp/Hanoi.java:20: error: cannot find symbol
        counter++;
        ^
  symbol:   variable counter
  location: class Hanoi
1 error

class Hanoi {
    //@ public static model int counter;
    //@ ensures \result == 1 <==> n == 1;
    //@ ensures \result == 2 * hanoi(n - 1) + 1;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires 0 <= n;
    //@ requires 0 <= from && 0 <= to && 0 <= via;
    //@ ensures \not_modified(counter);
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
}
/home/max/Documents/JMLGPT/tmp/Hanoi.java:20: error: cannot find symbol
        counter++;
        ^
  symbol:   variable counter
  location: class Hanoi
1 error

class Hanoi {
    //@ public static model int counter;
    //@ ensures \result == 1 <==> n == 1;
    //@ ensures \result == 2 * hanoi(n - 1) + 1;
    static int hanoi(int n) {
        if (n == 1) {
          return 1;
        }
        return 2 * (hanoi(n - 1)) + 1;
    }
    
    //@ requires 0 <= n;
    //@ requires 0 <= from && 0 <= to && 0 <= via;
    //@ ensures \not_modified(counter);
    static void applyHanoi(int n, int from, int to, int via) {
        if (n == 0) {
          return;
        }
        // increment the number of steps
        counter++;
        applyHanoi(n - 1, from, via, to);
        applyHanoi(n - 1, via, to, from);
    }
}
/home/max/Documents/JMLGPT/tmp/Hanoi.java:20: error: cannot find symbol
        counter++;
        ^
  symbol:   variable counter
  location: class Hanoi
1 error

