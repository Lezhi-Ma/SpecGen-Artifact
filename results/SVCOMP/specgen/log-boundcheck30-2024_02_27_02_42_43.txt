public class boundcheck30 {

    //@ requires i >= 0;
    //@ ensures i == 0 ==> true;
    //@ ensures i > 0 ==> recursion(i-1);
    //@ ensures i < 0 ==> false;
    private static void recursion(int i) {
        if (i == 0) {
            return;
        }
        if (i > 0) {
            recursion(i - 1);
        }
        if (i < 0) {
            assert false;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:5: error: incompatible types: void cannot be converted to boolean
    //@ ensures i > 0 ==> recursion(i-1);
                                   ^
1 error

public class boundcheck30 {

    //@ requires i >= 0;
    //@ ensures i == 0 ==> true;
    //@ ensures i > 0 ==> \result == recursion(i-1);
    //@ ensures i < 0 ==> false;
    private static void recursion(int i) {
        if (i == 0) {
            return;
        }
        if (i > 0) {
            recursion(i - 1);
        }
        if (i < 0) {
            assert false;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:5: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures i > 0 ==> \result == recursion(i-1);
                           ^
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:5: error: 'void' type not allowed here
    //@ ensures i > 0 ==> \result == recursion(i-1);
                                              ^
2 errors

public class boundcheck30 {

    //@ requires i >= 0;
    //@ ensures i == 0 ==> true;
    //@ ensures i > 0 ==> recursion(i-1);
    //@ ensures i < 0 ==> false;
    private static void recursion(int i) {
        if (i == 0) {
            return;
        }
        if (i > 0) {
            recursion(i - 1);
        }
        if (i < 0) {
            assert false;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/boundcheck30.java:5: error: incompatible types: void cannot be converted to boolean
    //@ ensures i > 0 ==> recursion(i-1);
                                   ^
1 error

public class boundcheck30 {

    //@ requires i >= 0;
    //@ ensures i == 0 ==> true;
    //@ ensures i > 0 ==> true;
    //@ ensures i < 0 ==> false;
    private static void recursion(int i) {
        if (i == 0) {
            return;
        }
        if (i > 0) {
            recursion(i - 1);
        }
        if (i < 0) {
            assert false;
        }
    }
}

