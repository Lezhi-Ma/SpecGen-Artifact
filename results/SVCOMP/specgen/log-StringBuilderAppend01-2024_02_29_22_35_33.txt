public class StringBuilderAppend01 {
    //@ requires args != null;
    //@ requires \typeof(args) == \type(String[]);
    //@ requires args.length >= 0;
    //@ requires \typeof(objectRef) == \type(Object);
    //@ requires \typeof(string) == \type(String);
    //@ requires charArray != null;
    //@ requires \typeof(charArray) == \type(char[]);
    //@ requires charArray.length >= 0;
    //@ requires booleanValue == true || booleanValue == false;
    //@ requires \typeof(characterValue) == \type(char);
    //@ requires \typeof(integerValue) == \type(int);
    //@ requires \typeof(longValue) == \type(long);
    //@ requires \typeof(floatValue) == \type(float);
    //@ requires \typeof(doubleValue) == \type(double);
    //@ ensures \result != null;
    //@ ensures \typeof(\result) == \type(String);
    //@ ensures \result.equals("diffblue%ntest%nverification%nver%ntrue%nZ%n7%n10000000000%n2.5%n33.333%nlast buffer");
    public static void main(String[] args) {
        Object objectRef = "diffblue";
        String string = "test";
        char[] charArray = {
            'v', 'e', 'r', 'i', 'f', 'i',
            'c', 'a', 't', 'i', 'o', 'n'
        };
        boolean booleanValue = true;
        char characterValue = 'Z';
        int integerValue = 7;
        long longValue = 10000000000L;
        float floatValue = 2.5f;
        double doubleValue = 33.333;

        StringBuilder lastBuffer = new StringBuilder("last buffer");
        StringBuilder buffer = new StringBuilder();

        buffer
                .append(objectRef)
                .append("%n")
                .append(string)
                .append("%n")
                .append(charArray)
                .append("%n")
                .append(charArray, 0, 3)
                .append("%n")
                .append(booleanValue)
                .append("%n")
                .append(characterValue)
                .append("%n")
                .append(integerValue)
                .append("%n")
                .append(longValue)
                .append("%n")
                .append(floatValue)
                .append("%n")
                .append(doubleValue)
                .append("%n")
                .append(lastBuffer);

        String tmp = buffer.toString();
        assert tmp.equals(
                "diffblue%ntest%nverification%nver%ntrue%nZ%n7%n10000000000%n2.5%n33.333%nlast buffer");
    }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:5: error: cannot find symbol
    //@ requires \typeof(objectRef) == \type(Object);
                         ^
  symbol:   variable objectRef
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:6: error: cannot find symbol
    //@ requires \typeof(string) == \type(String);
                         ^
  symbol:   variable string
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:7: error: cannot find symbol
    //@ requires charArray != null;
                 ^
  symbol:   variable charArray
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:8: error: cannot find symbol
    //@ requires \typeof(charArray) == \type(char[]);
                         ^
  symbol:   variable charArray
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:9: error: cannot find symbol
    //@ requires charArray.length >= 0;
                 ^
  symbol:   variable charArray
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:10: error: cannot find symbol
    //@ requires booleanValue == true || booleanValue == false;
                 ^
  symbol:   variable booleanValue
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:10: error: cannot find symbol
    //@ requires booleanValue == true || booleanValue == false;
                                         ^
  symbol:   variable booleanValue
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:11: error: cannot find symbol
    //@ requires \typeof(characterValue) == \type(char);
                         ^
  symbol:   variable characterValue
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:12: error: cannot find symbol
    //@ requires \typeof(integerValue) == \type(int);
                         ^
  symbol:   variable integerValue
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:13: error: cannot find symbol
    //@ requires \typeof(longValue) == \type(long);
                         ^
  symbol:   variable longValue
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:14: error: cannot find symbol
    //@ requires \typeof(floatValue) == \type(float);
                         ^
  symbol:   variable floatValue
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:15: error: cannot find symbol
    //@ requires \typeof(doubleValue) == \type(double);
                         ^
  symbol:   variable doubleValue
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:16: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result != null;
                 ^
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:17: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \typeof(\result) == \type(String);
                         ^
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:18: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result.equals("diffblue%ntest%nverification%nver%ntrue%nZ%n7%n10000000000%n2.5%n33.333%nlast buffer");
                 ^
15 errors

public class StringBuilderAppend01 {
    //@ requires args != null && \typeof(args) == \type(String[]) && args.length >= 0;
    //@ requires objectRef != null && \typeof(objectRef) == \type(Object);
    //@ requires string != null && \typeof(string) == \type(String);
    //@ requires charArray != null && \typeof(charArray) == \type(char[]) && charArray.length >= 0;
    //@ requires booleanValue == true || booleanValue == false;
    //@ requires \typeof(characterValue) == \type(char);
    //@ requires \typeof(integerValue) == \type(int);
    //@ requires \typeof(longValue) == \type(long);
    //@ requires \typeof(floatValue) == \type(float);
    //@ requires \typeof(doubleValue) == \type(double);
    //@ ensures \result != null && \typeof(\result) == \type(String);
    //@ ensures \result.equals("diffblue%ntest%nverification%nver%ntrue%nZ%n7%n10000000000%n2.5%n33.333%nlast buffer");
    public static void main(String[] args) {
        Object objectRef = "diffblue";
        String string = "test";
        char[] charArray = {
            'v', 'e', 'r', 'i', 'f', 'i',
            'c', 'a', 't', 'i', 'o', 'n'
        };
        boolean booleanValue = true;
        char characterValue = 'Z';
        int integerValue = 7;
        long longValue = 10000000000L;
        float floatValue = 2.5f;
        double doubleValue = 33.333;

        StringBuilder lastBuffer = new StringBuilder("last buffer");
        StringBuilder buffer = new StringBuilder();

        buffer
                .append(objectRef)
                .append("%n")
                .append(string)
                .append("%n")
                .append(charArray)
                .append("%n")
                .append(charArray, 0, 3)
                .append("%n")
                .append(booleanValue)
                .append("%n")
                .append(characterValue)
                .append("%n")
                .append(integerValue)
                .append("%n")
                .append(longValue)
                .append("%n")
                .append(floatValue)
                .append("%n")
                .append(doubleValue)
                .append("%n")
                .append(lastBuffer);

        String tmp = buffer.toString();
        assert tmp.equals(
                "diffblue%ntest%nverification%nver%ntrue%nZ%n7%n10000000000%n2.5%n33.333%nlast buffer");
    }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:3: error: cannot find symbol
    //@ requires objectRef != null && \typeof(objectRef) == \type(Object);
                 ^
  symbol:   variable objectRef
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:3: error: cannot find symbol
    //@ requires objectRef != null && \typeof(objectRef) == \type(Object);
                                              ^
  symbol:   variable objectRef
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:4: error: cannot find symbol
    //@ requires string != null && \typeof(string) == \type(String);
                 ^
  symbol:   variable string
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:4: error: cannot find symbol
    //@ requires string != null && \typeof(string) == \type(String);
                                           ^
  symbol:   variable string
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:5: error: cannot find symbol
    //@ requires charArray != null && \typeof(charArray) == \type(char[]) && charArray.length >= 0;
                 ^
  symbol:   variable charArray
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:5: error: cannot find symbol
    //@ requires charArray != null && \typeof(charArray) == \type(char[]) && charArray.length >= 0;
                                              ^
  symbol:   variable charArray
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:5: error: cannot find symbol
    //@ requires charArray != null && \typeof(charArray) == \type(char[]) && charArray.length >= 0;
                                                                             ^
  symbol:   variable charArray
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:6: error: cannot find symbol
    //@ requires booleanValue == true || booleanValue == false;
                 ^
  symbol:   variable booleanValue
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:6: error: cannot find symbol
    //@ requires booleanValue == true || booleanValue == false;
                                         ^
  symbol:   variable booleanValue
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:7: error: cannot find symbol
    //@ requires \typeof(characterValue) == \type(char);
                         ^
  symbol:   variable characterValue
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:8: error: cannot find symbol
    //@ requires \typeof(integerValue) == \type(int);
                         ^
  symbol:   variable integerValue
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:9: error: cannot find symbol
    //@ requires \typeof(longValue) == \type(long);
                         ^
  symbol:   variable longValue
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:10: error: cannot find symbol
    //@ requires \typeof(floatValue) == \type(float);
                         ^
  symbol:   variable floatValue
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:11: error: cannot find symbol
    //@ requires \typeof(doubleValue) == \type(double);
                         ^
  symbol:   variable doubleValue
  location: class StringBuilderAppend01
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:12: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result != null && \typeof(\result) == \type(String);
                 ^
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:12: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result != null && \typeof(\result) == \type(String);
                                            ^
/home/max/Documents/JMLGPT/tmp/StringBuilderAppend01.java:13: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result.equals("diffblue%ntest%nverification%nver%ntrue%nZ%n7%n10000000000%n2.5%n33.333%nlast buffer");
                 ^
17 errors

