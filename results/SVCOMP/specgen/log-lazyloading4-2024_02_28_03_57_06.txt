class Problem {
    private static final Object[] DEFAULT = {};
    private Object data;

    //@ assignable this.data;
    //@ ensures this.data == DEFAULT;
    Problem() {
        this.data = DEFAULT;
    }

    //@ ensures \result == (data != null);
    boolean checkInvariant() {
        return data != null;
    }
}

public class lazyloading4 {
    //@ ensures \result == (new Problem()).checkInvariant();
    public static boolean f() {
        return new Problem().checkInvariant();
    }
}
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:5: error: References to 'this' are not permitted in constructor assignable clauses: this
    //@ assignable this.data;
                   ^
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:5: error: An identifier with private visibility may not be used in a assignable clause with package visibility
    //@ assignable this.data;
                       ^
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:6: error: An identifier with private visibility may not be used in a ensures clause with package visibility
    //@ ensures this.data == DEFAULT;
                    ^
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:6: error: An identifier with private visibility may not be used in a ensures clause with package visibility
    //@ ensures this.data == DEFAULT;
                             ^
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:11: error: An identifier with private visibility may not be used in a ensures clause with package visibility
    //@ ensures \result == (data != null);
                            ^
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:18: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == (new Problem()).checkInvariant();
                            ^
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:18: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == (new Problem()).checkInvariant();
                                          ^
7 errors

class Problem {
    private static final /*@ spec_public @*/ Object[] DEFAULT = {};
    private /*@ spec_public @*/ Object data;

    //@ assignable data;
    //@ ensures data == DEFAULT;
    Problem() {
        this.data = DEFAULT;
    }

    //@ ensures \result == (data != null);
    boolean checkInvariant() {
        return data != null;
    }
}

public class lazyloading4 {
    //@ ensures \result == (new Problem()).checkInvariant();
    public static boolean f() {
        return new Problem().checkInvariant();
    }
}
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:5: error: Implicit references to 'this' are not permitted in constructor assignable clauses: data
    //@ assignable data;
                   ^
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:18: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == (new Problem()).checkInvariant();
                            ^
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:18: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == (new Problem()).checkInvariant();
                                          ^
3 errors

class Problem {
    private static final /*@ spec_public @*/ Object[] DEFAULT = {};
    private /*@ spec_public @*/ Object data;

    //@ assignable data;
    //@ ensures data == DEFAULT;
    Problem() {
        this.data = DEFAULT;
    }

    //@ ensures \result == (data != null);
    boolean checkInvariant() {
        return data != null;
    }
}

public class lazyloading4 {
    //@ ensures \result == (new Problem()).checkInvariant();
    public static boolean f() {
        Problem p = new Problem();
        return p.checkInvariant();
    }
}
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:5: error: Implicit references to 'this' are not permitted in constructor assignable clauses: data
    //@ assignable data;
                   ^
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:18: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == (new Problem()).checkInvariant();
                            ^
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:18: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == (new Problem()).checkInvariant();
                                          ^
3 errors

class Problem {
    private static final /*@ spec_public @*/ Object[] DEFAULT = {};
    private /*@ spec_public @*/ Object data;

    //@ assignable data;
    //@ ensures data == DEFAULT;
    Problem() {
        this.data = DEFAULT;
    }

    //@ ensures \result == (data != null);
    boolean checkInvariant() {
        return data != null;
    }
}

public class lazyloading4 {
    //@ ensures \result == (new Problem()).checkInvariant();
    public static boolean f() {
        Problem p = new Problem();
        return p.checkInvariant();
    }
}
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:5: error: Implicit references to 'this' are not permitted in constructor assignable clauses: data
    //@ assignable data;
                   ^
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:18: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == (new Problem()).checkInvariant();
                            ^
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:18: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == (new Problem()).checkInvariant();
                                          ^
3 errors

class Problem {
    private static final /*@ spec_public @*/ Object[] DEFAULT = {};
    private /*@ spec_public @*/ Object data;

    //@ assignable data;
    //@ ensures data == DEFAULT;
    Problem() {
        this.data = DEFAULT;
    }

    //@ ensures \result == (data != null);
    boolean checkInvariant() {
        return data != null;
    }
}

public class lazyloading4 {
    //@ ensures \result == (\new Problem()).checkInvariant();
    public static boolean f() {
        Problem p = new Problem();
        return p.checkInvariant();
    }
}
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:18: error: This backslash token is unknown: \new
    //@ ensures \result == (\new Problem()).checkInvariant();
                            ^
1 error

class Problem {
    private static final /*@ spec_public @*/ Object[] DEFAULT = {};
    private /*@ spec_public @*/ Object data;

    //@ assignable data;
    //@ ensures data == DEFAULT;
    Problem() {
        this.data = DEFAULT;
    }

    //@ ensures \result == (data != null);
    boolean checkInvariant() {
        return data != null;
    }
}

public class lazyloading4 {
    //@ ensures \result == (new Problem()).checkInvariant();
    public static boolean f() {
        Problem p = new Problem();
        return p.checkInvariant();
    }
}
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:5: error: Implicit references to 'this' are not permitted in constructor assignable clauses: data
    //@ assignable data;
                   ^
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:18: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == (new Problem()).checkInvariant();
                            ^
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:18: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == (new Problem()).checkInvariant();
                                          ^
3 errors

class Problem {
    private static final /*@ spec_public @*/ Object[] DEFAULT = {};
    private /*@ spec_public @*/ Object data;

    //@ assignable \nothing;
    //@ ensures data == DEFAULT;
    Problem() {
        this.data = DEFAULT;
    }

    //@ ensures \result == (data != null);
    boolean checkInvariant() {
        return data != null;
    }
}

public class lazyloading4 {
    //@ ensures \result == (new Problem()).checkInvariant();
    public static boolean f() {
        Problem p = new Problem();
        return p.checkInvariant();
    }
}
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:18: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == (new Problem()).checkInvariant();
                            ^
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:18: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == (new Problem()).checkInvariant();
                                          ^
2 errors

class Problem {
    private static final /*@ spec_public @*/ Object[] DEFAULT = {};
    private /*@ spec_public @*/ Object data;

    //@ assignable \nothing;
    //@ ensures data == DEFAULT;
    Problem() {
        this.data = DEFAULT;
    }

    //@ ensures \result == (data != null);
    boolean checkInvariant() {
        return data != null;
    }
}

public class lazyloading4 {
    //@ ensures \result == (new Problem()).checkInvariant();
    public static boolean f() {
        Problem p = new Problem();
        return p.checkInvariant();
    }
}
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:18: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == (new Problem()).checkInvariant();
                            ^
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:18: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == (new Problem()).checkInvariant();
                                          ^
2 errors

class Problem {
    private static final /*@ spec_public @*/ Object[] DEFAULT = {};
    private /*@ spec_public @*/ Object data;

    //@ assignable \nothing;
    //@ ensures data == DEFAULT;
    Problem() {
        this.data = DEFAULT;
    }

    //@ ensures \result == (data != null);
    boolean checkInvariant() {
        return data != null;
    }
}

public class lazyloading4 {
    //@ ensures \result == (Problem.DEFAULT != null);
    public static boolean f() {
        Problem p = new Problem();
        return p.checkInvariant();
    }
}
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/lazyloading4.java:18:) in method f
        return p.checkInvariant();
        ^
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/lazyloading4.java:21:
    //@ ensures \result == (Problem.DEFAULT != null);
        ^
2 verification failures

class Problem {
    private static final /*@ spec_public @*/ Object[] DEFAULT = {};
    private /*@ spec_public @*/ Object data;

    //@ assignable \nothing;
    //@ ensures data == DEFAULT;
    Problem() {
        this.data = DEFAULT;
    }

    //@ ensures \result == (data != null);
    boolean checkInvariant() {
        return data != null;
    }
}

public class lazyloading4 {
    //@ ensures \result == (Problem.DEFAULT != null);  
    public static boolean f() {
        Problem p = new Problem();
        return p.checkInvariant();
    }
}

/home/max/Documents/JMLGPT/tmp/lazyloading4.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/lazyloading4.java:18:) in method f
        return p.checkInvariant();
        ^
/home/max/Documents/JMLGPT/tmp/lazyloading4.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/lazyloading4.java:21:
    //@ ensures \result == (Problem.DEFAULT != null);  
        ^
2 verification failures

class Problem {
    private static final /*@ spec_public @*/ Object[] DEFAULT = {};
    private /*@ spec_public @*/ Object data;

    //@ assignable \nothing;
    //@ ensures data == DEFAULT;
    Problem() {
        this.data = DEFAULT;
    }

    //@ ensures \result == (data != null);
    boolean checkInvariant() {
        return data != null;
    }
}

public class lazyloading4 {
 
    public static boolean f() {
        Problem p = new Problem();
        return p.checkInvariant();
    }
}


