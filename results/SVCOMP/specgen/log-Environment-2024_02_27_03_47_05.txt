public class Environment {

  public enum WaterLevelEnum {
    low,
    normal,
    high
  }

  private WaterLevelEnum waterLevel = WaterLevelEnum.normal;

  private boolean methaneLevelCritical = false;

  //@ ensures waterLevel == WaterLevelEnum.normal ==> waterLevel == WaterLevelEnum.low;
  //@ ensures waterLevel == WaterLevelEnum.high ==> waterLevel == WaterLevelEnum.normal;
  void lowerWaterLevel() {
    switch (waterLevel) {
      case high:
        waterLevel = WaterLevelEnum.normal;
        break;
      case normal:
        waterLevel = WaterLevelEnum.low;
        break;
    }
  }

  //@ ensures waterLevel == WaterLevelEnum.low ==> waterLevel == WaterLevelEnum.normal;
  //@ ensures waterLevel == WaterLevelEnum.normal ==> waterLevel == WaterLevelEnum.high;
  public void waterRise() {
    switch (waterLevel) {
      case low:
        waterLevel = WaterLevelEnum.normal;
        break;
      case normal:
        waterLevel = WaterLevelEnum.high;
        break;
    }
  }

  //@ ensures methaneLevelCritical == !\old(methaneLevelCritical);
  public void changeMethaneLevel() {
    methaneLevelCritical = !methaneLevelCritical;
  }

  //@ ensures \result == methaneLevelCritical;
  public boolean isMethaneLevelCritical() {
    return methaneLevelCritical;
  }

  //@ ensures \result.equals("Env(Water:" + waterLevel + ",Meth:" + (methaneLevelCritical ? "CRIT" : "OK") + ")");
  @Override
  public String toString() {
    return "Env(Water:" + waterLevel + ",Meth:" + (methaneLevelCritical ? "CRIT" : "OK") + ")";
  }

  //@ ensures \result == waterLevel;
  public WaterLevelEnum getWaterLevel() {
    return waterLevel;
  }
}
/home/max/Documents/JMLGPT/tmp/Environment.java:13: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures waterLevel == WaterLevelEnum.normal ==> waterLevel == WaterLevelEnum.low;
              ^
/home/max/Documents/JMLGPT/tmp/Environment.java:13: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures waterLevel == WaterLevelEnum.normal ==> waterLevel == WaterLevelEnum.low;
                                                      ^
/home/max/Documents/JMLGPT/tmp/Environment.java:14: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures waterLevel == WaterLevelEnum.high ==> waterLevel == WaterLevelEnum.normal;
              ^
/home/max/Documents/JMLGPT/tmp/Environment.java:14: error: An identifier with private visibility may not be used in a ensures clause with package visibility
  //@ ensures waterLevel == WaterLevelEnum.high ==> waterLevel == WaterLevelEnum.normal;
                                                    ^
/home/max/Documents/JMLGPT/tmp/Environment.java:26: error: An identifier with private visibility may not be used in a ensures clause with public visibility
  //@ ensures waterLevel == WaterLevelEnum.low ==> waterLevel == WaterLevelEnum.normal;
              ^
/home/max/Documents/JMLGPT/tmp/Environment.java:26: error: An identifier with private visibility may not be used in a ensures clause with public visibility
  //@ ensures waterLevel == WaterLevelEnum.low ==> waterLevel == WaterLevelEnum.normal;
                                                   ^
/home/max/Documents/JMLGPT/tmp/Environment.java:27: error: An identifier with private visibility may not be used in a ensures clause with public visibility
  //@ ensures waterLevel == WaterLevelEnum.normal ==> waterLevel == WaterLevelEnum.high;
              ^
/home/max/Documents/JMLGPT/tmp/Environment.java:27: error: An identifier with private visibility may not be used in a ensures clause with public visibility
  //@ ensures waterLevel == WaterLevelEnum.normal ==> waterLevel == WaterLevelEnum.high;
                                                      ^
/home/max/Documents/JMLGPT/tmp/Environment.java:39: error: An identifier with private visibility may not be used in a ensures clause with public visibility
  //@ ensures methaneLevelCritical == !\old(methaneLevelCritical);
              ^
/home/max/Documents/JMLGPT/tmp/Environment.java:39: error: An identifier with private visibility may not be used in a ensures clause with public visibility
  //@ ensures methaneLevelCritical == !\old(methaneLevelCritical);
                                            ^
/home/max/Documents/JMLGPT/tmp/Environment.java:44: error: An identifier with private visibility may not be used in a ensures clause with public visibility
  //@ ensures \result == methaneLevelCritical;
                         ^
/home/max/Documents/JMLGPT/tmp/Environment.java:49: error: An identifier with private visibility may not be used in a ensures clause with public visibility
  //@ ensures \result.equals("Env(Water:" + waterLevel + ",Meth:" + (methaneLevelCritical ? "CRIT" : "OK") + ")");
                                            ^
/home/max/Documents/JMLGPT/tmp/Environment.java:49: error: An identifier with private visibility may not be used in a ensures clause with public visibility
  //@ ensures \result.equals("Env(Water:" + waterLevel + ",Meth:" + (methaneLevelCritical ? "CRIT" : "OK") + ")");
                                                                     ^
/home/max/Documents/JMLGPT/tmp/Environment.java:55: error: An identifier with private visibility may not be used in a ensures clause with public visibility
  //@ ensures \result == waterLevel;
                         ^
14 errors

public class Environment {

  public enum WaterLevelEnum {
    low,
    normal,
    high
  }

  private /*@ spec_public @*/ WaterLevelEnum waterLevel = WaterLevelEnum.normal;
  private /*@ spec_public @*/ boolean methaneLevelCritical = false;

  //@ ensures waterLevel == WaterLevelEnum.normal ==> waterLevel == WaterLevelEnum.low;
  //@ ensures waterLevel == WaterLevelEnum.high ==> waterLevel == WaterLevelEnum.normal;
  void lowerWaterLevel() {
    switch (waterLevel) {
      case high:
        waterLevel = WaterLevelEnum.normal;
        break;
      case normal:
        waterLevel = WaterLevelEnum.low;
        break;
    }
  }

  //@ ensures waterLevel == WaterLevelEnum.low ==> waterLevel == WaterLevelEnum.normal;
  //@ ensures waterLevel == WaterLevelEnum.normal ==> waterLevel == WaterLevelEnum.high;
  public void waterRise() {
    switch (waterLevel) {
      case low:
        waterLevel = WaterLevelEnum.normal;
        break;
      case normal:
        waterLevel = WaterLevelEnum.high;
        break;
    }
  }

  //@ ensures methaneLevelCritical == !\old(methaneLevelCritical);
  public void changeMethaneLevel() {
    methaneLevelCritical = !methaneLevelCritical;
  }

  //@ ensures \result == methaneLevelCritical;
  public boolean isMethaneLevelCritical() {
    return methaneLevelCritical;
  }

  //@ ensures \result.equals("Env(Water:" + waterLevel + ",Meth:" + (methaneLevelCritical ? "CRIT" : "OK") + ")");
  @Override
  public String toString() {
    return "Env(Water:" + waterLevel + ",Meth:" + (methaneLevelCritical ? "CRIT" : "OK") + ")";
  }

  //@ ensures \result == waterLevel;
  public WaterLevelEnum getWaterLevel() {
    return waterLevel;
  }
}
