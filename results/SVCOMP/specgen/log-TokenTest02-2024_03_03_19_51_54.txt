public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));
    public static boolean f() {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
    //@ requires sentence != null;
                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));
                                                           ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));
                                                                                                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:5: error: cannot find symbol
        String[] tokens = sentence.split(" ");
                          ^
  symbol:   variable sentence
  location: class TokenTest02
4 errors

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));
    public static boolean f() {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
    //@ requires sentence != null;
                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));
                                                           ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result <==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));
                                                                                                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:5: error: cannot find symbol
        String[] tokens = sentence.split(" ");
                          ^
  symbol:   variable sentence
  location: class TokenTest02
4 errors

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\exists int i; 0 < i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\exists int i; 0 < i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\exists int i; 0 < i && i <= sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\exists int i; 0 < i && i <= sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\exists int i; 0 < i && i < sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\exists int i; 0 < i && i < sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\exists int i; 0 < i && i <= sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\exists int i; 0 < i && i <= sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\exists int i; 0 <= i && i <= sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i < sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\exists int i; 0 - 1 <= i && i <= sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 < i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\forall int i; 0 < i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 < i && i < sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\forall int i; 0 < i && i < sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 < i && i <= sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\forall int i; 0 < i && i <= sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 < i && i <= sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\forall int i; 0 < i && i <= sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\forall int i; 0 <= i && i <= sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i < sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
    //@ ensures \result <==> (\forall int i; 0 - 1 <= i && i <= sentence.split(" ").length; i == 3 || sentence.split(" ")[i].equals("genneration"));  
        ^
2 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
 
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int k; 0 <= k && k < i; k != 3 || tokens[k].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:13: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: TokenTest02.f(java.lang.String), Callee: java.lang.String.equals(java.lang.Object))
                if (!token.equals("genneration"))
                                 ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:13:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

