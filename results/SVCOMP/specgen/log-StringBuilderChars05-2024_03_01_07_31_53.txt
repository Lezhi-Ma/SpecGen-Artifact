public class StringBuilderChars05 {
    //@ requires arg != null;
    //@ ensures \result ==> \result == true && \result == buffer.toString().equals("HiffBllTe Limited");
    //@ ensures !\result ==> \result == false;
    public static boolean f(String arg) {
        StringBuilder buffer = new StringBuilder(arg);
        buffer.setCharAt(0, 'H');
        buffer.setCharAt(6, 'T');
        return buffer.toString().equals("HiffBllTe Limited");
    }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars05.java:3: error: cannot find symbol
    //@ ensures \result ==> \result == true && \result == buffer.toString().equals("HiffBllTe Limited");
                                                          ^
  symbol:   variable buffer
  location: class StringBuilderChars05
1 error

public class StringBuilderChars05 {
    //@ requires arg != null;
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).setCharAt(0, 'H').setCharAt(6, 'T').toString().equals("HiffBllTe Limited");
    //@ ensures !\result ==> \result == false;
    public static boolean f(String arg) {
        StringBuilder buffer = new StringBuilder(arg);
        buffer.setCharAt(0, 'H');
        buffer.setCharAt(6, 'T');
        return buffer.toString().equals("HiffBllTe Limited");
    }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars05.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).setCharAt(0, 'H').setCharAt(6, 'T').toString().equals("HiffBllTe Limited");
                                                          ^
/home/max/Documents/JMLGPT/tmp/StringBuilderChars05.java:3: error: void cannot be dereferenced
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).setCharAt(0, 'H').setCharAt(6, 'T').toString().equals("HiffBllTe Limited");
                                                                                                  ^
2 errors

public class StringBuilderChars05 {
    //@ requires arg != null;
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).replace(0, 1, "H").replace(6, 7, "T").toString().equals("HiffBllTe Limited");
    //@ ensures !\result ==> \result == false;
    public static boolean f(String arg) {
        StringBuilder buffer = new StringBuilder(arg);
        buffer.setCharAt(0, 'H');
        buffer.setCharAt(6, 'T');
        return buffer.toString().equals("HiffBllTe Limited");
    }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars05.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).replace(0, 1, "H").replace(6, 7, "T").toString().equals("HiffBllTe Limited");
                                                          ^
1 error

public class StringBuilderChars05 {
    //@ requires arg != null;
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).toString().replace(0, 1, "H").replace(6, 7, "T").equals("HiffBllTe Limited");
    //@ ensures !\result ==> \result == false;
    public static boolean f(String arg) {
        StringBuilder buffer = new StringBuilder(arg);
        buffer.setCharAt(0, 'H');
        buffer.setCharAt(6, 'T');
        return buffer.toString().equals("HiffBllTe Limited");
    }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars05.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).toString().replace(0, 1, "H").replace(6, 7, "T").equals("HiffBllTe Limited");
                                                          ^
/home/max/Documents/JMLGPT/tmp/StringBuilderChars05.java:3: error: no suitable method found for replace(int,int,String)
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).toString().replace(0, 1, "H").replace(6, 7, "T").equals("HiffBllTe Limited");
                                                                                           ^
    method String.replace(char,char) is not applicable
      (actual and formal argument lists differ in length)
    method String.replace(CharSequence,CharSequence) is not applicable
      (actual and formal argument lists differ in length)
2 errors

public class StringBuilderChars05 {
    //@ requires arg != null;
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).replace(0, 1, "H").replace(6, 7, "T").toString().equals("HiffBllTe Limited");
    //@ ensures !\result ==> \result == false;
    public static boolean f(String arg) {
        StringBuilder buffer = new StringBuilder(arg);
        buffer.setCharAt(0, 'H');
        buffer.setCharAt(6, 'T');
        return buffer.toString().equals("HiffBllTe Limited");
    }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars05.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).replace(0, 1, "H").replace(6, 7, "T").toString().equals("HiffBllTe Limited");
                                                          ^
1 error

public class StringBuilderChars05 {
    //@ requires arg != null;
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).setCharAt(0, 'H').setCharAt(6, 'T').toString().equals("HiffBllTe Limited");
    //@ ensures !\result ==> \result == false;
    public static boolean f(String arg) {
        StringBuilder buffer = new StringBuilder(arg);
        buffer.setCharAt(0, 'H');
        buffer.setCharAt(6, 'T');
        return buffer.toString().equals("HiffBllTe Limited");
    }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars05.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).setCharAt(0, 'H').setCharAt(6, 'T').toString().equals("HiffBllTe Limited");
                                                          ^
/home/max/Documents/JMLGPT/tmp/StringBuilderChars05.java:3: error: void cannot be dereferenced
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).setCharAt(0, 'H').setCharAt(6, 'T').toString().equals("HiffBllTe Limited");
                                                                                                  ^
2 errors

public class StringBuilderChars05 {
    //@ requires arg != null;
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).toString().replace(0, 1, "H").replace(6, 7, "T").equals("HiffBllTe Limited");
    //@ ensures !\result ==> \result == false;
    public static boolean f(String arg) {
        StringBuilder buffer = new StringBuilder(arg);
        buffer.setCharAt(0, 'H');
        buffer.setCharAt(6, 'T');
        return buffer.toString().equals("HiffBllTe Limited");
    }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars05.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).toString().replace(0, 1, "H").replace(6, 7, "T").equals("HiffBllTe Limited");
                                                          ^
/home/max/Documents/JMLGPT/tmp/StringBuilderChars05.java:3: error: no suitable method found for replace(int,int,String)
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).toString().replace(0, 1, "H").replace(6, 7, "T").equals("HiffBllTe Limited");
                                                                                           ^
    method String.replace(char,char) is not applicable
      (actual and formal argument lists differ in length)
    method String.replace(CharSequence,CharSequence) is not applicable
      (actual and formal argument lists differ in length)
2 errors

public class StringBuilderChars05 {
    //@ requires arg != null;
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).toString().replace(0, 1, "H").replace(6, 7, "T").equals("HiffBllTe Limited");
    //@ ensures !\result ==> \result == false;
    public static boolean f(String arg) {
        StringBuilder buffer = new StringBuilder(arg);
        buffer.setCharAt(0, 'H');
        buffer.setCharAt(6, 'T');
        return buffer.toString().equals("HiffBllTe Limited");
    }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars05.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).toString().replace(0, 1, "H").replace(6, 7, "T").equals("HiffBllTe Limited");
                                                          ^
/home/max/Documents/JMLGPT/tmp/StringBuilderChars05.java:3: error: no suitable method found for replace(int,int,String)
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).toString().replace(0, 1, "H").replace(6, 7, "T").equals("HiffBllTe Limited");
                                                                                           ^
    method String.replace(char,char) is not applicable
      (actual and formal argument lists differ in length)
    method String.replace(CharSequence,CharSequence) is not applicable
      (actual and formal argument lists differ in length)
2 errors

public class StringBuilderChars05 {
    //@ requires arg != null;
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).replace(0, 1, "H").replace(6, 7, "T").toString().equals("HiffBllTe Limited");
    //@ ensures !\result ==> \result == false;
    public static boolean f(String arg) {
        StringBuilder buffer = new StringBuilder(arg);
        buffer.setCharAt(0, 'H');
        buffer.setCharAt(6, 'T');
        return buffer.toString().equals("HiffBllTe Limited");
    }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars05.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).replace(0, 1, "H").replace(6, 7, "T").toString().equals("HiffBllTe Limited");
                                                          ^
1 error

public class StringBuilderChars05 {
    //@ requires arg != null;
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).toString().replace(0, 1, "H").replace(6, 7, "T").equals("HiffBllTe Limited");
    //@ ensures !\result ==> \result == false;
    public static boolean f(String arg) {
        StringBuilder buffer = new StringBuilder(arg);
        buffer.setCharAt(0, 'H');
        buffer.setCharAt(6, 'T');
        return buffer.toString().equals("HiffBllTe Limited");
    }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars05.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).toString().replace(0, 1, "H").replace(6, 7, "T").equals("HiffBllTe Limited");
                                                          ^
/home/max/Documents/JMLGPT/tmp/StringBuilderChars05.java:3: error: no suitable method found for replace(int,int,String)
    //@ ensures \result ==> \result == true && \result == new StringBuilder(arg).toString().replace(0, 1, "H").replace(6, 7, "T").equals("HiffBllTe Limited");
                                                                                           ^
    method String.replace(char,char) is not applicable
      (actual and formal argument lists differ in length)
    method String.replace(CharSequence,CharSequence) is not applicable
      (actual and formal argument lists differ in length)
2 errors

public class StringBuilderChars05 {
    //@ requires arg != null;
 
    //@ ensures !\result ==> \result == false;
    public static boolean f(String arg) {
        StringBuilder buffer = new StringBuilder(arg);
        buffer.setCharAt(0, 'H');
        buffer.setCharAt(6, 'T');
        return buffer.toString().equals("HiffBllTe Limited");
    }
}


