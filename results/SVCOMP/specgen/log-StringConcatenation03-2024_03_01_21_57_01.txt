public class StringConcatenation03 {

  //@ requires s1 != null && s2 != null;
  //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
  public static boolean f(String s1, String s2) {
    System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
    String tmp = s1.concat(s2);
    if (!tmp.equals("Happy at DiffBllue"))
      return false;

    tmp = s1;
    System.out.printf("s1 after concatenation = %s\n", s1);
    if (!tmp.equals("Happy at"))
      return false;
    return true;
  }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 153092096 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18515.log

public class StringConcatenation03 {

  //@ requires s1 != null && s2 != null;
  //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
  public static boolean f(String s1, String s2) {
    System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
    String tmp = s1.concat(s2);
    if (!tmp.equals("Happy at DiffBllue"))
      return false;

    tmp = s1;
    System.out.printf("s1 after concatenation = %s\n", s1);
    if (!tmp.equals("Happy at"))
      return false;
    return true;
  }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 148897792 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18549.log

public class StringConcatenation03 {

  //@ requires s1 != null && s2 != null;
  //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
  public static boolean f(String s1, String s2) {
    System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
    String tmp = s1.concat(s2);
    if (!tmp.equals("Happy at DiffBllue"))
      return false;

    tmp = s1;
    System.out.printf("s1 after concatenation = %s\n", s1);
    if (!tmp.equals("Happy at"))
      return false;
    return true;
  }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 108003328 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18596.log

public class StringConcatenation03 {

  //@ requires s1 != null && s2 != null;
  //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
  public static boolean f(String s1, String s2) {
    System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
    String tmp = s1.concat(s2);
    if (!tmp.equals("Happy at DiffBllue"))
      return false;

    tmp = s1;
    System.out.printf("s1 after concatenation = %s\n", s1);
    if (!tmp.equals("Happy at"))
      return false;
    return true;
  }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 241172480 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18629.log

public class StringConcatenation03 {

  //@ requires s1 != null && s2 != null;
  //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
  public static boolean f(String s1, String s2) {
    System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
    String tmp = s1.concat(s2);
    if (!tmp.equals("Happy at DiffBllue"))
      return false;

    tmp = s1;
    System.out.printf("s1 after concatenation = %s\n", s1);
    if (!tmp.equals("Happy at"))
      return false;
    return true;
  }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 118489088 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18661.log

public class StringConcatenation03 {

  //@ requires s1 != null && s2 != null;
  //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
  public static boolean f(String s1, String s2) {
    System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
    String tmp = s1.concat(s2);
    if (!tmp.equals("Happy at DiffBllue"))
      return false;

    tmp = s1;
    System.out.printf("s1 after concatenation = %s\n", s1);
    if (!tmp.equals("Happy at"))
      return false;
    return true;
  }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 76546048 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18693.log

public class StringConcatenation03 {

  //@ requires s1 != null && s2 != null;
  //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
  public static boolean f(String s1, String s2) {
    System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
    String tmp = s1.concat(s2);
    if (!tmp.equals("Happy at DiffBllue"))
      return false;

    tmp = s1;
    System.out.printf("s1 after concatenation = %s\n", s1);
    if (!tmp.equals("Happy at"))
      return false;
    return true;
  }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 260046848 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18725.log

public class StringConcatenation03 {

  //@ requires s1 != null && s2 != null;
  //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
  public static boolean f(String s1, String s2) {
    System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
    String tmp = s1.concat(s2);
    if (!tmp.equals("Happy at DiffBllue"))
      return false;

    tmp = s1;
    System.out.printf("s1 after concatenation = %s\n", s1);
    if (!tmp.equals("Happy at"))
      return false;
    return true;
  }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 272629760 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18758.log

public class StringConcatenation03 {

  //@ requires s1 != null && s2 != null;
  //@ ensures \result ==> s1.concat(s2).equals("Happy at DiffBllue") && s1.equals("Happy at");
  public static boolean f(String s1, String s2) {
    System.out.printf("Result of s1.concat(s2) = %s\n", s1.concat(s2));
    String tmp = s1.concat(s2);
    if (!tmp.equals("Happy at DiffBllue"))
      return false;

    tmp = s1;
    System.out.printf("s1 after concatenation = %s\n", s1);
    if (!tmp.equals("Happy at"))
      return false;
    return true;
  }

}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 82837504 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid18790.log

