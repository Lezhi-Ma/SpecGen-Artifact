class A extends RuntimeException {}

class B extends A {}

class C extends B {}

public class exceptions10 {
  //@ ensures (\forall Exception exc; exc instanceof A ==> false);
  static void foo() {
    try {
      A b = new A();
      throw b;
    } catch (A exc) {
      assert false;
    }
  }

  //@ ensures (\forall Exception exc; exc instanceof B ==> false);
  public static void main(String[] args) {
    try {
      A a = new A();
      foo();
    } catch (B exc) {
      assert false;
    }
  }
}
/home/max/Documents/JMLGPT/tmp/exceptions10.java:14: verify: The prover cannot establish an assertion (Assert) in method foo
      assert false;
      ^
/home/max/Documents/JMLGPT/tmp/exceptions10.java:24: verify: The prover cannot establish an assertion (Assert) in method main
      assert false;
      ^
2 verification failures

class A extends RuntimeException {}

class B extends A {}

class C extends B {}

public class exceptions10 {
  //@ ensures (\forall Exception exc; exc instanceof A ==> false);
  static void foo() {
    try {
      A b = new A();
      throw b;
    } catch (A exc) {
      // do nothing
    }
  }

  //@ ensures (\forall Exception exc; exc instanceof B ==> false);
  public static void main(String[] args) {
    try {
      A a = new A();
      foo();
    } catch (B exc) {
      // do nothing
    }
  }
}
/home/max/Documents/JMLGPT/tmp/exceptions10.java:12: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/exceptions10.java:8:) in method foo
      throw b;
      ^
/home/max/Documents/JMLGPT/tmp/exceptions10.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/exceptions10.java:12:
  //@ ensures (\forall Exception exc; exc instanceof A ==> false);
      ^
/home/max/Documents/JMLGPT/tmp/exceptions10.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/exceptions10.java:18:) in method main
      foo();
         ^
/home/max/Documents/JMLGPT/tmp/exceptions10.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/exceptions10.java:22:
  //@ ensures (\forall Exception exc; exc instanceof B ==> false);
      ^
4 verification failures

class A extends RuntimeException {}

class B extends A {}

class C extends B {}

public class exceptions10 {
  //@ ensures (\forall Exception exc; exc instanceof A ==> false);  
  static void foo() {
    try {
      A b = new A();
      throw b;
    } catch (A exc) {
      // do nothing
    }
  }

  //@ ensures (\forall Exception exc; exc instanceof B ==> false);  
  public static void main(String[] args) {
    try {
      A a = new A();
      foo();
    } catch (B exc) {
      // do nothing
    }
  }
}

/home/max/Documents/JMLGPT/tmp/exceptions10.java:12: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/exceptions10.java:8:) in method foo
      throw b;
      ^
/home/max/Documents/JMLGPT/tmp/exceptions10.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/exceptions10.java:12:
  //@ ensures (\forall Exception exc; exc instanceof A ==> false);  
      ^
/home/max/Documents/JMLGPT/tmp/exceptions10.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/exceptions10.java:18:) in method main
      foo();
         ^
/home/max/Documents/JMLGPT/tmp/exceptions10.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/exceptions10.java:22:
  //@ ensures (\forall Exception exc; exc instanceof B ==> false);  
      ^
4 verification failures

class A extends RuntimeException {}

class B extends A {}

class C extends B {}

public class exceptions10 {
  //@ ensures (\exists Exception exc; exc instanceof A ==> false);  
  static void foo() {
    try {
      A b = new A();
      throw b;
    } catch (A exc) {
      // do nothing
    }
  }

  //@ ensures (\exists Exception exc; exc instanceof B ==> false);  
  public static void main(String[] args) {
    try {
      A a = new A();
      foo();
    } catch (B exc) {
      // do nothing
    }
  }
}


