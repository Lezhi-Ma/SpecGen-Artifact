class Main {
  static int field;
  static int field2;

  //@ ensures \result ==> \result == true && field == 9 && field2 == \old(field2) && \result == true;
  //@ ensures !\result ==> \result == false && field == \old(field) && field2 == \old(field2);
  public static boolean f() {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires x == 3 && z == 9 && r == \old(r);
  //@ ensures \result ==> \result == true && field == \old(field) && field2 == \old(field2) && r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
  //@ ensures !\result ==> \result == false && field == \old(field) && field2 == \old(field2) && r == \old(r) && z == \old(z);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:5: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> \result == true && field == 9 && field2 == \old(field2) && \result == true;
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:5: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> \result == true && field == 9 && field2 == \old(field2) && \result == true;
                                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:5: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> \result == true && field == 9 && field2 == \old(field2) && \result == true;
                                                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures !\result ==> \result == false && field == \old(field) && field2 == \old(field2);
                                               ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures !\result ==> \result == false && field == \old(field) && field2 == \old(field2);
                                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures !\result ==> \result == false && field == \old(field) && field2 == \old(field2);
                                                                       ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures !\result ==> \result == false && field == \old(field) && field2 == \old(field2);
                                                                                      ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:15: error: A \old token with no label may not be present in a requires clause
  //@ requires x == 3 && z == 9 && r == \old(r);
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:16: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> \result == true && field == \old(field) && field2 == \old(field2) && r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:16: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> \result == true && field == \old(field) && field2 == \old(field2) && r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
                                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:16: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> \result == true && field == \old(field) && field2 == \old(field2) && r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
                                                                     ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:16: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> \result == true && field == \old(field) && field2 == \old(field2) && r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
                                                                                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:16: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> \result == true && field == \old(field) && field2 == \old(field2) && r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
                                                                                                                                                              ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:16: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> \result == true && field == \old(field) && field2 == \old(field2) && r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
                                                                                                                                                                                                                ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:16: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> \result == true && field == \old(field) && field2 == \old(field2) && r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
                                                                                                                                                                                                                                                                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:17: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures !\result ==> \result == false && field == \old(field) && field2 == \old(field2) && r == \old(r) && z == \old(z);
                                               ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:17: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures !\result ==> \result == false && field == \old(field) && field2 == \old(field2) && r == \old(r) && z == \old(z);
                                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:17: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures !\result ==> \result == false && field == \old(field) && field2 == \old(field2) && r == \old(r) && z == \old(z);
                                                                       ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:17: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures !\result ==> \result == false && field == \old(field) && field2 == \old(field2) && r == \old(r) && z == \old(z);
                                                                                      ^
19 errors

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ ensures \result ==> \result == true && field == 9 && field2 == \old(field2) && \result == true;
  //@ ensures !\result ==> \result == false && field == \old(field) && field2 == \old(field2);
  public static boolean f() {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires x == 3 && z == 9 && r == \old(r);
  //@ ensures \result ==> \result == true && field == \old(field) && field2 == \old(field2) && r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
  //@ ensures !\result ==> \result == false && field == \old(field) && field2 == \old(field2) && r == \old(r) && z == \old(z);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:15: error: A \old token with no label may not be present in a requires clause
  //@ requires x == 3 && z == 9 && r == \old(r);
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:16: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> \result == true && field == \old(field) && field2 == \old(field2) && r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
                                                                                                                                                              ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:16: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> \result == true && field == \old(field) && field2 == \old(field2) && r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
                                                                                                                                                                                                                ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:16: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> \result == true && field == \old(field) && field2 == \old(field2) && r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
                                                                                                                                                                                                                                                                  ^
4 errors

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ ensures \result == true ==> field == 9 && field2 == \old(field2) && \result == true;
  //@ ensures \result == false ==> field == \old(field) && field2 == \old(field2);
  public static boolean f() {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires x == 3 && z == 9 && r == r;
  //@ ensures \result == true ==> field == \old(field) && field2 == \old(field2) && r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
  //@ ensures \result == false ==> field == \old(field) && field2 == \old(field2) && r == r && z == z;
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:16: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result == true ==> field == \old(field) && field2 == \old(field2) && r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
                                                                                                                                                   ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:16: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result == true ==> field == \old(field) && field2 == \old(field2) && r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
                                                                                                                                                                                                     ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:16: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result == true ==> field == \old(field) && field2 == \old(field2) && r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
                                                                                                                                                                                                                                                       ^
3 errors

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> field == \old(field) && field2 == \old(field2);
  public static boolean f() {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires x == 3 && z == 9 && r == r;
  //@ ensures \result ==> field == \old(field) && field2 == \old(field2);
  //@ ensures \result ==> r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
  //@ ensures !\result ==> field == \old(field) && field2 == \old(field2) && r == r && z == z;
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:17: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
                                                                                         ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:17: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
                                                                                                                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:17: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> r == x + z && z == x - 3 - 4 && (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2")) && (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
                                                                                                                                                                                             ^
3 errors

class Main {
  static /*@ spec_public @*/ int field;
  static /*@ spec_public @*/ int field2;

  //@ ensures \result ==> field == 9 && field2 == \old(field2);
  //@ ensures !\result ==> field == \old(field) && field2 == \old(field2);
  public static boolean f() {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires x == 3 && z == 9 && r == r;
  //@ ensures \result ==> field == \old(field) && field2 == \old(field2) && r == x + z && z == x - 3 - 4 && (r >= 99 ==> true) && (r < 99 ==> true) && (x >= z ==> true) && (x < z ==> \result == false);
  //@ ensures !\result ==> field == \old(field) && field2 == \old(field2) && r == r && z == z;
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}
