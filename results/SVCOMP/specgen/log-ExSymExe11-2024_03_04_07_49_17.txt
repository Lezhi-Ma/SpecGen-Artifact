class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= Integer.MIN_VALUE && arg <= Integer.MAX_VALUE;
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> test(3, arg % 100));
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= 0 ==> false) && \result == (z > 0 ==> true);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> test(3, arg % 100));
                                                                        ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= Integer.MIN_VALUE && arg <= Integer.MAX_VALUE;
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> new Main().test(3, arg % 100));
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= 0 ==> false) && \result == (z > 0 ==> true);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> new Main().test(3, arg % 100));
                                                                        ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= Integer.MIN_VALUE && arg <= Integer.MAX_VALUE;
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> new Main().test(3, arg % 100));
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= 0 ==> false) && \result == (z > 0 ==> true);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> new Main().test(3, arg % 100));
                                                                        ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= Integer.MIN_VALUE && arg <= Integer.MAX_VALUE;
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> new Main().test(3, arg % 100));
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= 0 ==> false) && \result == (z > 0 ==> true);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> new Main().test(3, arg % 100));
                                                                        ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= Integer.MIN_VALUE && arg <= Integer.MAX_VALUE;
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> test(3, arg % 100));
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= 0 ==> false) && \result == (z > 0 ==> true);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> test(3, arg % 100));
                                                                        ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= Integer.MIN_VALUE && arg <= Integer.MAX_VALUE;
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> new Main().test(3, arg % 100));
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= 0 ==> false) && \result == (z > 0 ==> true);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> new Main().test(3, arg % 100));
                                                                        ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= Integer.MIN_VALUE && arg <= Integer.MAX_VALUE;
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> test(3, arg % 100));
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= 0 ==> false) && \result == (z > 0 ==> true);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> test(3, arg % 100));
                                                                        ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= Integer.MIN_VALUE && arg <= Integer.MAX_VALUE;
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> new Main().test(3, arg % 100));
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= 0 ==> false) && \result == (z > 0 ==> true);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> new Main().test(3, arg % 100));
                                                                        ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= Integer.MIN_VALUE && arg <= Integer.MAX_VALUE;
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> test(3, arg % 100));
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= 0 ==> false) && \result == (z > 0 ==> true);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> test(3, arg % 100));
                                                                        ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= Integer.MIN_VALUE && arg <= Integer.MAX_VALUE;
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> new Main().test(3, arg % 100));
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= 0 ==> false) && \result == (z > 0 ==> true);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> new Main().test(3, arg % 100));
                                                                        ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= Integer.MIN_VALUE && arg <= Integer.MAX_VALUE;
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg > 0 ==> new Main().test(3, arg % 100));  
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= 0 ==> false) && \result == (z > 0 ==> true);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg > 0 ==> new Main().test(3, arg % 100));  
                                                                       ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= Integer.MIN_VALUE && arg <= Integer.MAX_VALUE;
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> new Main().test(3, arg % 100));  
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= 0 ==> false) && \result == (z > 0 ==> true);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg >= 0 ==> new Main().test(3, arg % 100));  
                                                                        ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= Integer.MIN_VALUE && arg <= Integer.MAX_VALUE;
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg + 1 >= 0 ==> new Main().test(3, arg % 100));  
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= 0 ==> false) && \result == (z > 0 ==> true);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == (arg < 0 ==> true) && \result == (arg + 1 >= 0 ==> new Main().test(3, arg % 100));  
                                                                            ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= Integer.MIN_VALUE && arg <= Integer.MAX_VALUE;
  //@ ensures \result == (arg <= 0 ==> true) && \result == (arg > 0 ==> new Main().test(3, arg % 100));  
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= 0 ==> false) && \result == (z > 0 ==> true);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == (arg <= 0 ==> true) && \result == (arg > 0 ==> new Main().test(3, arg % 100));  
                                                                        ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= Integer.MIN_VALUE && arg <= Integer.MAX_VALUE;
  //@ ensures \result == (arg <= 0 ==> true) && \result == (arg >= 0 ==> new Main().test(3, arg % 100));  
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= 0 ==> false) && \result == (z > 0 ==> true);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == (arg <= 0 ==> true) && \result == (arg >= 0 ==> new Main().test(3, arg % 100));  
                                                                         ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= Integer.MIN_VALUE && arg <= Integer.MAX_VALUE;
  //@ ensures \result == (arg <= 0 ==> true) && \result == (arg + 1 >= 0 ==> new Main().test(3, arg % 100));  
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= 0 ==> false) && \result == (z > 0 ==> true);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}

/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == (arg <= 0 ==> true) && \result == (arg + 1 >= 0 ==> new Main().test(3, arg % 100));  
                                                                             ^
1 error

class Main {
  static /*@ spec_public @*/ int field;

  //@ requires arg >= Integer.MIN_VALUE && arg <= Integer.MAX_VALUE;
 
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE && z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z <= 0 ==> false) && \result == (z > 0 ==> true);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}

