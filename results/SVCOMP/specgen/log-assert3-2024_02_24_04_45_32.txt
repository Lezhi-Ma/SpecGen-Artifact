class assert3 {

    //@ requires i >= 1000;
    //@ ensures !(i > 1000);
    public static void func() {
        int i = Verifier.nondetInt();

        if (i >= 1000)
            if (!(i > 1000))
                assert false;
    }
  
}
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: cannot find symbol
    //@ requires i >= 1000;
                 ^
  symbol:   variable i
  location: class assert3
/home/max/Documents/JMLGPT/tmp/assert3.java:4: error: cannot find symbol
    //@ ensures !(i > 1000);
                  ^
  symbol:   variable i
  location: class assert3
/home/max/Documents/JMLGPT/tmp/assert3.java:6: error: cannot find symbol
        int i = Verifier.nondetInt();
                ^
  symbol:   variable Verifier
  location: class assert3
3 errors

class assert3 {

    //@ ensures i >= 1000 ==> !(i > 1000);
    public static void func() {
        int i = (int) (Math.random() * Integer.MAX_VALUE);

        if (i >= 1000)
            if (!(i > 1000))
                assert false;
    }
  
}
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: cannot find symbol
    //@ ensures i >= 1000 ==> !(i > 1000);
                ^
  symbol:   variable i
  location: class assert3
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: cannot find symbol
    //@ ensures i >= 1000 ==> !(i > 1000);
                                ^
  symbol:   variable i
  location: class assert3
2 errors

class assert3 {

    //@ ensures \result >= 1000 ==> !(\result > 1000);
    public static void func() {
        int i = (int) (Math.random() * Integer.MAX_VALUE);

        if (i >= 1000)
            if (!(i > 1000))
                assert false;
    }
  
}
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result >= 1000 ==> !(\result > 1000);
                 ^
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result >= 1000 ==> !(\result > 1000);
                                       ^
2 errors

class assert3 {

    //@ ensures i >= 1000 ==> !(i > 1000);
    public static void func() {
        int i = (int) (Math.random() * Integer.MAX_VALUE);

        if (i >= 1000)
            if (!(i > 1000))
                assert false;
    }
  
}
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: cannot find symbol
    //@ ensures i >= 1000 ==> !(i > 1000);
                ^
  symbol:   variable i
  location: class assert3
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: cannot find symbol
    //@ ensures i >= 1000 ==> !(i > 1000);
                                ^
  symbol:   variable i
  location: class assert3
2 errors

class assert3 {

    //@ ensures \result >= 1000 ==> !(\result > 1000);
    public static void func() {
        int i = (int) (Math.random() * Integer.MAX_VALUE);

        if (i >= 1000)
            if (!(i > 1000))
                assert false;
    }
  
}
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result >= 1000 ==> !(\result > 1000);
                 ^
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result >= 1000 ==> !(\result > 1000);
                                       ^
2 errors

class assert3 {

    //@ ensures i >= 1000 ==> !(i > 1000);
    public static void func() {
        int i = (int) (Math.random() * Integer.MAX_VALUE);

        if (i >= 1000)
            if (!(i > 1000))
                assert false;
    }
  
}
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: cannot find symbol
    //@ ensures i >= 1000 ==> !(i > 1000);
                ^
  symbol:   variable i
  location: class assert3
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: cannot find symbol
    //@ ensures i >= 1000 ==> !(i > 1000);
                                ^
  symbol:   variable i
  location: class assert3
2 errors

class assert3 {

    //@ ensures \result >= 1000 ==> !(\result > 1000);
    public static void func() {
        int i = (int) (Math.random() * Integer.MAX_VALUE);

        if (i >= 1000)
            if (!(i > 1000))
                assert false;
    }
  
}
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result >= 1000 ==> !(\result > 1000);
                 ^
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result >= 1000 ==> !(\result > 1000);
                                       ^
2 errors

class assert3 {

    //@ ensures i >= 1000 ==> !(i > 1000);
    public static void func() {
        int i = (int) (Math.random() * Integer.MAX_VALUE);

        if (i >= 1000)
            if (!(i > 1000))
                assert false;
    }
  
}
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: cannot find symbol
    //@ ensures i >= 1000 ==> !(i > 1000);
                ^
  symbol:   variable i
  location: class assert3
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: cannot find symbol
    //@ ensures i >= 1000 ==> !(i > 1000);
                                ^
  symbol:   variable i
  location: class assert3
2 errors

class assert3 {

    //@ ensures \result >= 1000 ==> !(\result > 1000);
    public static void func() {
        int i = (int) (Math.random() * Integer.MAX_VALUE);

        if (i >= 1000)
            if (!(i > 1000))
                assert false;
    }
  
}
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result >= 1000 ==> !(\result > 1000);
                 ^
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result >= 1000 ==> !(\result > 1000);
                                       ^
2 errors

class assert3 {

    //@ ensures i >= 1000 ==> !(i > 1000);
    public static void func() {
        int i = (int) (Math.random() * Integer.MAX_VALUE);

        if (i >= 1000)
            if (!(i > 1000))
                assert false;
    }
  
}
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: cannot find symbol
    //@ ensures i >= 1000 ==> !(i > 1000);
                ^
  symbol:   variable i
  location: class assert3
/home/max/Documents/JMLGPT/tmp/assert3.java:3: error: cannot find symbol
    //@ ensures i >= 1000 ==> !(i > 1000);
                                ^
  symbol:   variable i
  location: class assert3
2 errors

