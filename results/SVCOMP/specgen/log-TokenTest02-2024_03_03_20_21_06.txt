public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
    public static boolean f() {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
    //@ requires sentence != null;
                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
                                                             ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
                                                                                                 ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
                                                               ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
                                                                                                   ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: error: cannot find symbol
        String[] tokens = sentence.split(" ");
                          ^
  symbol:   variable sentence
  location: class TokenTest02
6 errors

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
    public static boolean f() {
        String sentence = "example sentence for testing";
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
    //@ requires sentence != null;
                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
                                                             ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
                                                                                                 ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
                                                               ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
                                                                                                   ^
  symbol:   variable tokens
  location: class TokenTest02
5 errors

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
    public static boolean f() {
        String sentence = "example sentence for testing";
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
    //@ requires sentence != null;
                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
                                                             ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
                                                                                                 ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
                                                               ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
                                                                                                   ^
  symbol:   variable tokens
  location: class TokenTest02
5 errors

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
    public static boolean f() {
        String sentence = "example sentence for testing";
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
    //@ requires sentence != null;
                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
                                                             ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
                                                                                                 ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
                                                               ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
                                                                                                   ^
  symbol:   variable tokens
  location: class TokenTest02
5 errors

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
    public static boolean f() {
        String sentence = "example sentence for testing";
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("genneration"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
    //@ requires sentence != null;
                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
                                                             ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
                                                                                                 ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
                                                               ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
                                                                                                   ^
  symbol:   variable tokens
  location: class TokenTest02
5 errors

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("generation")) && tokens.length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("generation")) || tokens.length < 4;
    public static boolean checkGeneration(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("generation")) && tokens.length >= 4;
                                                             ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("generation")) && tokens.length >= 4;
                                                                                                ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("generation")) || tokens.length < 4;
                                                               ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("generation")) || tokens.length < 4;
                                                                                                  ^
  symbol:   variable tokens
  location: class TokenTest02
4 errors

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length < 4;
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length < 4;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method checkGenerationHelper
        //@ maintaining 0 <= i && i <= tokens.length;
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 < i && i < 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length < 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 < i && i < tokens.length;  
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 < i && i < 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length < 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkGenerationHelper
        //@ maintaining 0 < i && i < tokens.length;  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 < i && i < 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length <= 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 < i && i <= tokens.length;  
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 < i && i < 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length <= 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkGenerationHelper
        //@ maintaining 0 < i && i <= tokens.length;  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 < i && i <= 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length < 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 < i && i - 1 <= tokens.length;  
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 < i && i <= 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length < 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:13: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkGenerationHelper
        //@ maintaining 0 < i && i - 1 <= tokens.length;  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 < i && i <= 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length <= 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i < tokens.length;  
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 < i && i <= 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length <= 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method checkGenerationHelper
        //@ maintaining 0 <= i && i < tokens.length;  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length < 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i <= tokens.length;  
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length < 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method checkGenerationHelper
        //@ maintaining 0 <= i && i <= tokens.length;  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length <= 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i - 1 <= tokens.length;  
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));
        //@ decreases tokens.length - i;
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length <= 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:15: verify: The prover cannot establish an assertion (LoopDecreasesNonNegative) in method checkGenerationHelper
        //@ decreases tokens.length - i;
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 <= i && i <= 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length < 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i - 1 <= tokens.length;  
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));
        //@ decreases tokens.length - i;  
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 <= i && i <= 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length < 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:15: verify: The prover cannot establish an assertion (LoopDecreasesNonNegative) in method checkGenerationHelper
        //@ decreases tokens.length - i;  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 <= i && i <= 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length <= 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i - 1 <= tokens.length;  
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));
        //@ decreases tokens.length + i;  
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 <= i && i <= 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length <= 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:15: verify: The prover cannot establish an assertion (LoopDecreases) in method checkGenerationHelper
        //@ decreases tokens.length + i;  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 - 1 <= i && i < 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length < 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 <= i && i - 1 <= tokens.length;  
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));
 
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 - 1 <= i && i < 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length < 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method checkGenerationHelper
        //@ maintaining 0 <= i && i - 1 <= tokens.length;  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 - 1 <= i && i < 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length <= 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 - 1 <= i && i < tokens.length;  
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));
 
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 - 1 <= i && i < 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length <= 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method checkGenerationHelper
        //@ maintaining 0 - 1 <= i && i < tokens.length;  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 - 1 <= i && i <= 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length < 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 - 1 <= i && i <= tokens.length;  
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));
 
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 - 1 <= i && i <= 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length < 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method checkGenerationHelper
        //@ maintaining 0 - 1 <= i && i <= tokens.length;  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 - 1 <= i && i <= 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length <= 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
        //@ maintaining 0 - 1 <= i && i - 1 <= tokens.length;  
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));
 
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 - 1 <= i && i <= 3; !sentence.split(" ")[i].equals("generation")) || sentence.split(" ").length <= 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:13: verify: The prover cannot establish an assertion (LoopInvariant) in method checkGenerationHelper
        //@ maintaining 0 - 1 <= i && i - 1 <= tokens.length;  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 < i && i < 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length < 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
 
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));
 
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 < i && i < 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length < 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:14: verify: The prover cannot establish an assertion (LoopInvariant) in method checkGenerationHelper
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 < i && i < 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length <= 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
 
        //@ maintaining (\forall int j; 0 < j && j < i; i == 3 ==> tokens[j].equals("generation"));  
 
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 < i && i < 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length <= 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:14: verify: The prover cannot establish an assertion (LoopInvariant) in method checkGenerationHelper
        //@ maintaining (\forall int j; 0 < j && j < i; i == 3 ==> tokens[j].equals("generation"));  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 < i && i <= 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length < 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
 
        //@ maintaining (\forall int j; 0 < j && j <= i; i == 3 ==> tokens[j].equals("generation"));  
 
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 < i && i <= 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length < 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:14: verify: The prover cannot establish an assertion (LoopInvariant) in method checkGenerationHelper
        //@ maintaining (\forall int j; 0 < j && j <= i; i == 3 ==> tokens[j].equals("generation"));  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 < i && i <= 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length <= 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
 
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));  
 
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 < i && i <= 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length <= 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:14: verify: The prover cannot establish an assertion (LoopInvariant) in method checkGenerationHelper
        //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length < 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
 
        //@ maintaining (\forall int j; 0 <= j && j <= i; i == 3 ==> tokens[j].equals("generation"));  
 
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length < 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:14: verify: The prover cannot establish an assertion (LoopInvariant) in method checkGenerationHelper
        //@ maintaining (\forall int j; 0 <= j && j <= i; i == 3 ==> tokens[j].equals("generation"));  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length <= 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
 
        //@ maintaining (\forall int j; 0 - 1 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));  
 
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length <= 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:14: verify: The prover cannot establish an assertion (LoopInvariant) in method checkGenerationHelper
        //@ maintaining (\forall int j; 0 - 1 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 <= i && i <= 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length < 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
 
        //@ maintaining (\forall int j; 0 - 1 <= j && j <= i; i == 3 ==> tokens[j].equals("generation"));  
 
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 <= i && i <= 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length < 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:14: verify: The prover cannot establish an assertion (LoopInvariant) in method checkGenerationHelper
        //@ maintaining (\forall int j; 0 - 1 <= j && j <= i; i == 3 ==> tokens[j].equals("generation"));  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 <= i && i <= 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length <= 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
 
        //@ maintaining (\exists int j; 0 < j && j < i; i == 3 ==> tokens[j].equals("generation"));  
 
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 <= i && i <= 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length <= 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:14: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkGenerationHelper
        //@ maintaining (\exists int j; 0 < j && j < i; i == 3 ==> tokens[j].equals("generation"));  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 - 1 <= i && i < 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length < 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
 
        //@ maintaining (\exists int j; 0 < j && j <= i; i == 3 ==> tokens[j].equals("generation"));  
 
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 - 1 <= i && i < 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length < 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:14: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkGenerationHelper
        //@ maintaining (\exists int j; 0 < j && j <= i; i == 3 ==> tokens[j].equals("generation"));  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 - 1 <= i && i < 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length <= 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
 
        //@ maintaining (\exists int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));  
 
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 - 1 <= i && i < 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length <= 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:14: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkGenerationHelper
        //@ maintaining (\exists int j; 0 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 - 1 <= i && i <= 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length < 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
 
        //@ maintaining (\exists int j; 0 <= j && j <= i; i == 3 ==> tokens[j].equals("generation"));  
 
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 - 1 <= i && i <= 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length < 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:14: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkGenerationHelper
        //@ maintaining (\exists int j; 0 <= j && j <= i; i == 3 ==> tokens[j].equals("generation"));  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\exists int i; 0 - 1 <= i && i <= 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length <= 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
 
        //@ maintaining (\exists int j; 0 - 1 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));  
 
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\exists int i; 0 - 1 <= i && i <= 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length <= 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:14: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkGenerationHelper
        //@ maintaining (\exists int j; 0 - 1 <= j && j < i; i == 3 ==> tokens[j].equals("generation"));  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\forall int i; 0 < i && i < 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length < 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
 
        //@ maintaining (\exists int j; 0 - 1 <= j && j <= i; i == 3 ==> tokens[j].equals("generation"));  
 
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\forall int i; 0 < i && i < 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length < 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:14: verify: The prover cannot establish an assertion (LoopInvariantBeforeLoop) in method checkGenerationHelper
        //@ maintaining (\exists int j; 0 - 1 <= j && j <= i; i == 3 ==> tokens[j].equals("generation"));  
            ^
3 verification failures

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length >= 4;
    //@ ensures !\result ==> (\forall int i; 0 < i && i < 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length <= 4;  
    public static boolean checkGeneration(String sentence) {
        return checkGenerationHelper(sentence);
    }
    
    private static boolean checkGenerationHelper(String sentence) {
        String[] tokens = sentence.split(" ");

        int i = 0;
 
 
 
        for (String token : tokens) {
            if (i == 3 && !token.equals("generation")) {
                return false;
            }
            ++i;
        }
        return true;
    }
}

/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method checkGeneration
        return checkGenerationHelper(sentence);
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:6:
    //@ ensures !\result ==> (\forall int i; 0 < i && i < 3; !sentence.split(" ")[i].equals("generation")) && sentence.split(" ").length <= 4;  
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:17: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method checkGenerationHelper: (Caller: TokenTest02.checkGenerationHelper(java.lang.String), Callee: java.lang.String.equals(java.lang.Object))
            if (i == 3 && !token.equals("generation")) {
                                       ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:17:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
4 verification failures

