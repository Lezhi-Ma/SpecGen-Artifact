public class Primes {

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == n*m;
  public static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
  public static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n != Integer.MIN_VALUE && m != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
  public static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                                                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                                                ^
6 errors

public class Primes {

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
  public static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n != Integer.MIN_VALUE && m != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
  public static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:4: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:4: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                                                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                                                ^
8 errors

public class Primes {

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
  public static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n != Integer.MIN_VALUE && m != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
  public static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:4: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:4: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                                                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                                                ^
8 errors

public class Primes {

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
  public static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n != Integer.MIN_VALUE && m != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
  public static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:4: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:4: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                                                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                                                ^
8 errors

public class Primes {

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
  public static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n != Integer.MIN_VALUE && m != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
  public static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:4: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:4: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                                                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                                                ^
8 errors

public class Primes {

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
  public static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n != Integer.MIN_VALUE && m != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
  public static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:4: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:4: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                                                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                                                ^
8 errors

public class Primes {

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
  public static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n != Integer.MIN_VALUE && m != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
  public static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:4: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:4: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                                                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                                                ^
8 errors

public class Primes {

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
  public static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n != Integer.MIN_VALUE && m != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
  public static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:4: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:4: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                                                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                                                ^
8 errors

public class Primes {

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
  public static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n != Integer.MIN_VALUE && m != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
  public static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:4: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:4: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                                                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                                                ^
8 errors

public class Primes {

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m != Integer.MIN_VALUE;
  //@ ensures \result == (n % m == 0) ? 1 : 0;
  public static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
  public static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n != Integer.MIN_VALUE && m != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
  public static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:4: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:4: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incomparable types: int and boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:19: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (n % m == 0) ? 1 : 0;
                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                                                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:43: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                                                ^
8 errors

public class Primes {

  //@ requires m != Integer.MIN_VALUE;
 
  public static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m != Integer.MIN_VALUE;
 
  public static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n != Integer.MIN_VALUE;
  //@ ensures \result == (is_prime_(n, n + 1) == 1) ? 1 : 0;  
  public static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n != Integer.MIN_VALUE && m != Integer.MIN_VALUE;
 
  public static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}

/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incomparable types: int and boolean
  //@ ensures \result == (is_prime_(n, n + 1) == 1) ? 1 : 0;  
                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:37: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result == (is_prime_(n, n + 1) == 1) ? 1 : 0;  
                                                    ^
2 errors

public class Primes {

  //@ requires m != Integer.MIN_VALUE;
 
  public static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m != Integer.MIN_VALUE;
 
  public static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n != Integer.MIN_VALUE;
 
  public static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n != Integer.MIN_VALUE && m != Integer.MIN_VALUE;
 
  public static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}

/home/max/Documents/JMLGPT/tmp/Primes.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/Primes.java:44:) in method is_prime
    return is_prime_(n, n - 1);
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Primes.java:39:
  public static int is_prime_(int n, int m) {
                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:42: verify: Precondition conjunct is false: m != Integer.MIN_VALUE
  //@ requires n != Integer.MIN_VALUE && m != Integer.MIN_VALUE;
                                           ^
3 verification failures

