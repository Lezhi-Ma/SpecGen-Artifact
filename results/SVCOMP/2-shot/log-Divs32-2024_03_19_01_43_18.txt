public class Divs32 {

    static final int MAX_INT = 2147483647;
    static final int MIN_INT = -2147483648;

    //@ requires denominator != 0;
    //@ ensures \result == numerator / denominator;
    //@ ensures \result == MAX_INT && numerator >= 0 || \result == MIN_INT && numerator < 0 ==> denominator == 0;
    //@ ensures \result == numerator / denominator && \result < 0 ==> ((numerator < 0) != (denominator < 0));
    public static int divS32(int numerator, int denominator) {
        int quotient;
        int tempAbsQuotient;
        boolean quotientNeedsNegation = false;
        if (denominator == 0) {
            quotient = numerator >= 0 ? MAX_INT : MIN_INT;
            /* Divide by zero handler */
        } else {
            if ((numerator < 0) && (denominator > 0)) quotientNeedsNegation = true;
            else if ((numerator > 0) && (denominator < 0)) quotientNeedsNegation = true;
            else quotientNeedsNegation = false;

            int calcDenominator;
            if (denominator >= 0) calcDenominator = denominator;
            else calcDenominator = -denominator;

            tempAbsQuotient = (int) (numerator >= 0 ? numerator : -numerator) / calcDenominator;
            quotient = quotientNeedsNegation ? -(int) tempAbsQuotient : (int) tempAbsQuotient;
        }
        return quotient;
    }
}

