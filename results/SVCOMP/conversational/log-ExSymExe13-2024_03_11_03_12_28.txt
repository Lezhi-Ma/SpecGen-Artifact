class Main {
  static int field;
  static int field2;

  //@ requires arg >= 0;
  //@ ensures \result == true ==> field == 9 && \result == inst.test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = 9;
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures r == x + z && z == x - 3 - 4 && (r < 99 ==> \result == false) && (r >= 99 ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result == true ==> field == 9 && \result == inst.test(arg, arg, field2);
                                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result == true ==> field == 9 && \result == inst.test(arg, arg, field2);
                                                                               ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:6: error: cannot find symbol
  //@ ensures \result == true ==> field == 9 && \result == inst.test(arg, arg, field2);
                                                           ^
  symbol:   variable inst
  location: class Main
3 errors

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;

  //@ requires arg >= 0;
  //@ ensures \result == true ==> field == 9 && \result == inst.test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = 9;
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures r == x + z && z == x - 3 - 4 && (r < 99 ==> \result == false) && (r >= 99 ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: cannot find symbol
  //@ ensures \result == true ==> field == 9 && \result == inst.test(arg, arg, field2);
                                                           ^
  symbol:   variable inst
  location: class Main
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;

  //@ requires arg >= 0;
  //@ ensures \result == true ==> field == 9 && \result == this.test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = 9;
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures r == x + z && z == x - 3 - 4 && (r < 99 ==> \result == false) && (r >= 99 ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: non-static variable this cannot be referenced from a static context
  //@ ensures \result == true ==> field == 9 && \result == this.test(arg, arg, field2);
                                                           ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;

  //@ requires arg >= 0;
  //@ ensures \result == true ==> field == 9 && \result == new Main().test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = 9;
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures r == x + z && z == x - 3 - 4 && (r < 99 ==> \result == false) && (r >= 99 ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == true ==> field == 9 && \result == new Main().test(arg, arg, field2);
                                                           ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;

  //@ requires arg >= 0;
  //@ ensures \result == true ==> field == 9 && \result == new Main().test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = 9;
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures r == x + z && z == x - 3 - 4 && (r < 99 ==> \result == false) && (r >= 99 ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == true ==> field == 9 && \result == new Main().test(arg, arg, field2);
                                                           ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;

  //@ requires arg >= 0;
  //@ ensures \result == true ==> field == 9 && \result == test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = 9;
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures r == x + z && z == x - 3 - 4 && (r < 99 ==> \result == false) && (r >= 99 ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result == true ==> field == 9 && \result == test(arg, arg, field2);
                                                           ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;

  //@ requires arg >= 0;
  //@ ensures \result == true ==> field == 9 && \result == new Main().test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = 9;
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures r == x + z && z == x - 3 - 4 && (r < 99 ==> \result == false) && (r >= 99 ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == true ==> field == 9 && \result == new Main().test(arg, arg, field2);
                                                           ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;

  //@ requires arg >= 0;
  //@ ensures \result == true ==> field == 9 && \result == test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = 9;
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures r == x + z && z == x - 3 - 4 && (r < 99 ==> \result == false) && (r >= 99 ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result == true ==> field == 9 && \result == test(arg, arg, field2);
                                                           ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;

  //@ requires arg >= 0;
  //@ ensures \result == true ==> field == 9 && \result == new Main().test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = 9;
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures r == x + z && z == x - 3 - 4 && (r < 99 ==> \result == false) && (r >= 99 ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == true ==> field == 9 && \result == new Main().test(arg, arg, field2);
                                                           ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;

  //@ requires arg >= 0;
  //@ ensures \result == true ==> field == 9 && \result == test(arg, arg, field2);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = arg;

    Main inst = new Main();
    field = 9;
    return inst.test(x, arg, field2);
  }
  
  //@ requires true;
  //@ ensures r == x + z && z == x - 3 - 4 && (r < 99 ==> \result == false) && (r >= 99 ==> \result == true);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe13");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r < 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < z) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:8: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result == true ==> field == 9 && \result == test(arg, arg, field2);
                                                           ^
1 error

