class A {}

class B extends A {}

class C extends B {}

public class ClassCastException2 {
  //@ ensures \result <==> \typeof(c) == \type(C) && \typeof(b) == \type(B);
  public static boolean f() {
    try {
      A c = new C();
      B b = (B) c;
    } catch (ClassCastException exc) {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> \typeof(c) == \type(C) && \typeof(b) == \type(B);
                                   ^
  symbol:   variable c
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> \typeof(c) == \type(C) && \typeof(b) == \type(B);
                                                             ^
  symbol:   variable b
  location: class ClassCastException2
2 errors

class A {}

class B extends A {}

class C extends B {}

public class ClassCastException2 {
  //@ ensures \result <==> \typeof(\result) == \type(boolean) && (\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B));
  public static boolean f() {
    try {
      A c = new C();
      B b = (B) c;
    } catch (ClassCastException exc) {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> \typeof(\result) == \type(boolean) && (\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B));
                                                                          ^
  symbol:   variable c
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> \typeof(\result) == \type(boolean) && (\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B));
                                                                                                    ^
  symbol:   variable b
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> \typeof(\result) == \type(boolean) && (\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B));
                                                                                                                                ^
  symbol:   variable c
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> \typeof(\result) == \type(boolean) && (\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B));
                                                                                                                                                          ^
  symbol:   variable b
  location: class ClassCastException2
4 errors

class A {}

class B extends A {}

class C extends B {}

public class ClassCastException2 {
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
  public static boolean f() {
    try {
      A c = new C();
      B b = (B) c;
    } catch (ClassCastException exc) {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                             ^
  symbol:   variable c
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                                                       ^
  symbol:   variable b
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                                                                                   ^
  symbol:   variable c
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                                                                                                             ^
  symbol:   variable b
  location: class ClassCastException2
4 errors

class A {}

class B extends A {}

class C extends B {}

public class ClassCastException2 {
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(A) == \type(C) && \typeof(B) == \type(B)) || (\typeof(A) != \type(C) || \typeof(B) != \type(B)));
  public static boolean f() {
    try {
      A c = new C();
      B b = (B) c;
    } catch (ClassCastException exc) {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(A) == \type(C) && \typeof(B) == \type(B)) || (\typeof(A) != \type(C) || \typeof(B) != \type(B)));
                                                                             ^
  symbol:   variable A
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(A) == \type(C) && \typeof(B) == \type(B)) || (\typeof(A) != \type(C) || \typeof(B) != \type(B)));
                                                                                                       ^
  symbol:   variable B
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(A) == \type(C) && \typeof(B) == \type(B)) || (\typeof(A) != \type(C) || \typeof(B) != \type(B)));
                                                                                                                                   ^
  symbol:   variable A
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(A) == \type(C) && \typeof(B) == \type(B)) || (\typeof(A) != \type(C) || \typeof(B) != \type(B)));
                                                                                                                                                             ^
  symbol:   variable B
  location: class ClassCastException2
4 errors

class A {}

class B extends A {}

class C extends B {}

public class ClassCastException2 {
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
  public static boolean f() {
    try {
      A c = new C();
      B b = (B) c;
    } catch (ClassCastException exc) {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                             ^
  symbol:   variable c
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                                                       ^
  symbol:   variable b
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                                                                                   ^
  symbol:   variable c
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                                                                                                             ^
  symbol:   variable b
  location: class ClassCastException2
4 errors

class A {}

class B extends A {}

class C extends B {}

public class ClassCastException2 {
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(\old(c)) == \type(C) && \typeof(\old(b)) == \type(B)) || (\typeof(\old(c)) != \type(C) || \typeof(\old(b)) != \type(B)));
  public static boolean f() {
    try {
      A c = new C();
      B b = (B) c;
    } catch (ClassCastException exc) {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(\old(c)) == \type(C) && \typeof(\old(b)) == \type(B)) || (\typeof(\old(c)) != \type(C) || \typeof(\old(b)) != \type(B)));
                                                                                  ^
  symbol:   variable c
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(\old(c)) == \type(C) && \typeof(\old(b)) == \type(B)) || (\typeof(\old(c)) != \type(C) || \typeof(\old(b)) != \type(B)));
                                                                                                                  ^
  symbol:   variable b
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(\old(c)) == \type(C) && \typeof(\old(b)) == \type(B)) || (\typeof(\old(c)) != \type(C) || \typeof(\old(b)) != \type(B)));
                                                                                                                                                    ^
  symbol:   variable c
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(\old(c)) == \type(C) && \typeof(\old(b)) == \type(B)) || (\typeof(\old(c)) != \type(C) || \typeof(\old(b)) != \type(B)));
                                                                                                                                                                                    ^
  symbol:   variable b
  location: class ClassCastException2
4 errors

class A {}

class B extends A {}

class C extends B {}

public class ClassCastException2 {
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
  public static boolean f() {
    try {
      A c = new C();
      B b = (B) c;
    } catch (ClassCastException exc) {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                             ^
  symbol:   variable c
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                                                       ^
  symbol:   variable b
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                                                                                   ^
  symbol:   variable c
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                                                                                                             ^
  symbol:   variable b
  location: class ClassCastException2
4 errors

class A {}

class B extends A {}

class C extends B {}

public class ClassCastException2 {
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B))));
  public static boolean f() {
    try {
      A c = new C();
      B b = (B) c;
    } catch (ClassCastException exc) {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B))));
                                                                                                                      ^
  symbol:   variable c
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B))));
                                                                                                                                                ^
  symbol:   variable b
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B))));
                                                                                                                                                                            ^
  symbol:   variable c
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B))));
                                                                                                                                                                                                      ^
  symbol:   variable b
  location: class ClassCastException2
4 errors

class A {}

class B extends A {}

class C extends B {}

public class ClassCastException2 {
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
  public static boolean f() {
    try {
      A c = new C();
      B b = (B) c;
    } catch (ClassCastException exc) {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                             ^
  symbol:   variable c
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                                                       ^
  symbol:   variable b
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                                                                                   ^
  symbol:   variable c
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                                                                                                             ^
  symbol:   variable b
  location: class ClassCastException2
4 errors

class A {}

class B extends A {}

class C extends B {}

public class ClassCastException2 {
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
  public static boolean f() {
    try {
      A c = new C();
      B b = (B) c;
    } catch (ClassCastException exc) {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                             ^
  symbol:   variable c
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                                                       ^
  symbol:   variable b
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                                                                                   ^
  symbol:   variable c
  location: class ClassCastException2
/home/max/Documents/JMLGPT/tmp/ClassCastException2.java:8: error: cannot find symbol
  //@ ensures \result <==> (\typeof(\result) == \type(boolean)) && ((\typeof(c) == \type(C) && \typeof(b) == \type(B)) || (\typeof(c) != \type(C) || \typeof(b) != \type(B)));
                                                                                                                                                             ^
  symbol:   variable b
  location: class ClassCastException2
4 errors

