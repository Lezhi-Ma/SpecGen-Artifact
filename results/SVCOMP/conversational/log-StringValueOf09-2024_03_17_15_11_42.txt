public class StringValueOf09 {
  /*@ public normal_behavior
    @    requires arg != null;
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    requires Double.MIN_VALUE <= Double.parseDouble(arg) && Double.parseDouble(arg) <= Double.MAX_VALUE;
    @    assignable \nothing;
    @    ensures \result <==> String.valueOf(Double.parseDouble(arg)).equals("33.3333");
    @*/
  public static boolean f(String arg) {
    double doubleValue = Double.parseDouble(arg); // no suffix, double is default
    String tmp = String.valueOf(doubleValue);
    return tmp.equals("33.3333");
  }
}
error: An error while executing a proof script for f: (error "Error writing to solver: (assert (= __JML_FeasCheck_ 0)) java.io.IOException: Stream closed")
1 error

public class StringValueOf09 {
  /*@ public normal_behavior
    @    requires arg != null;
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    requires Double.MIN_VALUE <= Double.parseDouble(arg) && Double.parseDouble(arg) <= Double.MAX_VALUE;
    @    assignable \nothing;
    @    ensures \result <==> String.valueOf(Double.parseDouble(arg)).equals("33.3333");
    @*/
  public static boolean f(String arg) {
    double doubleValue = Double.parseDouble(arg); // no suffix, double is default
    String tmp = String.valueOf(doubleValue);
    return tmp.equals("33.3333");
  }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 222298112 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid353.log

public class StringValueOf09 {
  /*@ public normal_behavior
    @    requires arg != null;
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    requires Double.MIN_VALUE <= Double.parseDouble(arg) && Double.parseDouble(arg) <= Double.MAX_VALUE;
    @    assignable \nothing;
    @    ensures \result <==> String.valueOf(Double.parseDouble(arg)).equals("33.3333");
    @*/
  public static boolean f(String arg) {
    double doubleValue = Double.parseDouble(arg); // no suffix, double is default
    String tmp = String.valueOf(doubleValue);
    return tmp.equals("33.3333");
  }
}
error: An error while executing a proof script for f: (error "Error writing to solver: (define-fun BL_2058_then_8771__A2 () Bool (= |`conditionalResult_8982_2058_2062___3849| |_JML__tmp8983|)) java.io.IOException: Stream closed")
1 error

public class StringValueOf09 {
  /*@ public normal_behavior
    @    requires arg != null;
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    requires Double.MIN_VALUE <= Double.parseDouble(arg) && Double.parseDouble(arg) <= Double.MAX_VALUE;
    @    assignable \nothing;
    @    ensures \result <==> String.valueOf(Double.parseDouble(arg)).equals("33.3333");
    @*/
  public static boolean f(String arg) {
    double doubleValue = Double.parseDouble(arg); // no suffix, double is default
    String tmp = String.valueOf(doubleValue);
    return tmp.equals("33.3333");
  }
}
error: An error while executing a proof script for f: (error "Error writing to solver: (define-fun BL_1894_afterIf_6356__A1 () Bool (= |_JML__tmp6542| (java_lang_CharSequence_equal$_H2_2391 |_JML__tmp6519| |_JML__tmp6538| |_JML__tmp6520| |_JML__tmp6539| |_JML__tmp6541|))) java.io.IOException: Broken pipe")
1 error

public class StringValueOf09 {
  /*@ public normal_behavior
    @    requires arg != null;
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    requires Double.MIN_VALUE <= Double.parseDouble(arg) && Double.parseDouble(arg) <= Double.MAX_VALUE;
    @    assignable \nothing;
    @    ensures \result <==> String.valueOf(Double.parseDouble(arg)).equals("33.3333");
    @*/
  public static boolean f(String arg) {
    double doubleValue = Double.parseDouble(arg); // no suffix, double is default
    String tmp = String.valueOf(doubleValue);
    return tmp.equals("33.3333");
  }
}
error: An error while executing a proof script for f: (error "Error writing to solver: (define-fun |_$CPRE__492_4_3| () Bool (and (distinct |_JML__tmp7967| NULL) (javaSubType (javaTypeOf |_JML__tmp7967|) T_java_lang_String))) java.io.IOException: Broken pipe")
1 error

public class StringValueOf09 {
  /*@ public normal_behavior
    @    requires arg != null;
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    requires Double.MIN_VALUE <= Double.parseDouble(arg) && Double.parseDouble(arg) <= Double.MAX_VALUE;
    @    assignable \nothing;
    @    ensures \result <==> String.valueOf(Double.parseDouble(arg)).equals("33.3333");
    @*/
  public static boolean f(String arg) {
    double doubleValue = Double.parseDouble(arg); // no suffix, double is default
    String tmp = String.valueOf(doubleValue);
    return tmp.equals("33.3333");
  }
}
error: An error while executing a proof script for f: (error "Error writing to solver: (assert (= __JML_FeasCheck_ 0)) java.io.IOException: Broken pipe")
1 error

public class StringValueOf09 {
  /*@ public normal_behavior
    @    requires arg != null;
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    requires Double.MIN_VALUE <= Double.parseDouble(arg) && Double.parseDouble(arg) <= Double.MAX_VALUE;
    @    assignable \nothing;
    @    ensures \result <==> String.valueOf(Double.parseDouble(arg)).equals("33.3333");
    @*/
  public static boolean f(String arg) {
    double doubleValue = Double.parseDouble(arg); // no suffix, double is default
    String tmp = String.valueOf(doubleValue);
    return tmp.equals("33.3333");
  }
}
error: An error while executing a proof script for f: (error "Error writing to solver: (assert (= __JML_FeasCheck_ 0)) java.io.IOException: Stream closed")
1 error

public class StringValueOf09 {
  /*@ public normal_behavior
    @    requires arg != null;
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    requires Double.MIN_VALUE <= Double.parseDouble(arg) && Double.parseDouble(arg) <= Double.MAX_VALUE;
    @    assignable \nothing;
    @    ensures \result <==> String.valueOf(Double.parseDouble(arg)).equals("33.3333");
    @*/
  public static boolean f(String arg) {
    double doubleValue = Double.parseDouble(arg); // no suffix, double is default
    String tmp = String.valueOf(doubleValue);
    return tmp.equals("33.3333");
  }
}
error: An error while executing a proof script for f: (error "Error writing to solver: (define-fun BL_18239_else_7134__A2 () Bool (= |`conditionalResult_7335_18239_18245___31-1990068671| |_JML__tmp7336|)) java.io.IOException: Stream closed")
1 error

public class StringValueOf09 {
  /*@ public normal_behavior
    @    requires arg != null;
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    requires Double.MIN_VALUE <= Double.parseDouble(arg) && Double.parseDouble(arg) <= Double.MAX_VALUE;
    @    assignable \nothing;
    @    ensures \result <==> String.valueOf(Double.parseDouble(arg)).equals("33.3333");
    @*/
  public static boolean f(String arg) {
    double doubleValue = Double.parseDouble(arg); // no suffix, double is default
    String tmp = String.valueOf(doubleValue);
    return tmp.equals("33.3333");
  }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 167772160 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid627.log

public class StringValueOf09 {
  /*@ public normal_behavior
    @    requires arg != null;
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    requires Double.MIN_VALUE <= Double.parseDouble(arg) && Double.parseDouble(arg) <= Double.MAX_VALUE;
    @    assignable \nothing;
    @    ensures \result <==> String.valueOf(Double.parseDouble(arg)).equals("33.3333");
    @*/
  public static boolean f(String arg) {
    double doubleValue = Double.parseDouble(arg); // no suffix, double is default
    String tmp = String.valueOf(doubleValue);
    return tmp.equals("33.3333");
  }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 233832448 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid659.log

