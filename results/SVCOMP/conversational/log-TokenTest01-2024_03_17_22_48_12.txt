public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length == 4) return false;

        int i = 0;
        for (String token : tokens) {
            System.out.println(token);
            if (i == 0) {
                if (!token.equals("automatic"))
                    return false;
            }
            else if (i == 1) {
                if (!token.equals("test"))
                    return false;
            }
            else if (i == 2) {
                if (!token.equals("case"))
                    return false;
            }
            else if (i == 3) {
                if (!token.equals("generation"))
                    return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
                                                           ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
                                                                                    ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
                                                                                                                     ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
                                                                                                                                                 ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
                                                                                                                                                                             ^
  symbol:   variable tokens
  location: class TokenTest01
5 errors

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i < 4 ==> sentence.split(" ")[i].equals("automatic") || sentence.split(" ")[i].equals("test") || sentence.split(" ")[i].equals("case") || sentence.split(" ")[i].equals("generation"));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length == 4) return false;

        int i = 0;
        for (String token : tokens) {
            System.out.println(token);
            if (i == 0) {
                if (!token.equals("automatic"))
                    return false;
            }
            else if (i == 1) {
                if (!token.equals("test"))
                    return false;
            }
            else if (i == 2) {
                if (!token.equals("case"))
                    return false;
            }
            else if (i == 3) {
                if (!token.equals("generation"))
                    return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i < 4 ==> sentence.split(" ")[i].equals("automatic") || sentence.split(" ")[i].equals("test") || sentence.split(" ")[i].equals("case") || sentence.split(" ")[i].equals("generation"));
                                                           ^
  symbol:   variable sentence
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i < 4 ==> sentence.split(" ")[i].equals("automatic") || sentence.split(" ")[i].equals("test") || sentence.split(" ")[i].equals("case") || sentence.split(" ")[i].equals("generation"));
                                                                                                 ^
  symbol:   variable sentence
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i < 4 ==> sentence.split(" ")[i].equals("automatic") || sentence.split(" ")[i].equals("test") || sentence.split(" ")[i].equals("case") || sentence.split(" ")[i].equals("generation"));
                                                                                                                                               ^
  symbol:   variable sentence
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i < 4 ==> sentence.split(" ")[i].equals("automatic") || sentence.split(" ")[i].equals("test") || sentence.split(" ")[i].equals("case") || sentence.split(" ")[i].equals("generation"));
                                                                                                                                                                                        ^
  symbol:   variable sentence
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i < 4 ==> sentence.split(" ")[i].equals("automatic") || sentence.split(" ")[i].equals("test") || sentence.split(" ")[i].equals("case") || sentence.split(" ")[i].equals("generation"));
                                                                                                                                                                                                                                 ^
  symbol:   variable sentence
  location: class TokenTest01
5 errors

public class TokenTest01 {
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i < 4 ==> sentence.split(" ")[i].equals("automatic") || sentence.split(" ")[i].equals("test") || sentence.split(" ")[i].equals("case") || sentence.split(" ")[i].equals("generation"));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length == 4) return false;

        int i = 0;
        for (String token : tokens) {
            System.out.println(token);
            if (i == 0) {
                if (!token.equals("automatic"))
                    return false;
            }
            else if (i == 1) {
                if (!token.equals("test"))
                    return false;
            }
            else if (i == 2) {
                if (!token.equals("case"))
                    return false;
            }
            else if (i == 3) {
                if (!token.equals("generation"))
                    return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i < 4 ==> sentence.split(" ")[i].equals("automatic") || sentence.split(" ")[i].equals("test") || sentence.split(" ")[i].equals("case") || sentence.split(" ")[i].equals("generation"));
                                                           ^
  symbol:   variable sentence
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i < 4 ==> sentence.split(" ")[i].equals("automatic") || sentence.split(" ")[i].equals("test") || sentence.split(" ")[i].equals("case") || sentence.split(" ")[i].equals("generation"));
                                                                                                 ^
  symbol:   variable sentence
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i < 4 ==> sentence.split(" ")[i].equals("automatic") || sentence.split(" ")[i].equals("test") || sentence.split(" ")[i].equals("case") || sentence.split(" ")[i].equals("generation"));
                                                                                                                                               ^
  symbol:   variable sentence
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i < 4 ==> sentence.split(" ")[i].equals("automatic") || sentence.split(" ")[i].equals("test") || sentence.split(" ")[i].equals("case") || sentence.split(" ")[i].equals("generation"));
                                                                                                                                                                                        ^
  symbol:   variable sentence
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:2: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i < 4 ==> sentence.split(" ")[i].equals("automatic") || sentence.split(" ")[i].equals("test") || sentence.split(" ")[i].equals("case") || sentence.split(" ")[i].equals("generation"));
                                                                                                                                                                                                                                 ^
  symbol:   variable sentence
  location: class TokenTest01
5 errors

public class TokenTest01 {
    //@ requires true;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length == 4) return false;

        int i = 0;
        for (String token : tokens) {
            System.out.println(token);
            if (i == 0) {
                if (!token.equals("automatic"))
                    return false;
            }
            else if (i == 1) {
                if (!token.equals("test"))
                    return false;
            }
            else if (i == 2) {
                if (!token.equals("case"))
                    return false;
            }
            else if (i == 3) {
                if (!token.equals("generation"))
                    return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
                                                           ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
                                                                                    ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
                                                                                                                     ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
                                                                                                                                                 ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
                                                                                                                                                                             ^
  symbol:   variable tokens
  location: class TokenTest01
5 errors

public class TokenTest01 {
    //@ requires true;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i < 4 ==> sentence.split(" ")[i].equals("automatic") || sentence.split(" ")[i].equals("test") || sentence.split(" ")[i].equals("case") || sentence.split(" ")[i].equals("generation"));
    public static boolean f() {
        String sentence = "automatic test case generation";
        String[] tokens = sentence.split(" ");
        if(tokens.length == 4) return false;

        int i = 0;
        for (String token : tokens) {
            System.out.println(token);
            if (i == 0) {
                if (!token.equals("automatic"))
                    return false;
            }
            else if (i == 1) {
                if (!token.equals("test"))
                    return false;
            }
            else if (i == 2) {
                if (!token.equals("case"))
                    return false;
            }
            else if (i == 3) {
                if (!token.equals("generation"))
                    return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i < 4 ==> sentence.split(" ")[i].equals("automatic") || sentence.split(" ")[i].equals("test") || sentence.split(" ")[i].equals("case") || sentence.split(" ")[i].equals("generation"));
                                                           ^
  symbol:   variable sentence
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i < 4 ==> sentence.split(" ")[i].equals("automatic") || sentence.split(" ")[i].equals("test") || sentence.split(" ")[i].equals("case") || sentence.split(" ")[i].equals("generation"));
                                                                                                 ^
  symbol:   variable sentence
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i < 4 ==> sentence.split(" ")[i].equals("automatic") || sentence.split(" ")[i].equals("test") || sentence.split(" ")[i].equals("case") || sentence.split(" ")[i].equals("generation"));
                                                                                                                                               ^
  symbol:   variable sentence
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i < 4 ==> sentence.split(" ")[i].equals("automatic") || sentence.split(" ")[i].equals("test") || sentence.split(" ")[i].equals("case") || sentence.split(" ")[i].equals("generation"));
                                                                                                                                                                                        ^
  symbol:   variable sentence
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i < 4 ==> sentence.split(" ")[i].equals("automatic") || sentence.split(" ")[i].equals("test") || sentence.split(" ")[i].equals("case") || sentence.split(" ")[i].equals("generation"));
                                                                                                                                                                                                                                 ^
  symbol:   variable sentence
  location: class TokenTest01
5 errors

public class TokenTest01 {
    //@ requires true;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
    public static boolean f(String sentence) {
        String[] tokens = sentence.split(" ");
        if(tokens.length == 4) return false;

        int i = 0;
        for (String token : tokens) {
            System.out.println(token);
            if (i == 0) {
                if (!token.equals("automatic"))
                    return false;
            }
            else if (i == 1) {
                if (!token.equals("test"))
                    return false;
            }
            else if (i == 2) {
                if (!token.equals("case"))
                    return false;
            }
            else if (i == 3) {
                if (!token.equals("generation"))
                    return false;
            }
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
                                                           ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
                                                                                    ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
                                                                                                                     ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
                                                                                                                                                 ^
  symbol:   variable tokens
  location: class TokenTest01
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: error: cannot find symbol
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
                                                                                                                                                                             ^
  symbol:   variable tokens
  location: class TokenTest01
5 errors

public class TokenTest01 {
    //@ requires true;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
    public static boolean f(String[] tokens) {
        if(tokens.length != 4) return false;

        for (String token : tokens) {
            if (!token.equals("automatic") && !token.equals("test") && !token.equals("case") && !token.equals("generation")) {
                return false;
            }
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:3:) in method f
        if(tokens.length != 4) return false;
                               ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:5:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; i < 4 ==> tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
        ^
2 verification failures

public class TokenTest01 {
    //@ requires tokens.length == 4;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
    public static boolean f(String[] tokens) {
        for (String token : tokens) {
            if (!token.equals("automatic") && !token.equals("test") && !token.equals("case") && !token.equals("generation")) {
                return false;
            }
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:10: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:10:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
        ^
2 verification failures

public class TokenTest01 {
    //@ requires tokens.length == 4;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
    public static boolean f(String[] tokens) {
        for (String token : tokens) {
            if (!token.equals("automatic") && !token.equals("test") && !token.equals("case") && !token.equals("generation")) {
                return false;
            }
        }
        return tokens.length == 4;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:10: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:3:) in method f
        return tokens.length == 4;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:10:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
        ^
2 verification failures

public class TokenTest01 {
    //@ requires tokens.length == 4;
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
    public static boolean f(String[] tokens) {
        boolean foundAutomatic = false;
        boolean foundTest = false;
        boolean foundCase = false;
        boolean foundGeneration = false;

        for (String token : tokens) {
            if (token.equals("automatic")) {
                foundAutomatic = true;
            } else if (token.equals("test")) {
                foundTest = true;
            } else if (token.equals("case")) {
                foundCase = true;
            } else if (token.equals("generation")) {
                foundGeneration = true;
            }
        }

        return foundAutomatic && foundTest && foundCase && foundGeneration;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:3:) in method f
        return foundAutomatic && foundTest && foundCase && foundGeneration;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest01.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest01.java:22:
    //@ ensures \result <==> (\forall int i; 0 <= i && i < tokens.length; tokens[i].equals("automatic") || tokens[i].equals("test") || tokens[i].equals("case") || tokens[i].equals("generation"));
        ^
2 verification failures

