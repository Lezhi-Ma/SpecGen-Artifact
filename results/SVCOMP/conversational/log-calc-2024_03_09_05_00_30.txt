public class calc {
    //@ requires args != null;
    //@ requires args.length >= 2;
    //@ ensures args.length < 2 ==> System.out.println("need two arguments");
    public static void fun(String[] args) {
        if (args.length < 2) {
            System.out.println("need two arguments");
            return;
        }
        new calc().do_stuff(args[0], args[1]);
    }

    //@ requires a != null && b != null;
    //@ requires \typeof(a) == \type(String) && \typeof(b) == \type(String);
    //@ requires (\forall int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
    //@ requires (\forall int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
    //@ ensures (Integer.parseInt(a) != Integer.parseInt(b)) || (Integer.parseInt(a) == Integer.parseInt(b));
    public void do_stuff(String a, String b) {
        try {
            int x = Integer.parseInt(a);
            int y = Integer.parseInt(b);
            assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
        } catch (java.lang.NumberFormatException e) {
        }
    }
}
/home/max/Documents/JMLGPT/tmp/calc.java:4: error: incompatible types: void cannot be converted to boolean
    //@ ensures args.length < 2 ==> System.out.println("need two arguments");
                                                      ^
1 error

public class calc {
    //@ requires args != null;
    //@ requires args.length >= 2;
    //@ ensures args.length < 2 ==> \result == System.out.println("need two arguments");
    public static void fun(String[] args) {
        if (args.length < 2) {
            System.out.println("need two arguments");
            return;
        }
        new calc().do_stuff(args[0], args[1]);
    }

    //@ requires a != null && b != null;
    //@ requires \typeof(a) == \type(String) && \typeof(b) == \type(String);
    //@ requires (\forall int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
    //@ requires (\forall int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
    //@ ensures (Integer.parseInt(a) != Integer.parseInt(b)) || (Integer.parseInt(a) == Integer.parseInt(b));
    public void do_stuff(String a, String b) {
        try {
            int x = Integer.parseInt(a);
            int y = Integer.parseInt(b);
            assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
        } catch (java.lang.NumberFormatException e) {
        }
    }
}
/home/max/Documents/JMLGPT/tmp/calc.java:4: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures args.length < 2 ==> \result == System.out.println("need two arguments");
                                     ^
/home/max/Documents/JMLGPT/tmp/calc.java:4: error: 'void' type not allowed here
    //@ ensures args.length < 2 ==> \result == System.out.println("need two arguments");
                                                                 ^
2 errors

public class calc {
    //@ requires args != null;
    //@ requires args.length >= 2;
    //@ ensures args.length < 2 ==> System.out.println("need two arguments") == null;
    public static void fun(String[] args) {
        if (args.length < 2) {
            System.out.println("need two arguments");
            return;
        }
        new calc().do_stuff(args[0], args[1]);
    }

    //@ requires a != null && b != null;
    //@ requires \typeof(a) == \type(String) && \typeof(b) == \type(String);
    //@ requires (\forall int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
    //@ requires (\forall int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
    //@ ensures (Integer.parseInt(a) != Integer.parseInt(b)) || (Integer.parseInt(a) == Integer.parseInt(b));
    public void do_stuff(String a, String b) {
        try {
            int x = Integer.parseInt(a);
            int y = Integer.parseInt(b);
            assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
        } catch (java.lang.NumberFormatException e) {
        }
    }
}
/home/max/Documents/JMLGPT/tmp/calc.java:4: error: 'void' type not allowed here
    //@ ensures args.length < 2 ==> System.out.println("need two arguments") == null;
                                                      ^
1 error

public class calc {
    //@ requires args != null;
    //@ requires args.length >= 2;
    //@ ensures args.length < 2 ==> true;
    public static void fun(String[] args) {
        if (args.length < 2) {
            System.out.println("need two arguments");
            return;
        }
        new calc().do_stuff(args[0], args[1]);
    }

    //@ requires a != null && b != null;
    //@ requires \typeof(a) == \type(String) && \typeof(b) == \type(String);
    //@ requires (\forall int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
    //@ requires (\forall int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
    //@ ensures (Integer.parseInt(a) != Integer.parseInt(b)) || (Integer.parseInt(a) == Integer.parseInt(b));
    public void do_stuff(String a, String b) {
        try {
            int x = Integer.parseInt(a);
            int y = Integer.parseInt(b);
            assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
        } catch (java.lang.NumberFormatException e) {
        }
    }
}
