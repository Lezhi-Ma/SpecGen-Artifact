public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));
    //@ ensures !\result ==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i != 3 || !sentence.split(" ")[i].equals("genneration"));
    public static boolean f() {
        String[] tokens = sentence.split(" ");

        int i = 0;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
    //@ requires sentence != null;
                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));
                                                          ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));
                                                                                                ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i != 3 || !sentence.split(" ")[i].equals("genneration"));
                                                           ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i != 3 || !sentence.split(" ")[i].equals("genneration"));
                                                                                                  ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: error: cannot find symbol
        String[] tokens = sentence.split(" ");
                          ^
  symbol:   variable sentence
  location: class TokenTest02
6 errors

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));
    //@ ensures !\result ==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i != 3 || !sentence.split(" ")[i].equals("genneration"));
    public static boolean f() {
        String sentence = "example sentence for testing";
        String[] tokens = sentence.split(" ");

        int i = 0;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
    //@ requires sentence != null;
                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));
                                                          ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));
                                                                                                ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i != 3 || !sentence.split(" ")[i].equals("genneration"));
                                                           ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i != 3 || !sentence.split(" ")[i].equals("genneration"));
                                                                                                  ^
  symbol:   variable sentence
  location: class TokenTest02
5 errors

public class TokenTest02 {
    //@ requires sentence != null;
    //@ ensures \result ==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));
    //@ ensures !\result ==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i != 3 || !sentence.split(" ")[i].equals("genneration"));
    public static boolean f() {
        String sentence = "example sentence for testing";
        String[] tokens = sentence.split(" ");

        int i = 0;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
    //@ requires sentence != null;
                 ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));
                                                          ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\exists int i; 0 <= i && i < sentence.split(" ").length; i == 3 && sentence.split(" ")[i].equals("genneration"));
                                                                                                ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i != 3 || !sentence.split(" ")[i].equals("genneration"));
                                                           ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i != 3 || !sentence.split(" ")[i].equals("genneration"));
                                                                                                  ^
  symbol:   variable sentence
  location: class TokenTest02
5 errors

public class TokenTest02 {
    //@ requires true;
    //@ ensures \result ==> (\exists int i; 0 <= i && i < 4; i == 3 && sentence.split(" ")[i].equals("genneration"));
    //@ ensures !\result ==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i != 3 || !sentence.split(" ")[i].equals("genneration"));
    public static boolean f() {
        String sentence = "example sentence for testing";
        String[] tokens = sentence.split(" ");

        int i = 0;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
    //@ ensures \result ==> (\exists int i; 0 <= i && i < 4; i == 3 && sentence.split(" ")[i].equals("genneration"));
                                                                       ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i != 3 || !sentence.split(" ")[i].equals("genneration"));
                                                           ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
    //@ ensures !\result ==> (\forall int i; 0 <= i && i < sentence.split(" ").length; i != 3 || !sentence.split(" ")[i].equals("genneration"));
                                                                                                  ^
  symbol:   variable sentence
  location: class TokenTest02
3 errors

public class TokenTest02 {
    //@ requires true;
    //@ ensures \result ==> (\exists int i; 0 <= i && i < 4; i == 3 && "example sentence for testing".split(" ")[i].equals("genneration"));
    //@ ensures !\result ==> (\forall int i; 0 <= i && i < "example sentence for testing".split(" ").length; i != 3 || !"example sentence for testing".split(" ")[i].equals("genneration"));
    public static boolean f() {
        String sentence = "example sentence for testing";
        String[] tokens = sentence.split(" ");

        int i = 0;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:16:
    //@ ensures \result ==> (\exists int i; 0 <= i && i < 4; i == 3 && "example sentence for testing".split(" ")[i].equals("genneration"));
        ^
2 verification failures

public class TokenTest02 {
    //@ requires true;
    //@ ensures \result ==> (\exists int i; 0 <= i && i < 4; i == 3 && "example sentence for testing".split(" ")[i].equals("genneration"));
    //@ ensures !\result ==> (\forall int i; 0 <= i && i < "example sentence for testing".split(" ").length; i != 3 || !"example sentence for testing".split(" ")[i].equals("genneration"));
    public static boolean f() {
        String sentence = "example sentence for genneration testing";
        String[] tokens = sentence.split(" ");

        int i = 0;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:16:
    //@ ensures \result ==> (\exists int i; 0 <= i && i < 4; i == 3 && "example sentence for testing".split(" ")[i].equals("genneration"));
        ^
2 verification failures

public class TokenTest02 {
    //@ requires true;
    //@ ensures \result ==> (\exists int i; 0 <= i && i < 5; i == 3 && "example sentence for genneration testing".split(" ")[i].equals("genneration"));
    //@ ensures !\result ==> (\forall int i; 0 <= i && i < "example sentence for genneration testing".split(" ").length; i != 3 || !"example sentence for genneration testing".split(" ")[i].equals("genneration"));
    public static boolean f() {
        String sentence = "example sentence for genneration testing";
        String[] tokens = sentence.split(" ");

        int i = 0;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:16:
    //@ ensures \result ==> (\exists int i; 0 <= i && i < 5; i == 3 && "example sentence for genneration testing".split(" ")[i].equals("genneration"));
        ^
2 verification failures

public class TokenTest02 {
    //@ requires true;
    //@ ensures \result ==> (\exists int i; 0 <= i && i < "example sentence for genneration testing".split(" ").length; i == 3 && "example sentence for genneration testing".split(" ")[i].equals("genneration"));
    //@ ensures !\result ==> (\forall int i; 0 <= i && i < "example sentence for genneration testing".split(" ").length; i != 3 || !"example sentence for genneration testing".split(" ")[i].equals("genneration"));
    public static boolean f() {
        String sentence = "example sentence for genneration testing";
        String[] tokens = sentence.split(" ");

        int i = 0;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:16:
    //@ ensures \result ==> (\exists int i; 0 <= i && i < "example sentence for genneration testing".split(" ").length; i == 3 && "example sentence for genneration testing".split(" ")[i].equals("genneration"));
        ^
2 verification failures

public class TokenTest02 {
    //@ requires true;
    //@ ensures \result ==> (\exists int i; 0 <= i && i < "example sentence for genneration testing".split(" ").length; i == 3 && "example sentence for genneration testing".split(" ")[i].equals("genneration"));
    //@ ensures !\result ==> (\forall int i; 0 <= i && i < "example sentence for genneration testing".split(" ").length; i != 3 || !"example sentence for genneration testing".split(" ")[i].equals("genneration"));
    public static boolean f() {
        String sentence = "example sentence for genneration testing";
        String[] tokens = sentence.split(" ");

        int i = 0;
        for (String token : tokens) {
            if (i == 3)
                if (!token.equals("genneration"))
                    return false;
            ++i;
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:16:
    //@ ensures \result ==> (\exists int i; 0 <= i && i < "example sentence for genneration testing".split(" ").length; i == 3 && "example sentence for genneration testing".split(" ")[i].equals("genneration"));
        ^
2 verification failures

public class TokenTest02 {
    //@ requires true;
    //@ ensures \result == checkToken("example sentence for genneration testing", "genneration");
    public static boolean f() {
        return true;
    }
    
    public static boolean checkToken(String sentence, String target) {
        String[] tokens = sentence.split(" ");
        for (int i = 0; i < tokens.length; i++) {
            if (i == 3 && tokens[i].equals(target)) {
                return true;
            }
        }
        return false;
    }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:11: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method checkToken: (Caller: TokenTest02.checkToken(java.lang.String,java.lang.String), Callee: java.lang.String.equals(java.lang.Object))
            if (i == 3 && tokens[i].equals(target)) {
                                          ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:11:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:5: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:5:
    //@ ensures \result == checkToken("example sentence for genneration testing", "genneration");
        ^
4 verification failures

