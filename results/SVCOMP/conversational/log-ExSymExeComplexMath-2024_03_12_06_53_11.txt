class Main {
    static int field;

    //@ ensures \result == inst.test2(0.0);
    public static boolean f() {
        int x = 3;
        Main inst = new Main();
        field = 9;
        return inst.test2(0.0);
    }

    //@ requires Math.round(in) <= 16.0;
    //@ ensures \result ==> System.out.println("do2()") && \result == true;
    //@ ensures !\result ==> \result == false;
    public boolean test2(double in) {
        if (Math.round(in) > 16.0) {
            return false;
        } else {
            System.out.println("do2()");
            return true;
        }
    }

    //@ ensures (x1 == 0 && y1 != 0) ==> System.out.println(">>>>>>>>>>>> 1");
    //@ ensures (x1 != 0) ==> System.out.println(">>>>>>>>>>>> LOOK!") && (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???") && (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
    public void angleXY_(double x1, double y1) {
        double x = x1;
        double y = y1;
        if (x == 0 && y != 0) {
            System.out.println(">>>>>>>>>>>> 1");
        } else {
            System.out.println(">>>>>>>>>>>> LOOK!");
            if (x < 0) {
                System.out.println(">>>>>>>>>>>>>>> ???");
            } else if (x > 0) {
                System.out.println(">>>>>>>>>>>>>>> !!!1");
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:4: error: cannot find symbol
    //@ ensures \result == inst.test2(0.0);
                           ^
  symbol:   variable inst
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:13: error: 'void' type not allowed here
    //@ ensures \result ==> System.out.println("do2()") && \result == true;
                                              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:24: error: incompatible types: void cannot be converted to boolean
    //@ ensures (x1 == 0 && y1 != 0) ==> System.out.println(">>>>>>>>>>>> 1");
                                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:25: error: 'void' type not allowed here
    //@ ensures (x1 != 0) ==> System.out.println(">>>>>>>>>>>> LOOK!") && (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???") && (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
                                                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:25: error: 'void' type not allowed here
    //@ ensures (x1 != 0) ==> System.out.println(">>>>>>>>>>>> LOOK!") && (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???") && (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
                                                                                                         ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:25: error: incompatible types: void cannot be converted to boolean
    //@ ensures (x1 != 0) ==> System.out.println(">>>>>>>>>>>> LOOK!") && (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???") && (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
                                                                                                                                                                   ^
6 errors

class Main {
    static int field;

    //@ ensures \result == test2(0.0);
    public static boolean f() {
        int x = 3;
        field = 9;
        return test2(0.0);
    }

    //@ requires Math.round(in) <= 16.0;
    //@ ensures \result ==> System.out.println("do2()") && \result == true;
    //@ ensures !\result ==> \result == false;
    public static boolean test2(double in) {
        if (Math.round(in) > 16.0) {
            return false;
        } else {
            System.out.println("do2()");
            return true;
        }
    }

    //@ ensures (x1 == 0 && y1 != 0) ==> System.out.println(">>>>>>>>>>>> 1");
    //@ ensures (x1 != 0) ==> System.out.println(">>>>>>>>>>>> LOOK!") && (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???") && (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
    public void angleXY_(double x1, double y1) {
        double x = x1;
        double y = y1;
        if (x == 0 && y != 0) {
            System.out.println(">>>>>>>>>>>> 1");
        } else {
            System.out.println(">>>>>>>>>>>> LOOK!");
            if (x < 0) {
                System.out.println(">>>>>>>>>>>>>>> ???");
            } else if (x > 0) {
                System.out.println(">>>>>>>>>>>>>>> !!!1");
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:12: error: 'void' type not allowed here
    //@ ensures \result ==> System.out.println("do2()") && \result == true;
                                              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:23: error: incompatible types: void cannot be converted to boolean
    //@ ensures (x1 == 0 && y1 != 0) ==> System.out.println(">>>>>>>>>>>> 1");
                                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:24: error: 'void' type not allowed here
    //@ ensures (x1 != 0) ==> System.out.println(">>>>>>>>>>>> LOOK!") && (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???") && (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
                                                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:24: error: 'void' type not allowed here
    //@ ensures (x1 != 0) ==> System.out.println(">>>>>>>>>>>> LOOK!") && (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???") && (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
                                                                                                         ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:24: error: incompatible types: void cannot be converted to boolean
    //@ ensures (x1 != 0) ==> System.out.println(">>>>>>>>>>>> LOOK!") && (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???") && (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
                                                                                                                                                                   ^
5 errors

class Main {
    static int field;

    //@ ensures \result == test2(0.0);
    public static boolean f() {
        int x = 3;
        field = 9;
        return test2(0.0);
    }

    //@ requires Math.round(in) <= 16.0;
    //@ ensures \result ==> true;
    //@ ensures !\result ==> false;
    public static boolean test2(double in) {
        if (Math.round(in) > 16.0) {
            return false;
        } else {
            System.out.println("do2()");
            return true;
        }
    }

    //@ ensures (x1 == 0 && y1 != 0);
    //@ ensures (x1 != 0);
    public void angleXY_(double x1, double y1) {
        double x = x1;
        double y = y1;
        if (x == 0 && y != 0) {
            System.out.println(">>>>>>>>>>>> 1");
        } else {
            System.out.println(">>>>>>>>>>>> LOOK!");
            if (x < 0) {
                System.out.println(">>>>>>>>>>>>>>> ???");
            } else if (x > 0) {
                System.out.println(">>>>>>>>>>>>>>> !!!1");
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:23:) in method angleXY_
    public void angleXY_(double x1, double y1) {
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:25:
    //@ ensures (x1 == 0 && y1 != 0);
        ^
2 verification failures

class Main {
    static int field;

    //@ ensures \result == test2(0.0);
    public static boolean f() {
        int x = 3;
        field = 9;
        return test2(0.0);
    }

    //@ requires Math.round(in) <= 16.0;
    //@ ensures \result ==> true;
    //@ ensures !\result ==> false;
    public static boolean test2(double in) {
        if (Math.round(in) > 16.0) {
            return false;
        } else {
            System.out.println("do2()");
            return true;
        }
    }

    //@ ensures (x1 == 0 && y1 != 0) ==> System.out.println(">>>>>>>>>>>> 1");
    //@ ensures (x1 != 0) ==> System.out.println(">>>>>>>>>>>> LOOK!") && (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???") && (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
    public void angleXY_(double x1, double y1) {
        double x = x1;
        double y = y1;
        if (x == 0 && y != 0) {
            System.out.println(">>>>>>>>>>>> 1");
        } else if (x != 0) {
            System.out.println(">>>>>>>>>>>> LOOK!");
            if (x < 0) {
                System.out.println(">>>>>>>>>>>>>>> ???");
            } else if (x > 0) {
                System.out.println(">>>>>>>>>>>>>>> !!!1");
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:23: error: incompatible types: void cannot be converted to boolean
    //@ ensures (x1 == 0 && y1 != 0) ==> System.out.println(">>>>>>>>>>>> 1");
                                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:24: error: 'void' type not allowed here
    //@ ensures (x1 != 0) ==> System.out.println(">>>>>>>>>>>> LOOK!") && (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???") && (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
                                                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:24: error: 'void' type not allowed here
    //@ ensures (x1 != 0) ==> System.out.println(">>>>>>>>>>>> LOOK!") && (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???") && (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
                                                                                                         ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:24: error: incompatible types: void cannot be converted to boolean
    //@ ensures (x1 != 0) ==> System.out.println(">>>>>>>>>>>> LOOK!") && (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???") && (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
                                                                                                                                                                   ^
4 errors

class Main {
    static int field;

    //@ ensures \result == test2(0.0);
    public static boolean f() {
        int x = 3;
        field = 9;
        return test2(0.0);
    }

    //@ requires Math.round(in) <= 16.0;
    //@ ensures \result ==> true;
    //@ ensures !\result ==> false;
    public static boolean test2(double in) {
        if (Math.round(in) > 16.0) {
            return false;
        } else {
            System.out.println("do2()");
            return true;
        }
    }

    //@ ensures (x1 == 0 && y1 != 0);
    //@ ensures (x1 != 0);
    public void angleXY_(double x1, double y1) {
        double x = x1;
        double y = y1;
        if (x == 0 && y != 0) {
            System.out.println(">>>>>>>>>>>> 1");
        } else if (x != 0) {
            System.out.println(">>>>>>>>>>>> LOOK!");
            if (x < 0) {
                System.out.println(">>>>>>>>>>>>>>> ???");
            } else if (x > 0) {
                System.out.println(">>>>>>>>>>>>>>> !!!1");
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:23:) in method angleXY_
    public void angleXY_(double x1, double y1) {
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:25:
    //@ ensures (x1 == 0 && y1 != 0);
        ^
2 verification failures

class Main {
    static int field;

    //@ ensures \result == test2(0.0);
    public static boolean f() {
        int x = 3;
        field = 9;
        return test2(0.0);
    }

    //@ requires Math.round(in) <= 16.0;
    //@ ensures \result ==> true;
    //@ ensures !\result ==> false;
    public static boolean test2(double in) {
        if (Math.round(in) > 16.0) {
            return false;
        } else {
            System.out.println("do2()");
            return true;
        }
    }

    //@ ensures (x1 == 0 && y1 != 0) ==> System.out.println(">>>>>>>>>>>> 1");
    //@ ensures (x1 != 0) ==> System.out.println(">>>>>>>>>>>> LOOK!") && (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???") && (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
    public void angleXY_(double x1, double y1) {
        double x = x1;
        double y = y1;
        if (x == 0 && y != 0) {
            System.out.println(">>>>>>>>>>>> 1");
        } else if (x != 0) {
            System.out.println(">>>>>>>>>>>> LOOK!");
            if (x < 0) {
                System.out.println(">>>>>>>>>>>>>>> ???");
            } else if (x > 0) {
                System.out.println(">>>>>>>>>>>>>>> !!!1");
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:23: error: incompatible types: void cannot be converted to boolean
    //@ ensures (x1 == 0 && y1 != 0) ==> System.out.println(">>>>>>>>>>>> 1");
                                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:24: error: 'void' type not allowed here
    //@ ensures (x1 != 0) ==> System.out.println(">>>>>>>>>>>> LOOK!") && (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???") && (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
                                                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:24: error: 'void' type not allowed here
    //@ ensures (x1 != 0) ==> System.out.println(">>>>>>>>>>>> LOOK!") && (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???") && (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
                                                                                                         ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:24: error: incompatible types: void cannot be converted to boolean
    //@ ensures (x1 != 0) ==> System.out.println(">>>>>>>>>>>> LOOK!") && (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???") && (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
                                                                                                                                                                   ^
4 errors

class Main {
    static int field;

    //@ ensures \result == test2(0.0);
    public static boolean f() {
        int x = 3;
        field = 9;
        return test2(0.0);
    }

    //@ requires Math.round(in) <= 16.0;
    //@ ensures \result ==> true;
    //@ ensures !\result ==> false;
    public static boolean test2(double in) {
        if (Math.round(in) > 16.0) {
            return false;
        } else {
            System.out.println("do2()");
            return true;
        }
    }

    //@ ensures (x1 == 0 && y1 != 0);
    //@ ensures (x1 != 0);
    public void angleXY_(double x1, double y1) {
        double x = x1;
        double y = y1;
        if (x == 0 && y != 0) {
            System.out.println(">>>>>>>>>>>> 1");
        } else if (x != 0) {
            System.out.println(">>>>>>>>>>>> LOOK!");
            if (x < 0) {
                System.out.println(">>>>>>>>>>>>>>> ???");
            } else if (x > 0) {
                System.out.println(">>>>>>>>>>>>>>> !!!1");
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:23:) in method angleXY_
    public void angleXY_(double x1, double y1) {
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:25:
    //@ ensures (x1 == 0 && y1 != 0);
        ^
2 verification failures

class Main {
    static int field;

    //@ ensures \result == test2(0.0);
    public static boolean f() {
        int x = 3;
        field = 9;
        return test2(0.0);
    }

    //@ requires Math.round(in) <= 16.0;
    //@ ensures \result ==> true;
    //@ ensures !\result ==> false;
    public static boolean test2(double in) {
        if (Math.round(in) > 16.0) {
            return false;
        } else {
            System.out.println("do2()");
            return true;
        }
    }

    //@ ensures (x1 == 0 && y1 != 0);
    //@ ensures (x1 != 0);
    public void angleXY_(double x1, double y1) {
        double x = x1;
        double y = y1;
        if (x == 0 && y != 0) {
            System.out.println(">>>>>>>>>>>> 1");
        } else if (x != 0) {
            System.out.println(">>>>>>>>>>>> LOOK!");
            if (x < 0) {
                System.out.println(">>>>>>>>>>>>>>> ???");
            } else if (x > 0) {
                System.out.println(">>>>>>>>>>>>>>> !!!1");
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:23:) in method angleXY_
    public void angleXY_(double x1, double y1) {
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:25:
    //@ ensures (x1 == 0 && y1 != 0);
        ^
2 verification failures

class Main {
    static int field;

    //@ ensures \result == test2(0.0);
    public static boolean f() {
        int x = 3;
        field = 9;
        return test2(0.0);
    }

    //@ requires Math.round(in) <= 16.0;
    //@ ensures \result ==> true;
    //@ ensures !\result ==> false;
    public static boolean test2(double in) {
        if (Math.round(in) > 16.0) {
            return false;
        } else {
            System.out.println("do2()");
            return true;
        }
    }

    //@ requires x1 == 0 && y1 != 0;
    //@ requires x1 != 0;
    public void angleXY_(double x1, double y1) {
        double x = x1;
        double y = y1;
        if (x == 0 && y != 0) {
            System.out.println(">>>>>>>>>>>> 1");
        } else if (x != 0) {
            System.out.println(">>>>>>>>>>>> LOOK!");
            if (x < 0) {
                System.out.println(">>>>>>>>>>>>>>> ???");
            } else if (x > 0) {
                System.out.println(">>>>>>>>>>>>>>> !!!1");
            }
        }
    }
}

