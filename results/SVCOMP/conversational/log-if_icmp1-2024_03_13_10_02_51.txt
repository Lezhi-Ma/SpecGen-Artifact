class if_icmp1 {
  //@ requires i != Integer.MIN_VALUE && j != Integer.MIN_VALUE;
  //@ ensures \result <==> i < j;
  private static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (j > i) {
      return true;
    } else {
      return false;
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != Integer.MIN_VALUE;
  //@ ensures \result == -1 <==> i + 1 < 0;
  //@ ensures \result != -1 ==> \result <==> f(i, i + 1);
  public static int fun(int i) {
    if (i + 1 < 0) return -1;
    return f(i, i + 1);
  }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:28: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result != -1 ==> \result <==> f(i, i + 1);
                                ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:28: error: An identifier with private visibility may not be used in a ensures clause with public visibility
  //@ ensures \result != -1 ==> \result <==> f(i, i + 1);
                                             ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:31: error: incompatible types: boolean cannot be converted to int
    return f(i, i + 1);
            ^
3 errors

class if_icmp1 {
  private /*@ spec_public @*/ static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (j > i) {
      return true;
    } else {
      return false;
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != Integer.MIN_VALUE;
  //@ ensures \result == -1 <==> i + 1 < 0;
  //@ ensures \result != -1 ==> \result <==> f(i, i + 1);
  public static int fun(int i) {
    if (i + 1 < 0) return -1;
    return f(i, i + 1) ? 1 : 0;
  }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:26: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result != -1 ==> \result <==> f(i, i + 1);
                                ^
1 error

class if_icmp1 {
  private /*@ spec_public @*/ static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (j > i) {
      return true;
    } else {
      return false;
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != Integer.MIN_VALUE;
  //@ ensures \result == -1 <==> i + 1 < 0;
  //@ ensures \result != -1 ==> \result <==> f(i, i + 1);
  public static int fun(int i) {
    if (i + 1 < 0) return -1;
    return f(i, i + 1) ? 1 : 0;
  }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:26: error: incompatible types: int cannot be converted to boolean
  //@ ensures \result != -1 ==> \result <==> f(i, i + 1);
                                ^
1 error

class if_icmp1 {
  private /*@ spec_public @*/ static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (j > i) {
      return true;
    } else {
      return false;
    }
    if (j <= i) {
      return false;
    }
    if (j < i) {
      return false;
    } else {
      return true;
    }
  }

  //@ requires i != Integer.MIN_VALUE;
  //@ ensures \result == -1 <==> i + 1 < 0;
  //@ ensures \result != -1 ==> f(i, i + 1);
  public static int fun(int i) {
    if (i + 1 < 0) return -1;
    return f(i, i + 1) ? 1 : 0;
  }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:14: error: unreachable statement
    if (j <= i) {
    ^
1 error

class if_icmp1 {
  private /*@ spec_public @*/ static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (j > i) {
      return true;
    } else {
      return false;
    }
    return j < i;
  }

  //@ requires i != Integer.MIN_VALUE;
  //@ ensures \result == -1 <==> i + 1 < 0;
  //@ ensures \result != -1 ==> f(i, i + 1);
  public static int fun(int i) {
    if (i + 1 < 0) return -1;
    return f(i, i + 1) ? 1 : 0;
  }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:14: error: unreachable statement
    return j < i;
    ^
1 error

class if_icmp1 {
  private /*@ spec_public @*/ static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (j > i) {
      return true;
    } else {
      return false;
    }
    return j < i;
  }

  //@ requires i != Integer.MIN_VALUE;
  //@ ensures \result == -1 <==> i + 1 < 0;
  //@ ensures \result != -1 ==> f(i, i + 1);
  public static int fun(int i) {
    if (i + 1 < 0) return -1;
    return f(i, i + 1) ? 1 : 0;
  }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:14: error: unreachable statement
    return j < i;
    ^
1 error

class if_icmp1 {
  private /*@ spec_public @*/ static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (j > i) {
      return true;
    } else {
      return false;
    }
    return j < i;
  }

  //@ requires i != Integer.MIN_VALUE;
  //@ ensures \result == -1 <==> i + 1 < 0;
  //@ ensures \result != -1 ==> f(i, i + 1);
  public static int fun(int i) {
    if (i + 1 < 0) return -1;
    return f(i, i + 1) ? 1 : 0;
  }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:14: error: unreachable statement
    return j < i;
    ^
1 error

class if_icmp1 {
  private /*@ spec_public @*/ static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (j > i) {
      return true;
    } else {
      return false;
    }
  }

  //@ requires i != Integer.MIN_VALUE;
  //@ ensures \result == -1 <==> i + 1 < 0;
  //@ ensures \result != -1 ==> f(i, i + 1);
  public static int fun(int i) {
    if (i + 1 < 0) return -1;
    return f(i, i + 1) ? 1 : 0;
  }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:18:) in method fun
    return f(i, i + 1) ? 1 : 0;
    ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:21:
  //@ ensures \result != -1 ==> f(i, i + 1);
      ^
2 verification failures

class if_icmp1 {
  private /*@ spec_public @*/ static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (j > i) {
      return true;
    } else {
      return false;
    }
  }

  //@ requires i != Integer.MIN_VALUE;
  //@ ensures \result == -1 <==> i + 1 < 0;
  //@ ensures \result != -1 ==> f(i, i + 1);
  public static int fun(int i) {
    if (i + 1 < 0) return -1;
    return f(i, i + 1) ? 1 : 0;
  }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:18:) in method fun
    return f(i, i + 1) ? 1 : 0;
    ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:21:
  //@ ensures \result != -1 ==> f(i, i + 1);
      ^
2 verification failures

class if_icmp1 {
  private /*@ spec_public @*/ static boolean f(int i, int j) {
    if (i == j) {
      return false;
    }
    if (i >= j) {
      return false;
    }
    if (j > i) {
      return true;
    } else {
      return false;
    }
  }

  //@ requires i != Integer.MIN_VALUE;
  //@ ensures \result == -1 <==> i + 1 < 0;
  //@ ensures \result != -1 ==> f(i, i + 1);
  public static int fun(int i) {
    if (i + 1 < 0) return -1;
    return f(i, i + 1) ? 1 : 0;
  }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:18:) in method fun
    return f(i, i + 1) ? 1 : 0;
    ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:21:
  //@ ensures \result != -1 ==> f(i, i + 1);
      ^
2 verification failures

