class Main {
  static int field;
  static int field2;

  //@ requires \symbolic arg;
  //@ ensures \result ==> (arg < 0 || test(3, arg, field2));
  public static boolean f(int arg) {
    int x = 3; 

    Main inst = new Main();
    field = 9;
    if (arg < 0) return true;
    return inst.test(x, arg, field2);
  }

  //@ requires \symbolic x;
  //@ requires \symbolic z;
  //@ requires \symbolic r;
  //@ ensures \result ==> (z < x && x < r);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe12");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z < x) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < r) System.out.println("branch BOO1");
    else {
      System.out.println("branch BOO2");
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:5: error: This backslash token is unknown: \symbolic
  //@ requires \symbolic arg;
               ^
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:16: error: This backslash token is unknown: \symbolic
  //@ requires \symbolic x;
               ^
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:17: error: This backslash token is unknown: \symbolic
  //@ requires \symbolic z;
               ^
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:18: error: This backslash token is unknown: \symbolic
  //@ requires \symbolic r;
               ^
4 errors

class Main {
  static int field;
  static int field2;

  //@ requires true; // symbolic parameter
  //@ ensures \result ==> (arg < 0 || test(3, arg, field2));
  public static boolean f(int arg) {
    int x = 3; 

    Main inst = new Main();
    field = 9;
    if (arg < 0) return true;
    return inst.test(x, arg, field2);
  }

  //@ requires true; // symbolic parameters
  //@ ensures \result ==> (z < x && x < r);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe12");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z < x) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < r) System.out.println("branch BOO1");
    else {
      System.out.println("branch BOO2");
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> (arg < 0 || test(3, arg, field2));
                                                   ^
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:6: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result ==> (arg < 0 || test(3, arg, field2));
                                      ^
2 errors

class Main {
  spec_public static int field;
  spec_public static int field2;

  //@ requires true; // symbolic parameter
  //@ ensures \result ==> (arg < 0 || new Main().test(3, arg, field2));
  public static boolean f(int arg) {
    int x = 3; 

    Main inst = new Main();
    field = 9;
    if (arg < 0) return true;
    return inst.test(x, arg, field2);
  }

  //@ requires true; // symbolic parameters
  //@ ensures \result ==> (z < x && x < r);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe12");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z < x) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < r) System.out.println("branch BOO1");
    else {
      System.out.println("branch BOO2");
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:2: error: <identifier> expected
  spec_public static int field;
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:3: error: <identifier> expected
  spec_public static int field2;
             ^
2 errors

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;

  //@ requires true; // symbolic parameter
  //@ ensures \result ==> (arg < 0 || new Main().test(3, arg, field2));
  public static boolean f(int arg) {
    int x = 3; 

    Main inst = new Main();
    field = 9;
    if (arg < 0) return true;
    return inst.test(x, arg, field2);
  }

  //@ requires true; // symbolic parameters
  //@ ensures \result ==> (z < x && x < r);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe12");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z < x) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < r) System.out.println("branch BOO1");
    else {
      System.out.println("branch BOO2");
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:8: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> (arg < 0 || new Main().test(3, arg, field2));
                                      ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;

  //@ requires true; // symbolic parameter
  //@ ensures \result ==> (arg < 0 || test(3, arg, field2));
  public static boolean f(int arg) {
    int x = 3; 

    Main inst = new Main();
    field = 9;
    if (arg < 0) return true;
    return inst.test(x, arg, field2);
  }

  //@ requires true; // symbolic parameters
  //@ ensures \result ==> (z < x && x < r);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe12");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z < x) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < r) System.out.println("branch BOO1");
    else {
      System.out.println("branch BOO2");
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:8: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result ==> (arg < 0 || test(3, arg, field2));
                                      ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;

  //@ requires true; // symbolic parameter
  //@ ensures \result ==> (arg < 0 || new Main().test(3, arg, field2));
  public static boolean f(int arg) {
    int x = 3; 

    Main inst = new Main();
    field = 9;
    if (arg < 0) return true;
    return inst.test(x, arg, field2);
  }

  //@ requires true; // symbolic parameters
  //@ ensures \result ==> (z < x && x < r);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe12");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z < x) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < r) System.out.println("branch BOO1");
    else {
      System.out.println("branch BOO2");
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:8: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> (arg < 0 || new Main().test(3, arg, field2));
                                      ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;

  //@ requires true; // symbolic parameter
  //@ ensures \result ==> (arg < 0 || test(3, arg, field2));
  public static boolean f(int arg) {
    int x = 3; 

    Main inst = new Main();
    field = 9;
    if (arg < 0) return true;
    return inst.test(x, arg, field2);
  }

  //@ requires true; // symbolic parameters
  //@ ensures \result ==> (z < x && x < r);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe12");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z < x) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < r) System.out.println("branch BOO1");
    else {
      System.out.println("branch BOO2");
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:8: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result ==> (arg < 0 || test(3, arg, field2));
                                      ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;

  //@ requires true; // symbolic parameter
  //@ ensures \result ==> (arg < 0 || new Main().test(3, arg, field2));
  public static boolean f(int arg) {
    int x = 3; 

    Main inst = new Main();
    field = 9;
    if (arg < 0) return true;
    return inst.test(x, arg, field2);
  }

  //@ requires true; // symbolic parameters
  //@ ensures \result ==> (z < x && x < r);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe12");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z < x) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < r) System.out.println("branch BOO1");
    else {
      System.out.println("branch BOO2");
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:8: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> (arg < 0 || new Main().test(3, arg, field2));
                                      ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;

  //@ requires true; // symbolic parameter
  //@ ensures \result ==> (arg < 0 || test(3, arg, field2));
  public static boolean f(int arg) {
    int x = 3; 

    Main inst = new Main();
    field = 9;
    if (arg < 0) return true;
    return inst.test(x, arg, field2);
  }

  //@ requires true; // symbolic parameters
  //@ ensures \result ==> (z < x && x < r);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe12");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z < x) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < r) System.out.println("branch BOO1");
    else {
      System.out.println("branch BOO2");
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:8: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result ==> (arg < 0 || test(3, arg, field2));
                                      ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;

  //@ requires true; // symbolic parameter
  //@ ensures \result ==> (arg < 0 || new Main().test(3, arg, field2));
  public static boolean f(int arg) {
    int x = 3; 

    Main inst = new Main();
    field = 9;
    if (arg < 0) return true;
    return inst.test(x, arg, field2);
  }

  //@ requires true; // symbolic parameters
  //@ ensures \result ==> (z < x && x < r);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe12");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z < x) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < r) System.out.println("branch BOO1");
    else {
      System.out.println("branch BOO2");
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:8: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> (arg < 0 || new Main().test(3, arg, field2));
                                      ^
1 error

