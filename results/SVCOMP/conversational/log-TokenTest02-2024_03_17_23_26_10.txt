public class TokenTest02 {
	//@ requires sentence != null;
	//@ ensures \result == true || \result == false;
	//@ ensures \result == true ==> (\forall int i; 0 <= i && i <= 3; tokens[i].equals("genneration"));
	//@ ensures \result == false ==> (\exists int i; 0 <= i && i <= 3; !tokens[i].equals("genneration"));
	public static boolean f() {
		String[] tokens = sentence.split(" ");

		int i = 0;
		for (String token : tokens) {
			if (i == 3)
				if (!token.equals("genneration"))
					return false;
			++i;
		}
		return true;
	}
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
	//@ requires sentence != null;
	             ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
	//@ ensures \result == true ==> (\forall int i; 0 <= i && i <= 3; tokens[i].equals("genneration"));
	                                                                  ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:5: error: cannot find symbol
	//@ ensures \result == false ==> (\exists int i; 0 <= i && i <= 3; !tokens[i].equals("genneration"));
	                                                                    ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:7: error: cannot find symbol
		String[] tokens = sentence.split(" ");
		                  ^
  symbol:   variable sentence
  location: class TokenTest02
4 errors

public class TokenTest02 {
	//@ requires sentence != null;
	//@ ensures \result == true || \result == false;
	//@ ensures \result == true ==> (\forall int i; 0 <= i && i <= 3; tokens[i].equals("genneration"));
	//@ ensures \result == false ==> (\exists int i; 0 <= i && i <= 3; !tokens[i].equals("genneration"));
	public static boolean f() {
		String sentence = "example sentence for testing";
		String[] tokens = sentence.split(" ");

		int i = 0;
		for (String token : tokens) {
			if (i == 3)
				if (!token.equals("genneration"))
					return false;
			++i;
		}
		return true;
	}
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
	//@ requires sentence != null;
	             ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
	//@ ensures \result == true ==> (\forall int i; 0 <= i && i <= 3; tokens[i].equals("genneration"));
	                                                                  ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:5: error: cannot find symbol
	//@ ensures \result == false ==> (\exists int i; 0 <= i && i <= 3; !tokens[i].equals("genneration"));
	                                                                    ^
  symbol:   variable tokens
  location: class TokenTest02
3 errors

public class TokenTest02 {
	//@ requires sentence != null;
	//@ ensures \result == true || \result == false;
	//@ ensures \result == true ==> (\forall int i; 0 <= i && i <= 3; tokens[i].equals("genneration"));
	//@ ensures \result == false ==> (\exists int i; 0 <= i && i <= 3; !tokens[i].equals("genneration"));
	public static boolean f(String sentence) {
		String[] tokens = sentence.split(" ");

		int i = 0;
		for (String token : tokens) {
			if (i == 3)
				if (!token.equals("genneration"))
					return false;
			++i;
		}
		return true;
	}
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
	//@ ensures \result == true ==> (\forall int i; 0 <= i && i <= 3; tokens[i].equals("genneration"));
	                                                                  ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:5: error: cannot find symbol
	//@ ensures \result == false ==> (\exists int i; 0 <= i && i <= 3; !tokens[i].equals("genneration"));
	                                                                    ^
  symbol:   variable tokens
  location: class TokenTest02
2 errors

public class TokenTest02 {
	//@ requires sentence != null;
	//@ ensures \result == true || \result == false;
	//@ ensures \result == true ==> (\forall int i; 0 <= i && i <= 3; sentence.split(" ")[i].equals("genneration"));
	//@ ensures \result == false ==> (\exists int i; 0 <= i && i <= 3; !sentence.split(" ")[i].equals("genneration"));
	public static boolean f(String sentence) {
		int i = 0;
		for (String token : sentence.split(" ")) {
			if (i == 3)
				if (!token.equals("genneration"))
					return false;
			++i;
		}
		return true;
	}
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:14: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method f
		return true;
		^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:14:
	//@ ensures \result == true ==> (\forall int i; 0 <= i && i <= 3; sentence.split(" ")[i].equals("genneration"));
	    ^
2 verification failures

public class TokenTest02 {
	//@ requires sentence != null;
	//@ ensures \result == true || \result == false;
	//@ ensures \result == true ==> (\forall int i; 0 <= i && i <= 3; sentence.split(" ")[i].equals("genneration"));
	//@ ensures \result == false ==> (\exists int i; 0 <= i && i <= 3; !sentence.split(" ")[i].equals("genneration"));
	public static boolean f(String sentence) {
		int i = 0;
		for (String token : sentence.split(" ")) {
			if (i == 3 && !token.equals("genneration")) {
				return false;
			}
			++i;
		}
		return true;
	}
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:14: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method f
		return true;
		^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:14:
	//@ ensures \result == true ==> (\forall int i; 0 <= i && i <= 3; sentence.split(" ")[i].equals("genneration"));
	    ^
2 verification failures

public class TokenTest02 {
	//@ requires sentence != null;
	//@ ensures \result == true || \result == false;
	//@ ensures \result == true ==> (\forall int i; 0 <= i && i < sentence.split(" ").length && i <= 3; sentence.split(" ")[i].equals("genneration"));
	//@ ensures \result == false ==> (\exists int i; 0 <= i && i < sentence.split(" ").length && i <= 3; !sentence.split(" ")[i].equals("genneration"));
	public static boolean f(String sentence) {
		int i = 0;
		for (String token : sentence.split(" ")) {
			if (i == 3 && !token.equals("genneration")) {
				return false;
			}
			++i;
		}
		return true;
	}
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:14: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method f
		return true;
		^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:14:
	//@ ensures \result == true ==> (\forall int i; 0 <= i && i < sentence.split(" ").length && i <= 3; sentence.split(" ")[i].equals("genneration"));
	    ^
2 verification failures

public class TokenTest02 {
	//@ requires sentence != null;
	//@ ensures \result == true || \result == false;
	//@ ensures \result == true ==> (\forall int i; 0 <= i && i < sentence.split(" ").length && i <= 3; sentence.split(" ")[i].equals("genneration"));
	//@ ensures \result == false ==> (\exists int i; 0 <= i && i < sentence.split(" ").length && i <= 3; !sentence.split(" ")[i].equals("genneration"));
	public static boolean f(String sentence) {
		int i = 0;
		for (String token : sentence.split(" ")) {
			if (i == 3 && !token.equals("genneration")) {
				return false;
			}
			++i;
		}
		return true;
	}
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:14: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method f
		return true;
		^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:14:
	//@ ensures \result == true ==> (\forall int i; 0 <= i && i < sentence.split(" ").length && i <= 3; sentence.split(" ")[i].equals("genneration"));
	    ^
2 verification failures

public class TokenTest02 {
	//@ requires sentence != null;
	//@ ensures \result == true || \result == false;
	//@ ensures \result == true ==> (\forall int i; 0 <= i && i < sentence.split(" ").length && i <= 3; sentence.split(" ")[i].equals("genneration"));
	//@ ensures \result == false ==> (\exists int i; 0 <= i && i < sentence.split(" ").length && i <= 3; !sentence.split(" ")[i].equals("genneration"));
	public static boolean f(String sentence) {
		int i = 0;
		for (String token : sentence.split(" ")) {
			if (i == 3 && !token.equals("genneration")) {
				return false;
			}
			++i;
		}
		return true;
	}
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:14: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:4:) in method f
		return true;
		^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:14:
	//@ ensures \result == true ==> (\forall int i; 0 <= i && i < sentence.split(" ").length && i <= 3; sentence.split(" ")[i].equals("genneration"));
	    ^
2 verification failures

