class Main {
	//@ ensures \result <==> !(!(as[0] instanceof B)) && as[1] instanceof B;
	public static boolean f() {
		A[] as = {new A(), new B()};
		if (!(!(as[0] instanceof B)))
			return false;
		if (!(as[1] instanceof B))
			return false;
		return true;
	}
}

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: cannot find symbol
	//@ ensures \result <==> !(!(as[0] instanceof B)) && as[1] instanceof B;
	                             ^
  symbol:   variable as
  location: class Main
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: cannot find symbol
	//@ ensures \result <==> !(!(as[0] instanceof B)) && as[1] instanceof B;
	                                                     ^
  symbol:   variable as
  location: class Main
2 errors

class Main {
	//@ ensures \result <==> !(!(new A() instanceof B)) && new B() instanceof B;
	public static boolean f() {
		A[] as = {new A(), new B()};
		if (!(!(as[0] instanceof B)))
			return false;
		if (!(as[1] instanceof B))
			return false;
		return true;
	}
}

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: Object allocation is not permitted in specification expressions
	//@ ensures \result <==> !(!(new A() instanceof B)) && new B() instanceof B;
	                             ^
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: Object allocation is not permitted in specification expressions
	//@ ensures \result <==> !(!(new A() instanceof B)) && new B() instanceof B;
	                                                       ^
2 errors

class Main {
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	public static boolean f() {
		A[] as = {new A(), new B()};
		if (!(!(as[0] instanceof B)))
			return false;
		if (!(as[1] instanceof B))
			return false;
		return true;
	}
}

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: Object allocation is not permitted in specification expressions
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	                             ^
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: Object allocation is not permitted in specification expressions
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	                                                        ^
2 errors

class Main {
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	public static boolean f() {
		A[] as = {new A(), new B()};
		if (!(!(as[0] instanceof B)))
			return false;
		if (!(as[1] instanceof B))
			return false;
		return true;
	}
}

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: Object allocation is not permitted in specification expressions
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	                             ^
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: Object allocation is not permitted in specification expressions
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	                                                        ^
2 errors

class Main {
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	public static boolean f() {
		A[] as = {new A(), new B()};
		if (!(!(as[0] instanceof B)))
			return false;
		if (!(as[1] instanceof B))
			return false;
		return true;
	}
}

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: Object allocation is not permitted in specification expressions
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	                             ^
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: Object allocation is not permitted in specification expressions
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	                                                        ^
2 errors

class Main {
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	public static boolean f() {
		A[] as = {new A(), new B()};
		if (!(!(as[0] instanceof B)))
			return false;
		if (!(as[1] instanceof B))
			return false;
		return true;
	}
}

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: Object allocation is not permitted in specification expressions
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	                             ^
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: Object allocation is not permitted in specification expressions
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	                                                        ^
2 errors

class Main {
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	public static boolean f() {
		A[] as = {new A(), new B()};
		if (!(!(as[0] instanceof B)))
			return false;
		if (!(as[1] instanceof B))
			return false;
		return true;
	}
}

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: Object allocation is not permitted in specification expressions
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	                             ^
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: Object allocation is not permitted in specification expressions
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	                                                        ^
2 errors

class Main {
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	public static boolean f() {
		A[] as = {new A(), new B()};
		if (!(!(as[0] instanceof B)))
			return false;
		if (!(as[1] instanceof B))
			return false;
		return true;
	}
}

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: Object allocation is not permitted in specification expressions
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	                             ^
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: Object allocation is not permitted in specification expressions
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	                                                        ^
2 errors

class Main {
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	public static boolean f() {
		A[] as = {new A(), new B()};
		if (!(!(as[0] instanceof B)))
			return false;
		if (!(as[1] instanceof B))
			return false;
		return true;
	}
}

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: Object allocation is not permitted in specification expressions
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	                             ^
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: Object allocation is not permitted in specification expressions
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	                                                        ^
2 errors

class Main {
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	public static boolean f() {
		A[] as = {new A(), new B()};
		if (!(!(as[0] instanceof B)))
			return false;
		if (!(as[1] instanceof B))
			return false;
		return true;
	}
}

class A {}

class B extends A {}
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: Object allocation is not permitted in specification expressions
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	                             ^
/home/max/Documents/JMLGPT/tmp/instanceof7.java:2: error: Object allocation is not permitted in specification expressions
	//@ ensures \result <==> !(!(new A() instanceof B)) && (new B() instanceof B);
	                                                        ^
2 errors

