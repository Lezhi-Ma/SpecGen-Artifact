public class Ackermann {
    //@ requires m >= 0 && n >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == spec_ack(m, n);
    public static int ack(int m, int n) {
        if (m == 0) {
            return n + 1;
        }
        if (n == 0) {
            return ack(m - 1, 1);
        }
        return ack(m - 1, ack(m, n - 1));
    }

    /*@ 	requires m >= 0 && n >= 0;
            	ensures \result >= 0;
            	ensures \result == spec_ack(m, n);
        public model function static pure int spec_ack(int m, int n) {
            if (m == 0) {
                return n + 1;
            }
            if (n == 0) {
                return spec_ack(m - 1, 1);
            }
            return spec_ack(m - 1, spec_ack(m, n - 1));
        } @*/
}
/home/max/Documents/JMLGPT/tmp/Ackermann.java:18: error: <identifier> expected
        public model function static pure int spec_ack(int m, int n) {
                             ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:18: error: Method specs may not precede a variable declaration
        public model function static pure int spec_ack(int m, int n) {
                              ^
2 errors

public class Ackermann {
    //@ requires m >= 0 && n >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == spec_ack(m, n);
    public static int ack(int m, int n) {
        if (m == 0) {
            return n + 1;
        }
        if (n == 0) {
            return ack(m - 1, 1);
        }
        return ack(m - 1, ack(m, n - 1));
    }

    /*@ 	requires m >= 0 && n >= 0;
            	ensures \result >= 0;
            	ensures \result == spec_ack(m, n);
        public static int spec_ack(int m, int n) {
            if (m == 0) {
                return n + 1;
            }
            if (n == 0) {
                return spec_ack(m - 1, 1);
            }
            return spec_ack(m - 1, spec_ack(m, n - 1));
        } @*/
}
/home/max/Documents/JMLGPT/tmp/Ackermann.java:4: warning: A non-pure method is being called where it is not permitted: Ackermann.spec_ack(int,int)
    //@ ensures \result == spec_ack(m, n);
                                   ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:18: error: A JML method declaration must be marked model: Ackermann.spec_ack(int,int)
        public static int spec_ack(int m, int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:17: warning: A non-pure method is being called where it is not permitted: Ackermann.spec_ack(int,int)
            	ensures \result == spec_ack(m, n);
            	                           ^
1 error
2 warnings

public class Ackermann {
    //@ requires m >= 0 && n >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == spec_ack(m, n);
    public static int ack(int m, int n) {
        if (m == 0) {
            return n + 1;
        }
        if (n == 0) {
            return ack(m - 1, 1);
        }
        return ack(m - 1, ack(m, n - 1));
    }

    /*@ 	requires m >= 0 && n >= 0;
            	ensures \result >= 0;
            	ensures \result == spec_ack(m, n);
        public static int spec_ack(int m, int n) {
            if (m == 0) {
                return n + 1;
            }
            if (n == 0) {
                return spec_ack(m - 1, 1);
            }
            return spec_ack(m - 1, spec_ack(m, n - 1));
        } @*/
}
/home/max/Documents/JMLGPT/tmp/Ackermann.java:4: warning: A non-pure method is being called where it is not permitted: Ackermann.spec_ack(int,int)
    //@ ensures \result == spec_ack(m, n);
                                   ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:18: error: A JML method declaration must be marked model: Ackermann.spec_ack(int,int)
        public static int spec_ack(int m, int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:17: warning: A non-pure method is being called where it is not permitted: Ackermann.spec_ack(int,int)
            	ensures \result == spec_ack(m, n);
            	                           ^
1 error
2 warnings

public class Ackermann {
    //@ requires m >= 0 && n >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == spec_ack(m, n);
    public static int ack(int m, int n) {
        if (m == 0) {
            return n + 1;
        }
        if (n == 0) {
            return ack(m - 1, 1);
        }
        return ack(m - 1, ack(m, n - 1));
    }

    /*@ 	requires m >= 0 && n >= 0;
            	ensures \result >= 0;
            	ensures \result == spec_ack(m, n);
        public static pure int spec_ack(int m, int n) {
            if (m == 0) {
                return n + 1;
            }
            if (n == 0) {
                return spec_ack(m - 1, 1);
            }
            return spec_ack(m - 1, spec_ack(m, n - 1));
        } @*/
}
/home/max/Documents/JMLGPT/tmp/Ackermann.java:18: error: A JML method declaration must be marked model: Ackermann.spec_ack(int,int)
        public static pure int spec_ack(int m, int n) {
                               ^
1 error

public class Ackermann {
    //@ requires m >= 0 && n >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == spec_ack(m, n);
    public static int ack(int m, int n) {
        if (m == 0) {
            return n + 1;
        }
        if (n == 0) {
            return ack(m - 1, 1);
        }
        return ack(m - 1, ack(m, n - 1));
    }

    /*@ 	requires m >= 0 && n >= 0;
            	ensures \result >= 0;
            	ensures \result == spec_ack(m, n);
        public static model pure int spec_ack(int m, int n) {
            if (m == 0) {
                return n + 1;
            }
            if (n == 0) {
                return spec_ack(m - 1, 1);
            }
            return spec_ack(m - 1, spec_ack(m, n - 1));
        } @*/
}
/home/max/Documents/JMLGPT/tmp/Ackermann.java:7: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:4:) in method ack
            return n + 1;
            ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:7:
    //@ ensures \result == spec_ack(m, n);
        ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:17:) in method spec_ack
            return spec_ack(m - 1, spec_ack(m, n - 1));
            ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:25:
            	ensures \result == spec_ack(m, n);
            	^
4 verification failures

public class Ackermann {
    //@ requires m >= 0 && n >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == spec_ack(m, n);
    public static int ack(int m, int n) {
        if (m == 0) {
            return n + 1;
        }
        if (n == 0) {
            return ack(m - 1, 1);
        }
        return ack(m - 1, ack(m, n - 1));
    }

    /*@ 	requires m >= 0 && n >= 0;
            	ensures \result >= 0;
            	ensures \result == spec_ack(m, n);
        public static model pure int spec_ack(int m, int n) {
            if (m == 0) {
                return n + 1;
            }
            if (n == 0) {
                return spec_ack(m - 1, 1);
            }
            return spec_ack(m - 1, spec_ack(m, n - 1));
        } @*/
}
/home/max/Documents/JMLGPT/tmp/Ackermann.java:7: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:4:) in method ack
            return n + 1;
            ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:7:
    //@ ensures \result == spec_ack(m, n);
        ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:17:) in method spec_ack
            return spec_ack(m - 1, spec_ack(m, n - 1));
            ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:25:
            	ensures \result == spec_ack(m, n);
            	^
4 verification failures

public class Ackermann {
    //@ requires m >= 0 && n >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == spec_ack(m, n);
    public static int ack(int m, int n) {
        if (m == 0) {
            return n + 1;
        }
        if (n == 0) {
            return ack(m - 1, 1);
        }
        return ack(m - 1, ack(m, n - 1));
    }

    /*@ 	requires m >= 0 && n >= 0;
            	ensures \result >= 0;
            	ensures \result == spec_ack(m, n);
        public static model pure int spec_ack(int m, int n) {
            if (m == 0) {
                return n + 1;
            }
            if (n == 0) {
                return spec_ack(m - 1, 1);
            }
            return spec_ack(m - 1, spec_ack(m, n - 1));
        } @*/
}
/home/max/Documents/JMLGPT/tmp/Ackermann.java:7: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:4:) in method ack
            return n + 1;
            ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:7:
    //@ ensures \result == spec_ack(m, n);
        ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:17:) in method spec_ack
            return spec_ack(m - 1, spec_ack(m, n - 1));
            ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:25:
            	ensures \result == spec_ack(m, n);
            	^
4 verification failures

public class Ackermann {
    //@ requires m >= 0 && n >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == spec_ack(m, n);
    public static int ack(int m, int n) {
        if (m == 0) {
            return n + 1;
        }
        if (n == 0) {
            return ack(m - 1, 1);
        }
        return ack(m - 1, ack(m, n - 1));
    }

    /*@ 	requires m >= 0 && n >= 0;
            	ensures \result >= 0;
            	ensures \result == spec_ack(m, n);
        public static model pure int spec_ack(int m, int n) {
            if (m == 0) {
                return n + 1;
            }
            if (n == 0) {
                return spec_ack(m - 1, 1);
            }
            return spec_ack(m - 1, spec_ack(m, n - 1));
        } @*/
}
/home/max/Documents/JMLGPT/tmp/Ackermann.java:7: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:4:) in method ack
            return n + 1;
            ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:7:
    //@ ensures \result == spec_ack(m, n);
        ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:17:) in method spec_ack
            return spec_ack(m - 1, spec_ack(m, n - 1));
            ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:25:
            	ensures \result == spec_ack(m, n);
            	^
4 verification failures

public class Ackermann {
    //@ requires m >= 0 && n >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == spec_ack(m, n);
    public static int ack(int m, int n) {
        if (m == 0) {
            return n + 1;
        }
        if (n == 0) {
            return ack(m - 1, 1);
        }
        return ack(m - 1, ack(m, n - 1));
    }

    /*@ 	requires m >= 0 && n >= 0;
            	ensures \result >= 0;
            	ensures \result == spec_ack(m, n);
        public static model pure int spec_ack(int m, int n) {
            if (m == 0) {
                return n + 1;
            }
            if (n == 0) {
                return spec_ack(m - 1, 1);
            }
            return spec_ack(m - 1, spec_ack(m, n - 1));
        } @*/
}
/home/max/Documents/JMLGPT/tmp/Ackermann.java:7: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:4:) in method ack
            return n + 1;
            ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:7:
    //@ ensures \result == spec_ack(m, n);
        ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:17:) in method spec_ack
            return spec_ack(m - 1, spec_ack(m, n - 1));
            ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:25:
            	ensures \result == spec_ack(m, n);
            	^
4 verification failures

public class Ackermann {
    //@ requires m >= 0 && n >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == spec_ack(m, n);
    public static int ack(int m, int n) {
        if (m == 0) {
            return n + 1;
        }
        if (n == 0) {
            return ack(m - 1, 1);
        }
        return ack(m - 1, ack(m, n - 1));
    }

    /*@ 	requires m >= 0 && n >= 0;
            	ensures \result >= 0;
            	ensures \result == spec_ack(m, n);
        public static model pure int spec_ack(int m, int n) {
            if (m == 0) {
                return n + 1;
            }
            if (n == 0) {
                return spec_ack(m - 1, 1);
            }
            return spec_ack(m - 1, spec_ack(m, n - 1));
        } @*/
}
/home/max/Documents/JMLGPT/tmp/Ackermann.java:7: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:4:) in method ack
            return n + 1;
            ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:7:
    //@ ensures \result == spec_ack(m, n);
        ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/Ackermann.java:17:) in method spec_ack
            return spec_ack(m - 1, spec_ack(m, n - 1));
            ^
/home/max/Documents/JMLGPT/tmp/Ackermann.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/Ackermann.java:25:
            	ensures \result == spec_ack(m, n);
            	^
4 verification failures

