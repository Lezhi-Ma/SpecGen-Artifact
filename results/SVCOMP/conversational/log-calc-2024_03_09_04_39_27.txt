public class calc {
  //@ requires args.length >= 2;
  //@ ensures args.length < 2 ==> System.out.println("need two arguments");
  //@ ensures args.length >= 2 ==> \result == do_stuff(args[0], args[1]);
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null && b != null;
  //@ requires \typeof(a) == \type(String) && \typeof(b) == \type(String);
  //@ requires (\exists int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
  //@ requires (\exists int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }
}
/home/max/Documents/JMLGPT/tmp/calc.java:3: error: incompatible types: void cannot be converted to boolean
  //@ ensures args.length < 2 ==> System.out.println("need two arguments");
                                                    ^
/home/max/Documents/JMLGPT/tmp/calc.java:4: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures args.length >= 2 ==> \result == do_stuff(args[0], args[1]);
                                    ^
/home/max/Documents/JMLGPT/tmp/calc.java:4: error: non-static method do_stuff(String,String) cannot be referenced from a static context
  //@ ensures args.length >= 2 ==> \result == do_stuff(args[0], args[1]);
                                              ^
/home/max/Documents/JMLGPT/tmp/calc.java:4: error: 'void' type not allowed here
  //@ ensures args.length >= 2 ==> \result == do_stuff(args[0], args[1]);
                                                      ^
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                         ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                              ^
  symbol:   variable y
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                   ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                        ^
  symbol:   variable y
  location: class calc
8 errors

public class calc {
  //@ requires args.length >= 2;
  //@ ensures args.length < 2 ==> System.out.println("need two arguments");
  //@ ensures args.length >= 2 ==> do_stuff(args[0], args[1]);
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null && b != null;
  //@ requires \typeof(a) == \type(String) && \typeof(b) == \type(String);
  //@ requires (\exists int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
  //@ requires (\exists int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
  void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }
}
/home/max/Documents/JMLGPT/tmp/calc.java:3: error: incompatible types: void cannot be converted to boolean
  //@ ensures args.length < 2 ==> System.out.println("need two arguments");
                                                    ^
/home/max/Documents/JMLGPT/tmp/calc.java:4: error: non-static method do_stuff(String,String) cannot be referenced from a static context
  //@ ensures args.length >= 2 ==> do_stuff(args[0], args[1]);
                                   ^
/home/max/Documents/JMLGPT/tmp/calc.java:4: error: incompatible types: void cannot be converted to boolean
  //@ ensures args.length >= 2 ==> do_stuff(args[0], args[1]);
                                           ^
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                         ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                              ^
  symbol:   variable y
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                   ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                        ^
  symbol:   variable y
  location: class calc
7 errors

public class calc {
  //@ requires args.length >= 2;
  //@ ensures args.length < 2 ==> \nothing;
  //@ ensures args.length >= 2 ==> \result == do_stuff(args[0], args[1]);
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null && b != null;
  //@ requires \typeof(a) == \type(String) && \typeof(b) == \type(String);
  //@ requires (\exists int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
  //@ requires (\exists int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
  public static void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }
}
/home/max/Documents/JMLGPT/tmp/calc.java:3: error: incompatible types: <none> cannot be converted to boolean
  //@ ensures args.length < 2 ==> \nothing;
                                  ^
/home/max/Documents/JMLGPT/tmp/calc.java:4: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures args.length >= 2 ==> \result == do_stuff(args[0], args[1]);
                                    ^
/home/max/Documents/JMLGPT/tmp/calc.java:4: error: 'void' type not allowed here
  //@ ensures args.length >= 2 ==> \result == do_stuff(args[0], args[1]);
                                                      ^
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                         ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                              ^
  symbol:   variable y
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                   ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                        ^
  symbol:   variable y
  location: class calc
7 errors

public class calc {
  //@ requires args.length >= 2;
  //@ ensures args.length < 2 ==> \nothing;
  //@ ensures args.length >= 2 ==> do_stuff(args[0], args[1]);
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null && b != null;
  //@ requires \typeof(a) == \type(String) && \typeof(b) == \type(String);
  //@ requires (\exists int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
  //@ requires (\exists int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
  public static void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }
}
/home/max/Documents/JMLGPT/tmp/calc.java:3: error: incompatible types: <none> cannot be converted to boolean
  //@ ensures args.length < 2 ==> \nothing;
                                  ^
/home/max/Documents/JMLGPT/tmp/calc.java:4: error: incompatible types: void cannot be converted to boolean
  //@ ensures args.length >= 2 ==> do_stuff(args[0], args[1]);
                                           ^
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                         ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                              ^
  symbol:   variable y
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                   ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                        ^
  symbol:   variable y
  location: class calc
6 errors

public class calc {
  //@ requires args.length >= 2;
  //@ ensures args.length < 2 ==> \nothing;
  //@ ensures args.length >= 2 ==> true;
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null && b != null;
  //@ requires \typeof(a) == \type(String) && \typeof(b) == \type(String);
  //@ requires (\exists int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
  //@ requires (\exists int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
  public static void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }
}
/home/max/Documents/JMLGPT/tmp/calc.java:3: error: incompatible types: <none> cannot be converted to boolean
  //@ ensures args.length < 2 ==> \nothing;
                                  ^
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                         ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                              ^
  symbol:   variable y
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                   ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                        ^
  symbol:   variable y
  location: class calc
5 errors

public class calc {
  //@ requires args.length >= 2;
  //@ ensures args.length < 2 ==> \nothing;
  //@ ensures args.length >= 2 ==> true;
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null && b != null;
  //@ requires \typeof(a) == \type(String) && \typeof(b) == \type(String);
  //@ requires (\exists int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
  //@ requires (\exists int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
  public static void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert x != y || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }
}
/home/max/Documents/JMLGPT/tmp/calc.java:3: error: incompatible types: <none> cannot be converted to boolean
  //@ ensures args.length < 2 ==> \nothing;
                                  ^
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                         ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                              ^
  symbol:   variable y
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                   ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                        ^
  symbol:   variable y
  location: class calc
5 errors

public class calc {
  //@ requires args.length >= 2;
  //@ ensures args.length < 2 ==> \nothing;
  //@ ensures args.length >= 2 ==> true;
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null && b != null;
  //@ requires \typeof(a) == \type(String) && \typeof(b) == \type(String);
  //@ requires (\exists int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
  //@ requires (\exists int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
  public static void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert x != y || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }
}
/home/max/Documents/JMLGPT/tmp/calc.java:3: error: incompatible types: <none> cannot be converted to boolean
  //@ ensures args.length < 2 ==> \nothing;
                                  ^
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                         ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                              ^
  symbol:   variable y
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                   ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                        ^
  symbol:   variable y
  location: class calc
5 errors

public class calc {
  //@ requires args.length >= 2;
  //@ ensures args.length < 2 ==> \nothing;
  //@ ensures args.length >= 2 ==> true;
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null && b != null;
  //@ requires \typeof(a) == \type(String) && \typeof(b) == \type(String);
  //@ requires (\exists int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
  //@ requires (\exists int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
  public static void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert x != y || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }
}
/home/max/Documents/JMLGPT/tmp/calc.java:3: error: incompatible types: <none> cannot be converted to boolean
  //@ ensures args.length < 2 ==> \nothing;
                                  ^
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                         ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                              ^
  symbol:   variable y
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                   ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                        ^
  symbol:   variable y
  location: class calc
5 errors

public class calc {
  //@ requires args.length >= 2;
  //@ ensures args.length < 2 ==> \nothing;
  //@ ensures args.length >= 2 ==> true;
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null && b != null;
  //@ requires \typeof(a) == \type(String) && \typeof(b) == \type(String);
  //@ requires (\exists int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
  //@ requires (\exists int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
  public static void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert x != y || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }
}
/home/max/Documents/JMLGPT/tmp/calc.java:3: error: incompatible types: <none> cannot be converted to boolean
  //@ ensures args.length < 2 ==> \nothing;
                                  ^
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                         ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                              ^
  symbol:   variable y
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                   ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                        ^
  symbol:   variable y
  location: class calc
5 errors

public class calc {
  //@ requires args.length >= 2;
  //@ ensures args.length < 2 ==> \nothing;
  //@ ensures args.length >= 2 ==> true;
  public static void fun(String[] args) {
    if (args.length < 2) {
      System.out.println("need two arguments");
      return;
    }
    new calc().do_stuff(args[0], args[1]);
  }

  //@ requires a != null && b != null;
  //@ requires \typeof(a) == \type(String) && \typeof(b) == \type(String);
  //@ requires (\exists int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
  //@ requires (\exists int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
  public static void do_stuff(String a, String b) {
    try {
      int x = Integer.parseInt(a);
      int y = Integer.parseInt(b);
      assert x != y || x == y;
    } catch (java.lang.NumberFormatException e) {
    }
  }
}
/home/max/Documents/JMLGPT/tmp/calc.java:3: error: incompatible types: <none> cannot be converted to boolean
  //@ ensures args.length < 2 ==> \nothing;
                                  ^
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                         ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                              ^
  symbol:   variable y
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                   ^
  symbol:   variable x
  location: class calc
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: cannot find symbol
  //@ ensures (\exists int x; x == Integer.parseInt(a)) && (\exists int y; y == Integer.parseInt(b)) ==> x != y || x == y;
                                                                                                                        ^
  symbol:   variable y
  location: class calc
5 errors

