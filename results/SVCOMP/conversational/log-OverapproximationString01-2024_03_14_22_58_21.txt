public class OverapproximationString01 {
    //@ requires s != null;
    //@ ensures (\result == "abc" + s && \result.equals("not possible")) ==> \result.equals("not possible");
    //@ ensures !(\result.equals("not possible")) ==> !\result.equals("not possible");
    public static void foo(String s) {
        String prefix = "abc";
        String complete = prefix + s;
        if (complete.equals("not possible")) {
            assert (true);
        } else {
            assert (false);
        }
    }
}
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:3: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures (\result == "abc" + s && \result.equals("not possible")) ==> \result.equals("not possible");
                  ^
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:3: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures (\result == "abc" + s && \result.equals("not possible")) ==> \result.equals("not possible");
                                          ^
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:3: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures (\result == "abc" + s && \result.equals("not possible")) ==> \result.equals("not possible");
                                                                              ^
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:4: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures !(\result.equals("not possible")) ==> !\result.equals("not possible");
                   ^
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:4: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures !(\result.equals("not possible")) ==> !\result.equals("not possible");
                                                        ^
5 errors

public class OverapproximationString01 {
    //@ requires s != null;
    //@ ensures complete.equals("not possible") ==> complete.equals("not possible");
    //@ ensures !complete.equals("not possible") ==> !complete.equals("not possible");
    public static void foo(String s) {
        String prefix = "abc";
        String complete = prefix + s;
        if (complete.equals("not possible")) {
            assert (true);
        } else {
            assert (false);
        }
    }
}
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:3: error: cannot find symbol
    //@ ensures complete.equals("not possible") ==> complete.equals("not possible");
                ^
  symbol:   variable complete
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:3: error: cannot find symbol
    //@ ensures complete.equals("not possible") ==> complete.equals("not possible");
                                                    ^
  symbol:   variable complete
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:4: error: cannot find symbol
    //@ ensures !complete.equals("not possible") ==> !complete.equals("not possible");
                 ^
  symbol:   variable complete
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:4: error: cannot find symbol
    //@ ensures !complete.equals("not possible") ==> !complete.equals("not possible");
                                                      ^
  symbol:   variable complete
  location: class OverapproximationString01
4 errors

public class OverapproximationString01 {
    //@ requires s != null;
    //@ ensures prefix.equals("abc") ==> prefix.equals("abc");
    //@ ensures !prefix.equals("abc") ==> !prefix.equals("abc");
    public static void foo(String s) {
        String prefix = "abc";
        String complete = prefix + s;
        if (complete.equals("not possible")) {
            assert (true);
        } else {
            assert (false);
        }
    }
}
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:3: error: cannot find symbol
    //@ ensures prefix.equals("abc") ==> prefix.equals("abc");
                ^
  symbol:   variable prefix
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:3: error: cannot find symbol
    //@ ensures prefix.equals("abc") ==> prefix.equals("abc");
                                         ^
  symbol:   variable prefix
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:4: error: cannot find symbol
    //@ ensures !prefix.equals("abc") ==> !prefix.equals("abc");
                 ^
  symbol:   variable prefix
  location: class OverapproximationString01
/home/max/Documents/JMLGPT/tmp/OverapproximationString01.java:4: error: cannot find symbol
    //@ ensures !prefix.equals("abc") ==> !prefix.equals("abc");
                                           ^
  symbol:   variable prefix
  location: class OverapproximationString01
4 errors

public class OverapproximationString01 {
    //@ requires s != null;
    //@ ensures s.equals("not possible") ==> s.equals("not possible");
    //@ ensures !s.equals("not possible") ==> !s.equals("not possible");
    public static void foo(String s) {
        String prefix = "abc";
        String complete = prefix + s;
        if (complete.equals("not possible")) {
            assert (true);
        } else {
            assert (false);
        }
    }
}
