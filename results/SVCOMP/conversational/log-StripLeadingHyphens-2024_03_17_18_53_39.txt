import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+2]);
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result.length == str.length - 1 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+1]);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        temp_Boolean = (str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            temp_Boolean = str[0] == '-';
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
    
}
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:16: verify: The prover cannot establish an assertion (PossiblyTooLargeIndex) in method stripLeadingHyphens
        temp_Boolean = (str[0] == '-' && str[1] == '-');
                           ^
1 verification failure

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+2]);
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result.length == str.length - 1 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+1]);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= 0 && 0 < str.length;
        //@ assume 0 <= 1 && 1 < str.length;
        temp_Boolean = (str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            //@ assume 0 <= 0 && 0 < str.length;
            temp_Boolean = str[0] == '-';
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
    
}
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
                return Arrays.copyOfRange(str, 1, str.length);
                ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:25:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+2]);
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+2]);
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result.length == str.length - 1 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+1]);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= 0 && 0 < str.length;
        //@ assume 0 <= 1 && 1 < str.length;
        temp_Boolean = (str[0] == '-' && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            //@ assume 0 <= 0 && 0 < str.length;
            temp_Boolean = str[0] == '-';
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
    
}
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
                return Arrays.copyOfRange(str, 1, str.length);
                ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:25:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+2]);
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+2]);
    //@ ensures \result != null ==> str[0] == '-' && str[1] == '-';
    //@ ensures \result != null ==> \result.length == str.length - 1 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+1]);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= 0 && 0 < str.length;
        //@ assume 0 <= 1 && 1 < str.length;
        temp_Boolean = (str[0] == '-' && str.length > 1 && str[1] == '-');
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            //@ assume 0 <= 0 && 0 < str.length;
            temp_Boolean = str[0] == '-';
            if (temp_Boolean) {
                return Arrays.copyOfRange(str, 1, str.length);
            }
        }
        return str;
    }
    
}
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
                return Arrays.copyOfRange(str, 1, str.length);
                ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:25:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+2]);
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+2]);
    //@ ensures \result != null ==> str[0] == '-' && (str.length == 1 || str[1] == '-');
    //@ ensures \result != null ==> \result.length == str.length - 1 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+1]);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= 0 && 0 < str.length;
        temp_Boolean = (str[0] == '-' && (str.length == 1 || str[1] == '-'));
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 1, str.length);
        } else {
            return str;
        }
    }
    
}
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
            return Arrays.copyOfRange(str, 1, str.length);
            ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:19:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+2]);
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+2]);
    //@ ensures \result != null ==> str[0] == '-' && (str.length == 1 || str[1] == '-');
    //@ ensures \result != null ==> \result.length == str.length - 1 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+1]);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= 0 && 0 < str.length;
        temp_Boolean = (str[0] == '-' && (str.length == 1 || str.length > 1 && str[1] == '-'));
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 1, str.length);
        } else {
            return str;
        }
    }
    
}
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
            return Arrays.copyOfRange(str, 1, str.length);
            ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:19:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+2]);
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+2]);
    //@ ensures \result != null ==> str[0] == '-' && (str.length == 1 || str.length > 1 && str[1] == '-');
    //@ ensures \result != null ==> \result.length == str.length - 1 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+1]);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= 0 && 0 < str.length;
        temp_Boolean = (str[0] == '-' && (str.length == 1 || (str.length > 1 && str[1] == '-')));
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 1, str.length);
        } else {
            return str;
        }
    }
    
}
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
            return str;
            ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:21:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+2]);
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+2]);
    //@ ensures \result != null ==> str[0] == '-' && (str.length == 1 || (str.length > 1 && str[1] == '-'));
    //@ ensures \result != null ==> \result.length == str.length - 1 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+1]);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= 0 && 0 < str.length;
        temp_Boolean = (str[0] == '-' && (str.length == 1 || (str.length > 1 && str[1] == '-')));
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 1, str.length);
        } else {
            return str;
        }
    }
    
}
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
            return Arrays.copyOfRange(str, 1, str.length);
            ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:19:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+2]);
        ^
2 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+2]);
    //@ ensures \result != null ==> str[0] == '-' && (str.length == 1 || (str.length > 1 && str[1] == '-'));
    //@ ensures \result != null ==> \result.length == str.length - 1 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+1]);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= 0 && 0 < str.length;
        temp_Boolean = (str[0] == '-' && (str.length == 1 || (str.length > 1 && str[1] == '-')));
        if (temp_Boolean) {
            return Arrays.copyOfRange(str, 2, str.length);
        } else {
            return str;
        }
    }
    
}
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/openjml/specs/java/util/Arrays.jml:1803:) in method stripLeadingHyphens
            return Arrays.copyOfRange(str, 2, str.length);
                                     ^
/home/max/Documents/JMLGPT/openjml/specs/java/util/Arrays.jml:1803: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:19:
    public static char[] copyOfRange(char /*@ nullable @*/ [] original, int from, int to);
                         ^
/home/max/Documents/JMLGPT/openjml/specs/java/util/Arrays.jml:1785: verify: Precondition conjunct is false: 0 <= from <= to
    //@   requires 0 <= from <= to;
                             ^
/home/max/Documents/JMLGPT/openjml/specs/java/util/Arrays.jml:1793: verify: Precondition conjunct is false: original.length < to
    //@       requires original.length < to;
                                       ^
4 verification failures

import java.util.Arrays;

class StripLeadingHyphens {

    //@ requires str != null;
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+2]);
    //@ ensures \result != null ==> str[0] == '-' && (str.length == 1 || (str.length > 1 && str[1] == '-'));
    //@ ensures \result != null ==> \result.length == str.length - 1 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+1]);
    //@ ensures \result != null ==> str[0] == '-';
    //@ ensures \result == str;
    static char[] stripLeadingHyphens(char[] str) {
        boolean temp_Boolean = false;
        if (str == null) {
            return null;
        }
        //@ assume 0 <= 0 && 0 < str.length;
        temp_Boolean = (str[0] == '-' && (str.length == 1 || (str.length > 1 && str[1] == '-')));
        if (temp_Boolean) {
            if (str.length > 2) {
                return Arrays.copyOfRange(str, 2, str.length);
            } else {
                return new char[0];
            }
        } else {
            return str;
        }
    }
    
}
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6:) in method stripLeadingHyphens
                return new char[0];
                ^
/home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StripLeadingHyphens.java:22:
    //@ ensures \result != null ==> \result.length == str.length - 2 && (\forall int i; 0 <= i && i < \result.length; \result[i] == str[i+2]);
        ^
2 verification failures

