public class BinaryTree {
  /** Internal class representing a Node in the tree. */
  private class Node {
    int value;
    Node left;
    Node right;

    Node(int v, Node l, Node r) {
      value = v;
      left = l;
      right = r;
    }
  }

  private /*@ spec_public @*/ Node root = null;

  /** Inserts a value in to the tree. */
  //@ requires (\forall Node n; root != null; n != null && n.value != v);
  //@ ensures (\exists Node n; root != null; n != null && n.value == v);
  public void insert(int v) {

    if (root == null) {
      root = new Node(v, null, null);
      return;
    }

    Node curr = root;
    while (true) {
      if (curr.value < v) {
        if (curr.right != null) {
          curr = curr.right;
        } else {
          curr.right = new Node(v, null, null);
          break;
        }
      } else if (curr.value > v) {
        if (curr.left != null) {
          curr = curr.left;
        } else {
          curr.left = new Node(v, null, null);
          break;
        }
      } else {
        break;
      }
    }
  }

  /** Searches for a value in the tree. */
  //@ requires root != null;
  //@ ensures \result <==> (\exists Node n; root != null; n != null && n.value == v);
  public boolean search(int v) {
    Node curr = root;
    while (curr != null) { // N branches
      if (curr.value == v) { // N-1 branches
        return true;
      } else if (curr.value < v) { // N-1 branches
        curr = curr.right;
      } else {
        curr = curr.left;
      }
    }
    return false;
  }
}
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:18: error: An identifier with package visibility may not be used in a requires clause with public visibility
  //@ requires (\forall Node n; root != null; n != null && n.value != v);
                                                            ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:19: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures (\exists Node n; root != null; n != null && n.value == v);
                                                           ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:51: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result <==> (\exists Node n; root != null; n != null && n.value == v);
                                                                        ^
3 errors

public class BinaryTree {
  /** Internal class representing a Node in the tree. */
  private class Node {
    /*@ spec_public @*/ int value;
    /*@ spec_public @*/ Node left;
    /*@ spec_public @*/ Node right;

    Node(int v, Node l, Node r) {
      value = v;
      left = l;
      right = r;
    }
  }

  /*@ spec_public @*/ private Node root = null;

  /** Inserts a value in to the tree. */
  //@ requires (\forall Node n; root != null; n != null && n.value != v);
  //@ ensures (\exists Node n; root != null; n != null && n.value == v);
  public void insert(int v) {

    if (root == null) {
      root = new Node(v, null, null);
      return;
    }

    Node curr = root;
    while (true) {
      if (curr.value < v) {
        if (curr.right != null) {
          curr = curr.right;
        } else {
          curr.right = new Node(v, null, null);
          break;
        }
      } else if (curr.value > v) {
        if (curr.left != null) {
          curr = curr.left;
        } else {
          curr.left = new Node(v, null, null);
          break;
        }
      } else {
        break;
      }
    }
  }

  /** Searches for a value in the tree. */
  //@ requires root != null;
  //@ ensures \result <==> (\exists Node n; root != null; n != null && n.value == v);
  public boolean search(int v) {
    Node curr = root;
    while (curr != null) { // N branches
      if (curr.value == v) { // N-1 branches
        return true;
      } else if (curr.value < v) { // N-1 branches
        curr = curr.right;
      } else {
        curr = curr.left;
      }
    }
    return false;
  }
}
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:15: verify: The prover cannot establish an assertion (NullField) in method BinaryTree
  /*@ spec_public @*/ private Node root = null;
                                   ^
1 verification failure

public class BinaryTree {
  /** Internal class representing a Node in the tree. */
  private class Node {
    /*@ spec_public @*/ int value;
    /*@ spec_public @*/ Node left;
    /*@ spec_public @*/ Node right;

    Node(int v, Node l, Node r) {
      value = v;
      left = l;
      right = r;
    }
  }

  /*@ spec_public @*/ private Node root;

  /** Inserts a value in to the tree. */
  //@ requires (\forall Node n; root != null; n != null && n.value != v);
  //@ ensures (\exists Node n; root != null; n != null && n.value == v);
  public void insert(int v) {

    if (root == null) {
      root = new Node(v, null, null);
      return;
    }

    Node curr = root;
    while (true) {
      if (curr.value < v) {
        if (curr.right != null) {
          curr = curr.right;
        } else {
          curr.right = new Node(v, null, null);
          break;
        }
      } else if (curr.value > v) {
        if (curr.left != null) {
          curr = curr.left;
        } else {
          curr.left = new Node(v, null, null);
          break;
        }
      } else {
        break;
      }
    }
  }

  /** Searches for a value in the tree. */
  //@ requires root != null;
  //@ ensures \result <==> (\exists Node n; root != null; n != null && n.value == v);
  public boolean search(int v) {
    Node curr = root;
    while (curr != null) { // N branches
      if (curr.value == v) { // N-1 branches
        return true;
      } else if (curr.value < v) { // N-1 branches
        curr = curr.right;
      } else {
        curr = curr.left;
      }
    }
    return false;
  }
}
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:15: verify: The prover cannot establish an assertion (NullField) in method BinaryTree
  /*@ spec_public @*/ private Node root;
                                   ^
1 verification failure

public class BinaryTree {
  /** Internal class representing a Node in the tree. */
  private class Node {
    /*@ spec_public @*/ int value;
    /*@ spec_public @*/ Node left;
    /*@ spec_public @*/ Node right;

    Node(int v, Node l, Node r) {
      value = v;
      left = l;
      right = r;
    }
  }

  /*@ spec_public @*/ private Node root = null;

  /** Inserts a value in to the tree. */
  //@ requires (\forall Node n; root != null; n != null && n.value != v);
  //@ ensures (\exists Node n; root != null; n != null && n.value == v);
  public void insert(int v) {

    if (root == null) {
      root = new Node(v, null, null);
      return;
    }

    Node curr = root;
    while (true) {
      if (curr.value < v) {
        if (curr.right != null) {
          curr = curr.right;
        } else {
          curr.right = new Node(v, null, null);
          break;
        }
      } else if (curr.value > v) {
        if (curr.left != null) {
          curr = curr.left;
        } else {
          curr.left = new Node(v, null, null);
          break;
        }
      } else {
        break;
      }
    }
  }

  /** Searches for a value in the tree. */
  //@ requires root != null;
  //@ ensures \result <==> (\exists Node n; root != null; n != null && n.value == v);
  public boolean search(int v) {
    Node curr = root;
    while (curr != null) { // N branches
      if (curr.value == v) { // N-1 branches
        return true;
      } else if (curr.value < v) { // N-1 branches
        curr = curr.right;
      } else {
        curr = curr.left;
      }
    }
    return false;
  }
}
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:15: verify: The prover cannot establish an assertion (NullField) in method BinaryTree
  /*@ spec_public @*/ private Node root = null;
                                   ^
1 verification failure

public class BinaryTree {
  /** Internal class representing a Node in the tree. */
  private class Node {
    /*@ spec_public @*/ int value;
    /*@ spec_public @*/ Node left;
    /*@ spec_public @*/ Node right;

    Node(int v, Node l, Node r) {
      value = v;
      left = l;
      right = r;
    }
  }

  /*@ spec_public @*/ private Node root;

  /** Inserts a value in to the tree. */
  //@ requires (\forall Node n; root != null; n != null && n.value != v);
  //@ ensures (\exists Node n; root != null; n != null && n.value == v);
  public void insert(int v) {

    if (root == null) {
      root = new Node(v, null, null);
      return;
    }

    Node curr = root;
    while (true) {
      if (curr.value < v) {
        if (curr.right != null) {
          curr = curr.right;
        } else {
          curr.right = new Node(v, null, null);
          break;
        }
      } else if (curr.value > v) {
        if (curr.left != null) {
          curr = curr.left;
        } else {
          curr.left = new Node(v, null, null);
          break;
        }
      } else {
        break;
      }
    }
  }

  /** Searches for a value in the tree. */
  //@ requires root != null;
  //@ ensures \result <==> (\exists Node n; root != null; n != null && n.value == v);
  public boolean search(int v) {
    Node curr = root;
    while (curr != null) { // N branches
      if (curr.value == v) { // N-1 branches
        return true;
      } else if (curr.value < v) { // N-1 branches
        curr = curr.right;
      } else {
        curr = curr.left;
      }
    }
    return false;
  }
}
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:15: verify: The prover cannot establish an assertion (NullField) in method BinaryTree
  /*@ spec_public @*/ private Node root;
                                   ^
1 verification failure

public class BinaryTree {
  /** Internal class representing a Node in the tree. */
  private class Node {
    /*@ spec_public @*/ int value;
    /*@ spec_public @*/ Node left;
    /*@ spec_public @*/ Node right;

    Node(int v, Node l, Node r) {
      value = v;
      left = l;
      right = r;
    }
  }

  /*@ spec_public @*/ private Node root = new Node(0, null, null);

  /** Inserts a value in to the tree. */
  //@ requires (\forall Node n; root != null; n != null && n.value != v);
  //@ ensures (\exists Node n; root != null; n != null && n.value == v);
  public void insert(int v) {

    if (root == null) {
      root = new Node(v, null, null);
      return;
    }

    Node curr = root;
    while (true) {
      if (curr.value < v) {
        if (curr.right != null) {
          curr = curr.right;
        } else {
          curr.right = new Node(v, null, null);
          break;
        }
      } else if (curr.value > v) {
        if (curr.left != null) {
          curr = curr.left;
        } else {
          curr.left = new Node(v, null, null);
          break;
        }
      } else {
        break;
      }
    }
  }

  /** Searches for a value in the tree. */
  //@ requires root != null;
  //@ ensures \result <==> (\exists Node n; root != null; n != null && n.value == v);
  public boolean search(int v) {
    Node curr = root;
    while (curr != null) { // N branches
      if (curr.value == v) { // N-1 branches
        return true;
      } else if (curr.value < v) { // N-1 branches
        curr = curr.right;
      } else {
        curr = curr.left;
      }
    }
    return false;
  }
}
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:15: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/BinaryTree.java:8:) in method BinaryTree: l in Node(int,BinaryTree.Node,BinaryTree.Node)
  /*@ spec_public @*/ private Node root = new Node(0, null, null);
                                                      ^
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/BinaryTree.java:15:
    Node(int v, Node l, Node r) {
                ^
2 verification failures

public class BinaryTree {
  /** Internal class representing a Node in the tree. */
  private class Node {
    /*@ spec_public @*/ int value;
    /*@ spec_public @*/ Node left;
    /*@ spec_public @*/ Node right;

    Node(int v, Node l, Node r) {
      value = v;
      left = l;
      right = r;
    }
  }

  /*@ spec_public @*/ private Node root;

  /** Constructs an empty binary tree. */
  public BinaryTree() {
    root = null;
  }

  /** Inserts a value into the tree. */
  //@ requires (\forall Node n; root != null; n != null && n.value != v);
  //@ ensures (\exists Node n; root != null; n != null && n.value == v);
  public void insert(int v) {
    if (root == null) {
      root = new Node(v, null, null);
      return;
    }

    Node curr = root;
    while (true) {
      if (curr.value < v) {
        if (curr.right != null) {
          curr = curr.right;
        } else {
          curr.right = new Node(v, null, null);
          break;
        }
      } else if (curr.value > v) {
        if (curr.left != null) {
          curr = curr.left;
        } else {
          curr.left = new Node(v, null, null);
          break;
        }
      } else {
        break;
      }
    }
  }

  /** Searches for a value in the tree. */
  //@ requires root != null;
  //@ ensures \result <==> (\exists Node n; root != null; n != null && n.value == v);
  public boolean search(int v) {
    Node curr = root;
    while (curr != null) {
      if (curr.value == v) {
        return true;
      } else if (curr.value < v) {
        curr = curr.right;
      } else {
        curr = curr.left;
      }
    }
    return false;
  }
}
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:19: verify: The prover cannot establish an assertion (PossiblyNullAssignment) in method BinaryTree
    root = null;
         ^
1 verification failure

public class BinaryTree {
  /** Internal class representing a Node in the tree. */
  private class Node {
    /*@ spec_public @*/ int value;
    /*@ spec_public @*/ Node left;
    /*@ spec_public @*/ Node right;

    Node(int v, Node l, Node r) {
      value = v;
      left = l;
      right = r;
    }
  }

  /*@ spec_public @*/ private Node root;

  /** Constructs an empty binary tree. */
  public BinaryTree() {
    root = null;
  }

  /** Inserts a value into the tree. */
  //@ requires (\forall Node n; root != null; n != null && n.value != v);
  //@ ensures (\exists Node n; root != null; n != null && n.value == v);
  public void insert(int v) {
    if (root == null) {
      root = new Node(v, null, null);
      return;
    }

    Node curr = root;
    while (true) {
      if (curr.value < v) {
        if (curr.right != null) {
          curr = curr.right;
        } else {
          curr.right = new Node(v, null, null);
          break;
        }
      } else if (curr.value > v) {
        if (curr.left != null) {
          curr = curr.left;
        } else {
          curr.left = new Node(v, null, null);
          break;
        }
      } else {
        break;
      }
    }
  }

  /** Searches for a value in the tree. */
  //@ requires root != null;
  //@ ensures \result <==> (\exists Node n; root != null; n != null && n.value == v);
  public boolean search(int v) {
    Node curr = root;
    while (curr != null) {
      if (curr.value == v) {
        return true;
      } else if (curr.value < v) {
        curr = curr.right;
      } else {
        curr = curr.left;
      }
    }
    return false;
  }
}
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:19: verify: The prover cannot establish an assertion (PossiblyNullAssignment) in method BinaryTree
    root = null;
         ^
1 verification failure

public class BinaryTree {
  /** Internal class representing a Node in the tree. */
  private class Node {
    /*@ spec_public @*/ int value;
    /*@ spec_public @*/ Node left;
    /*@ spec_public @*/ Node right;

    Node(int v, Node l, Node r) {
      value = v;
      left = l;
      right = r;
    }
  }

  /*@ spec_public @*/ private Node root;

  /** Constructs an empty binary tree. */
  public BinaryTree() {
    root = null;
  }

  /** Inserts a value into the tree. */
  //@ requires (\forall Node n; root != null; n != null && n.value != v);
  //@ ensures (\exists Node n; root != null; n != null && n.value == v);
  public void insert(int v) {
    if (root == null) {
      root = new Node(v, null, null);
      return;
    }

    Node curr = root;
    while (true) {
      if (curr.value < v) {
        if (curr.right != null) {
          curr = curr.right;
        } else {
          curr.right = new Node(v, null, null);
          break;
        }
      } else if (curr.value > v) {
        if (curr.left != null) {
          curr = curr.left;
        } else {
          curr.left = new Node(v, null, null);
          break;
        }
      } else {
        break;
      }
    }
  }

  /** Searches for a value in the tree. */
  //@ requires root != null;
  //@ ensures \result <==> (\exists Node n; root != null; n != null && n.value == v);
  public boolean search(int v) {
    Node curr = root;
    while (curr != null) {
      if (curr.value == v) {
        return true;
      } else if (curr.value < v) {
        curr = curr.right;
      } else {
        curr = curr.left;
      }
    }
    return false;
  }
}
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:19: verify: The prover cannot establish an assertion (PossiblyNullAssignment) in method BinaryTree
    root = null;
         ^
1 verification failure

public class BinaryTree {
  /** Internal class representing a Node in the tree. */
  private class Node {
    /*@ spec_public @*/ int value;
    /*@ spec_public @*/ Node left;
    /*@ spec_public @*/ Node right;

    Node(int v, Node l, Node r) {
      value = v;
      left = l;
      right = r;
    }
  }

  /*@ spec_public @*/ private Node root = null;

  /** Constructs an empty binary tree. */
  public BinaryTree() {
    root = null;
  }

  /** Inserts a value into the tree. */
  //@ requires (\forall Node n; root != null; n != null && n.value != v);
  //@ ensures (\exists Node n; root != null; n != null && n.value == v);
  public void insert(int v) {
    if (root == null) {
      root = new Node(v, null, null);
      return;
    }

    Node curr = root;
    while (true) {
      if (curr.value < v) {
        if (curr.right != null) {
          curr = curr.right;
        } else {
          curr.right = new Node(v, null, null);
          break;
        }
      } else if (curr.value > v) {
        if (curr.left != null) {
          curr = curr.left;
        } else {
          curr.left = new Node(v, null, null);
          break;
        }
      } else {
        break;
      }
    }
  }

  /** Searches for a value in the tree. */
  //@ requires root != null;
  //@ ensures \result <==> (\exists Node n; root != null; n != null && n.value == v);
  public boolean search(int v) {
    Node curr = root;
    while (curr != null) {
      if (curr.value == v) {
        return true;
      } else if (curr.value < v) {
        curr = curr.right;
      } else {
        curr = curr.left;
      }
    }
    return false;
  }
}
/home/max/Documents/JMLGPT/tmp/BinaryTree.java:19: verify: The prover cannot establish an assertion (PossiblyNullAssignment) in method BinaryTree
    root = null;
         ^
1 verification failure

