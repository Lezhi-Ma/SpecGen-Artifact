import java.util.Random;

class return2 {
    //@ ensures \result <==> v1 == v2;
    public static boolean f() {
        int v1 = new Random().nextInt();
        int v2 = new Random().nextInt();
        return v1 == v2;
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: cannot find symbol
    //@ ensures \result <==> v1 == v2;
                             ^
  symbol:   variable v1
  location: class return2
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: cannot find symbol
    //@ ensures \result <==> v1 == v2;
                                   ^
  symbol:   variable v2
  location: class return2
2 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> (\new Random().nextInt()) == (\new Random().nextInt());
    public static boolean f() {
        int v1 = new Random().nextInt();
        int v2 = new Random().nextInt();
        return v1 == v2;
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: This backslash token is unknown: \new
    //@ ensures \result <==> (\new Random().nextInt()) == (\new Random().nextInt());
                              ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: This backslash token is unknown: \new
    //@ ensures \result <==> (\new Random().nextInt()) == (\new Random().nextInt());
                                                           ^
2 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> (\fresh(new Random().nextInt())) == (\fresh(new Random().nextInt()));
    public static boolean f() {
        int v1 = new Random().nextInt();
        int v2 = new Random().nextInt();
        return v1 == v2;
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Object allocation is not permitted in specification expressions
    //@ ensures \result <==> (\fresh(new Random().nextInt())) == (\fresh(new Random().nextInt()));
                                     ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: The argument of \fresh must be of reference type
    //@ ensures \result <==> (\fresh(new Random().nextInt())) == (\fresh(new Random().nextInt()));
                                                         ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Object allocation is not permitted in specification expressions
    //@ ensures \result <==> (\fresh(new Random().nextInt())) == (\fresh(new Random().nextInt()));
                                                                         ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: The argument of \fresh must be of reference type
    //@ ensures \result <==> (\fresh(new Random().nextInt())) == (\fresh(new Random().nextInt()));
                                                                                             ^
4 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> (\fresh(Integer.valueOf(new Random().nextInt()))) == (\fresh(Integer.valueOf(new Random().nextInt())));
    public static boolean f() {
        int v1 = new Random().nextInt();
        int v2 = new Random().nextInt();
        return v1 == v2;
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Object allocation is not permitted in specification expressions
    //@ ensures \result <==> (\fresh(Integer.valueOf(new Random().nextInt()))) == (\fresh(Integer.valueOf(new Random().nextInt())));
                                                     ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Object allocation is not permitted in specification expressions
    //@ ensures \result <==> (\fresh(Integer.valueOf(new Random().nextInt()))) == (\fresh(Integer.valueOf(new Random().nextInt())));
                                                                                                          ^
2 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); i == new Random().nextInt());
    public static boolean f() {
        int v1 = new Random().nextInt();
        int v2 = new Random().nextInt();
        return v1 == v2;
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); i == new Random().nextInt());
                                                  ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); i == new Random().nextInt());
                                                                               ^
2 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); i == new Random().nextInt());
    public static boolean f() {
        int v1 = new Random().nextInt();
        int v2 = new Random().nextInt();
        return v1 == v2;
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); i == new Random().nextInt());
                                                  ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); i == new Random().nextInt());
                                                                               ^
2 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); i == new Random().nextInt());
    public static boolean f() {
        int v1 = new Random().nextInt();
        int v2 = new Random().nextInt();
        return v1 == v2;
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); i == new Random().nextInt());
                                                  ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); i == new Random().nextInt());
                                                                               ^
2 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); i == new Random().nextInt());
    public static boolean f() {
        int v1 = new Random().nextInt();
        int v2 = new Random().nextInt();
        return v1 == v2;
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); i == new Random().nextInt());
                                                  ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); i == new Random().nextInt());
                                                                               ^
2 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); i == new Random().nextInt());
    public static boolean f() {
        int v1 = new Random().nextInt();
        int v2 = new Random().nextInt();
        return v1 == v2;
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); i == new Random().nextInt());
                                                  ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); i == new Random().nextInt());
                                                                               ^
2 errors

import java.util.Random;

class return2 {
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); i == new Random().nextInt());
    public static boolean f() {
        int v1 = new Random().nextInt();
        int v2 = new Random().nextInt();
        return v1 == v2;
    }
}
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); i == new Random().nextInt());
                                                  ^
/home/max/Documents/JMLGPT/tmp/return2.java:4: error: Quantifier bodies may not contain constructors: Random()
    //@ ensures \result <==> (\exists int i; i == new Random().nextInt(); i == new Random().nextInt());
                                                                               ^
2 errors

