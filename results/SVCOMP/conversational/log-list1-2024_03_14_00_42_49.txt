class LinkedListEntry {
  public LinkedListEntry Next;
  public int Value;
}

class LinkedList {
  public LinkedListEntry Head;

  //@ ensures \result >= 0;
  public int size() {
    int count = 0;
    for (LinkedListEntry entry = Head; entry != null; entry = entry.Next) ++count;
    return count;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void add(int index, int e) {
    LinkedListEntry newEntry = new LinkedListEntry();
    newEntry.Value = e;
    if (index == 0) {
      Head = newEntry;
      return;
    }
    LinkedListEntry entry = Head;
    for (int i = 1; i < index; ++i) entry = entry.Next;
    entry.Next = newEntry;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void add(int e) {
    add(size(), e);
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index < size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void remove(int index) {
    LinkedListEntry entry = Head;
    for (int i = 1; i < index; ++i) entry = entry.Next;
    entry.Next = entry.Next.Next;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index < size();
  //@ ensures \result == Head.Value;
  //@ ensures \result == entry.Value;
  public int get(int index) {
    LinkedListEntry entry = Head;
    for (int i = 0; i < index; ++i) entry = entry.Next;
    return entry.Value;
  }
}

class Utils_nondet {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondet_int() {
    return Verifier.nondetInt();
  }
}

class Utils_synthesis {
  //@ ensures \result >= aggregated;
  public static int accumulator(int aggregated, int e) {
    if (e % 2 == 0) if (aggregated < e) return e;
    return aggregated;
  }

  //@ ensures \result == true;
  public static boolean predicate(int lhs) {
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/list1.java:31: error: cannot find symbol
  //@ requires index >= 0;
               ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:32: error: cannot find symbol
  //@ requires 0 <= index && index <= size();
                    ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:32: error: cannot find symbol
  //@ requires 0 <= index && index <= size();
                             ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:33: error: cannot find symbol
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
                                                                                                          ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:50: error: cannot find symbol
  //@ ensures \result == entry.Value;
                         ^
  symbol:   variable entry
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:61: error: cannot find symbol
    return Verifier.nondetInt();
           ^
  symbol:   variable Verifier
  location: class Utils_nondet
6 errors

class LinkedListEntry {
  public LinkedListEntry Next;
  public int Value;
}

class LinkedList {
  public LinkedListEntry Head;

  //@ ensures \result >= 0;
  public int size() {
    int count = 0;
    for (LinkedListEntry entry = Head; entry != null; entry = entry.Next) ++count;
    return count;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void add(int index, int e) {
    LinkedListEntry newEntry = new LinkedListEntry();
    newEntry.Value = e;
    if (index == 0) {
      Head = newEntry;
      return;
    }
    LinkedListEntry entry = Head;
    for (int i = 1; i < index; ++i) entry = entry.Next;
    entry.Next = newEntry;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void add(int e) {
    add(size(), e);
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index < size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void remove(int index) {
    LinkedListEntry entry = Head;
    for (int i = 1; i < index; ++i) entry = entry.Next;
    entry.Next = entry.Next.Next;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index < size();
  //@ ensures \result == Head.Value;
  //@ ensures \result == entry.Value;
  public int get(int index) {
    LinkedListEntry entry = Head;
    for (int i = 0; i < index; ++i) entry = entry.Next;
    return entry.Value;
  }
}

class Utils_nondet {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondet_int() {
    return 0; // placeholder for nondeterministic integer value
  }
}

class Utils_synthesis {
  //@ ensures \result >= aggregated;
  public static int accumulator(int aggregated, int e) {
    if (e % 2 == 0) if (aggregated < e) return e;
    return aggregated;
  }

  //@ ensures \result == true;
  public static boolean predicate(int lhs) {
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/list1.java:31: error: cannot find symbol
  //@ requires index >= 0;
               ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:32: error: cannot find symbol
  //@ requires 0 <= index && index <= size();
                    ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:32: error: cannot find symbol
  //@ requires 0 <= index && index <= size();
                             ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:33: error: cannot find symbol
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
                                                                                                          ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:50: error: cannot find symbol
  //@ ensures \result == entry.Value;
                         ^
  symbol:   variable entry
  location: class LinkedList
5 errors

class LinkedListEntry {
  public LinkedListEntry Next;
  public int Value;
}

class LinkedList {
  public LinkedListEntry Head;

  //@ ensures \result >= 0;
  public int size() {
    int count = 0;
    for (LinkedListEntry entry = Head; entry != null; entry = entry.Next) ++count;
    return count;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void add(int index, int e) {
    LinkedListEntry newEntry = new LinkedListEntry();
    newEntry.Value = e;
    if (index == 0) {
      Head = newEntry;
      return;
    }
    LinkedListEntry entry = Head;
    for (int i = 1; i < index; ++i) entry = entry.Next;
    entry.Next = newEntry;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void add(int e) {
    add(size(), e);
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index < size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void remove(int index) {
    LinkedListEntry entry = Head;
    for (int i = 1; i < index; ++i) entry = entry.Next;
    entry.Next = entry.Next.Next;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index < size();
  //@ ensures \result == Head.Value;
  //@ ensures \result == entry.Value;
  public int get(int index) {
    LinkedListEntry entry = Head;
    for (int i = 0; i < index; ++i) entry = entry.Next;
    return entry.Value;
  }
}

class Utils_nondet {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondet_int() {
    return 0; // placeholder for nondeterministic integer value
  }
}

class Utils_synthesis {
  //@ ensures \result >= aggregated;
  public static int accumulator(int aggregated, int e) {
    if (e % 2 == 0) if (aggregated < e) return e;
    return aggregated;
  }

  //@ ensures \result == true;
  public static boolean predicate(int lhs) {
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/list1.java:31: error: cannot find symbol
  //@ requires index >= 0;
               ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:32: error: cannot find symbol
  //@ requires 0 <= index && index <= size();
                    ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:32: error: cannot find symbol
  //@ requires 0 <= index && index <= size();
                             ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:33: error: cannot find symbol
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
                                                                                                          ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:50: error: cannot find symbol
  //@ ensures \result == entry.Value;
                         ^
  symbol:   variable entry
  location: class LinkedList
5 errors

class LinkedListEntry {
  public LinkedListEntry Next;
  public int Value;
}

class LinkedList {
  public LinkedListEntry Head;

  //@ ensures \result >= 0;
  public int size() {
    int count = 0;
    for (LinkedListEntry entry = Head; entry != null; entry = entry.Next) ++count;
    return count;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void add(int index, int e) {
    LinkedListEntry newEntry = new LinkedListEntry();
    newEntry.Value = e;
    if (index == 0) {
      newEntry.Next = Head;
      Head = newEntry;
      return;
    }
    LinkedListEntry entry = Head;
    for (int i = 1; i < index; ++i) entry = entry.Next;
    newEntry.Next = entry.Next;
    entry.Next = newEntry;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void add(int e) {
    add(size(), e);
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index < size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void remove(int index) {
    if (index == 0) {
      Head = Head.Next;
      return;
    }
    LinkedListEntry entry = Head;
    for (int i = 1; i < index; ++i) entry = entry.Next;
    entry.Next = entry.Next.Next;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index < size();
  //@ ensures \result == get(index);
  public int get(int index) {
    LinkedListEntry entry = Head;
    for (int i = 0; i < index; ++i) entry = entry.Next;
    return entry.Value;
  }
}

class Utils_nondet {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondet_int() {
    return 0; // placeholder for nondeterministic integer value
  }
}

class Utils_synthesis {
  //@ ensures \result >= aggregated;
  public static int accumulator(int aggregated, int e) {
    if (e % 2 == 0) if (aggregated < e) return e;
    return aggregated;
  }

  //@ ensures \result == true;
  public static boolean predicate(int lhs) {
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/list1.java:33: error: cannot find symbol
  //@ requires index >= 0;
               ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:34: error: cannot find symbol
  //@ requires 0 <= index && index <= size();
                    ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:34: error: cannot find symbol
  //@ requires 0 <= index && index <= size();
                             ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:35: error: cannot find symbol
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
                                                                                                          ^
  symbol:   variable index
  location: class LinkedList
4 errors

class LinkedListEntry {
  public LinkedListEntry Next;
  public int Value;
}

class LinkedList {
  public LinkedListEntry Head;

  //@ ensures \result >= 0;
  public int size() {
    int count = 0;
    for (LinkedListEntry entry = Head; entry != null; entry = entry.Next) ++count;
    return count;
  }

  //@ requires idx >= 0;
  //@ requires 0 <= idx && idx <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == idx));
  public void add(int idx, int e) {
    LinkedListEntry newEntry = new LinkedListEntry();
    newEntry.Value = e;
    if (idx == 0) {
      newEntry.Next = Head;
      Head = newEntry;
      return;
    }
    LinkedListEntry entry = Head;
    for (int i = 1; i < idx; ++i) entry = entry.Next;
    newEntry.Next = entry.Next;
    entry.Next = newEntry;
  }

  //@ requires idx >= 0;
  //@ requires 0 <= idx && idx <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == idx));
  public void add(int e) {
    add(size(), e);
  }

  //@ requires idx >= 0;
  //@ requires 0 <= idx && idx < size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == idx));
  public void remove(int idx) {
    if (idx == 0) {
      Head = Head.Next;
      return;
    }
    LinkedListEntry entry = Head;
    for (int i = 1; i < idx; ++i) entry = entry.Next;
    entry.Next = entry.Next.Next;
  }

  //@ requires idx >= 0;
  //@ requires 0 <= idx && idx < size();
  //@ ensures \result == get(idx);
  public int get(int idx) {
    LinkedListEntry entry = Head;
    for (int i = 0; i < idx; ++i) entry = entry.Next;
    return entry.Value;
  }
}

class Utils_nondet {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondet_int() {
    return 0; // placeholder for nondeterministic integer value
  }
}

class Utils_synthesis {
  //@ ensures \result >= aggregated;
  public static int accumulator(int aggregated, int e) {
    if (e % 2 == 0) if (aggregated < e) return e;
    return aggregated;
  }

  //@ ensures \result == true;
  public static boolean predicate(int lhs) {
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/list1.java:33: error: cannot find symbol
  //@ requires idx >= 0;
               ^
  symbol:   variable idx
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:34: error: cannot find symbol
  //@ requires 0 <= idx && idx <= size();
                    ^
  symbol:   variable idx
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:34: error: cannot find symbol
  //@ requires 0 <= idx && idx <= size();
                           ^
  symbol:   variable idx
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:35: error: cannot find symbol
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == idx));
                                                                                                          ^
  symbol:   variable idx
  location: class LinkedList
4 errors

class LinkedListEntry {
  public LinkedListEntry Next;
  public int Value;
}

class LinkedList {
  public LinkedListEntry Head;

  //@ ensures \result >= 0;
  public int size() {
    int count = 0;
    for (LinkedListEntry entry = Head; entry != null; entry = entry.Next) ++count;
    return count;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void add(int index, int e) {
    LinkedListEntry newEntry = new LinkedListEntry();
    newEntry.Value = e;
    if (index == 0) {
      newEntry.Next = Head;
      Head = newEntry;
      return;
    }
    LinkedListEntry entry = Head;
    for (int i = 1; i < index; ++i) entry = entry.Next;
    newEntry.Next = entry.Next;
    entry.Next = newEntry;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void add(int e) {
    add(size(), e);
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index < size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void remove(int index) {
    if (index == 0) {
      Head = Head.Next;
      return;
    }
    LinkedListEntry entry = Head;
    for (int i = 1; i < index; ++i) entry = entry.Next;
    entry.Next = entry.Next.Next;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index < size();
  //@ ensures \result == get(index);
  public int get(int index) {
    LinkedListEntry entry = Head;
    for (int i = 0; i < index; ++i) entry = entry.Next;
    return entry.Value;
  }
}

class Utils_nondet {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondet_int() {
    return 0; // placeholder for nondeterministic integer value
  }
}

class Utils_synthesis {
  //@ ensures \result >= aggregated;
  public static int accumulator(int aggregated, int e) {
    if (e % 2 == 0) if (aggregated < e) return e;
    return aggregated;
  }

  //@ ensures \result == true;
  public static boolean predicate(int lhs) {
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/list1.java:33: error: cannot find symbol
  //@ requires index >= 0;
               ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:34: error: cannot find symbol
  //@ requires 0 <= index && index <= size();
                    ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:34: error: cannot find symbol
  //@ requires 0 <= index && index <= size();
                             ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:35: error: cannot find symbol
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
                                                                                                          ^
  symbol:   variable index
  location: class LinkedList
4 errors

class LinkedListEntry {
  public LinkedListEntry Next;
  public int Value;
}

class LinkedList {
  public LinkedListEntry Head;

  //@ ensures \result >= 0;
  public int size() {
    int count = 0;
    for (LinkedListEntry entry = Head; entry != null; entry = entry.Next) ++count;
    return count;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void add(int index, int e) {
    LinkedListEntry newEntry = new LinkedListEntry();
    newEntry.Value = e;
    if (index == 0) {
      newEntry.Next = Head;
      Head = newEntry;
      return;
    }
    LinkedListEntry entry = Head;
    for (int i = 1; i < index; ++i) entry = entry.Next;
    newEntry.Next = entry.Next;
    entry.Next = newEntry;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void add(int e) {
    add(size(), e);
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index < size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void remove(int index) {
    if (index == 0) {
      Head = Head.Next;
      return;
    }
    LinkedListEntry entry = Head;
    for (int i = 1; i < index; ++i) entry = entry.Next;
    entry.Next = entry.Next.Next;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index < size();
  //@ ensures \result == get(index);
  public int get(int index) {
    LinkedListEntry entry = Head;
    for (int i = 0; i < index; ++i) entry = entry.Next;
    return entry.Value;
  }
}

class Utils_nondet {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondet_int() {
    return 0; // placeholder for nondeterministic integer value
  }
}

class Utils_synthesis {
  //@ ensures \result >= aggregated;
  public static int accumulator(int aggregated, int e) {
    if (e % 2 == 0) if (aggregated < e) return e;
    return aggregated;
  }

  //@ ensures \result == true;
  public static boolean predicate(int lhs) {
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/list1.java:33: error: cannot find symbol
  //@ requires index >= 0;
               ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:34: error: cannot find symbol
  //@ requires 0 <= index && index <= size();
                    ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:34: error: cannot find symbol
  //@ requires 0 <= index && index <= size();
                             ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:35: error: cannot find symbol
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
                                                                                                          ^
  symbol:   variable index
  location: class LinkedList
4 errors

class LinkedListEntry {
  public LinkedListEntry Next;
  public int Value;
}

class LinkedList {
  public LinkedListEntry Head;

  //@ ensures \result >= 0;
  public int size() {
    int count = 0;
    for (LinkedListEntry entry = Head; entry != null; entry = entry.Next) ++count;
    return count;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void add(int index, int e) {
    LinkedListEntry newEntry = new LinkedListEntry();
    newEntry.Value = e;
    if (index == 0) {
      newEntry.Next = Head;
      Head = newEntry;
      return;
    }
    LinkedListEntry entry = Head;
    for (int i = 1; i < index; ++i) entry = entry.Next;
    newEntry.Next = entry.Next;
    entry.Next = newEntry;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void add(int e) {
    add(size(), e);
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index < size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
  public void remove(int index) {
    if (index == 0) {
      Head = Head.Next;
      return;
    }
    LinkedListEntry entry = Head;
    for (int i = 1; i < index; ++i) entry = entry.Next;
    entry.Next = entry.Next.Next;
  }

  //@ requires index >= 0;
  //@ requires 0 <= index && index < size();
  //@ ensures \result == get(index);
  public int get(int index) {
    LinkedListEntry entry = Head;
    for (int i = 0; i < index; ++i) entry = entry.Next;
    return entry.Value;
  }
}

class Utils_nondet {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondet_int() {
    return 0; // placeholder for nondeterministic integer value
  }
}

class Utils_synthesis {
  //@ ensures \result >= aggregated;
  public static int accumulator(int aggregated, int e) {
    if (e % 2 == 0) if (aggregated < e) return e;
    return aggregated;
  }

  //@ ensures \result == true;
  public static boolean predicate(int lhs) {
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/list1.java:33: error: cannot find symbol
  //@ requires index >= 0;
               ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:34: error: cannot find symbol
  //@ requires 0 <= index && index <= size();
                    ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:34: error: cannot find symbol
  //@ requires 0 <= index && index <= size();
                             ^
  symbol:   variable index
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:35: error: cannot find symbol
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == index));
                                                                                                          ^
  symbol:   variable index
  location: class LinkedList
4 errors

class LinkedListEntry {
  public LinkedListEntry Next;
  public int Value;
}

class LinkedList {
  public LinkedListEntry Head;

  //@ ensures \result >= 0;
  public int size() {
    int count = 0;
    for (LinkedListEntry entry = Head; entry != null; entry = entry.Next) ++count;
    return count;
  }

  //@ requires idx >= 0;
  //@ requires 0 <= idx && idx <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == idx));
  public void add(int idx, int e) {
    LinkedListEntry newEntry = new LinkedListEntry();
    newEntry.Value = e;
    if (idx == 0) {
      newEntry.Next = Head;
      Head = newEntry;
      return;
    }
    LinkedListEntry entry = Head;
    for (int i = 1; i < idx; ++i) entry = entry.Next;
    newEntry.Next = entry.Next;
    entry.Next = newEntry;
  }

  //@ requires idx >= 0;
  //@ requires 0 <= idx && idx <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == idx));
  public void add(int e) {
    add(size(), e);
  }

  //@ requires idx >= 0;
  //@ requires 0 <= idx && idx < size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == idx));
  public void remove(int idx) {
    if (idx == 0) {
      Head = Head.Next;
      return;
    }
    LinkedListEntry entry = Head;
    for (int i = 1; i < idx; ++i) entry = entry.Next;
    entry.Next = entry.Next.Next;
  }

  //@ requires idx >= 0;
  //@ requires 0 <= idx && idx < size();
  //@ ensures \result == get(idx);
  public int get(int idx) {
    LinkedListEntry entry = Head;
    for (int i = 0; i < idx; ++i) entry = entry.Next;
    return entry.Value;
  }
}

class Utils_nondet {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondet_int() {
    return 0; // placeholder for nondeterministic integer value
  }
}

class Utils_synthesis {
  //@ ensures \result >= aggregated;
  public static int accumulator(int aggregated, int e) {
    if (e % 2 == 0) if (aggregated < e) return e;
    return aggregated;
  }

  //@ ensures \result == true;
  public static boolean predicate(int lhs) {
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/list1.java:33: error: cannot find symbol
  //@ requires idx >= 0;
               ^
  symbol:   variable idx
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:34: error: cannot find symbol
  //@ requires 0 <= idx && idx <= size();
                    ^
  symbol:   variable idx
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:34: error: cannot find symbol
  //@ requires 0 <= idx && idx <= size();
                           ^
  symbol:   variable idx
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:35: error: cannot find symbol
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == idx));
                                                                                                          ^
  symbol:   variable idx
  location: class LinkedList
4 errors

class LinkedListEntry {
  public LinkedListEntry Next;
  public int Value;
}

class LinkedList {
  public LinkedListEntry Head;

  //@ ensures \result >= 0;
  public int size() {
    int count = 0;
    for (LinkedListEntry entry = Head; entry != null; entry = entry.Next) ++count;
    return count;
  }

  //@ requires idx >= 0;
  //@ requires 0 <= idx && idx <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == idx));
  public void add(int idx, int e) {
    LinkedListEntry newEntry = new LinkedListEntry();
    newEntry.Value = e;
    if (idx == 0) {
      newEntry.Next = Head;
      Head = newEntry;
      return;
    }
    LinkedListEntry entry = Head;
    for (int i = 1; i < idx; ++i) entry = entry.Next;
    newEntry.Next = entry.Next;
    entry.Next = newEntry;
  }

  //@ requires idx >= 0;
  //@ requires 0 <= idx && idx <= size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == idx));
  public void add(int e) {
    add(size(), e);
  }

  //@ requires idx >= 0;
  //@ requires 0 <= idx && idx < size();
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == idx));
  public void remove(int idx) {
    if (idx == 0) {
      Head = Head.Next;
      return;
    }
    LinkedListEntry entry = Head;
    for (int i = 1; i < idx; ++i) entry = entry.Next;
    entry.Next = entry.Next.Next;
  }

  //@ requires idx >= 0;
  //@ requires 0 <= idx && idx < size();
  //@ ensures \result == get(idx);
  public int get(int idx) {
    LinkedListEntry entry = Head;
    for (int i = 0; i < idx; ++i) entry = entry.Next;
    return entry.Value;
  }
}

class Utils_nondet {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondet_int() {
    return 0; // placeholder for nondeterministic integer value
  }
}

class Utils_synthesis {
  //@ ensures \result >= aggregated;
  public static int accumulator(int aggregated, int e) {
    if (e % 2 == 0) if (aggregated < e) return e;
    return aggregated;
  }

  //@ ensures \result == true;
  public static boolean predicate(int lhs) {
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/list1.java:33: error: cannot find symbol
  //@ requires idx >= 0;
               ^
  symbol:   variable idx
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:34: error: cannot find symbol
  //@ requires 0 <= idx && idx <= size();
                    ^
  symbol:   variable idx
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:34: error: cannot find symbol
  //@ requires 0 <= idx && idx <= size();
                           ^
  symbol:   variable idx
  location: class LinkedList
/home/max/Documents/JMLGPT/tmp/list1.java:35: error: cannot find symbol
  //@ ensures (\forall int i; 0 <= i && i < size(); (\exists LinkedListEntry entry; entry == Head && i == idx));
                                                                                                          ^
  symbol:   variable idx
  location: class LinkedList
4 errors

