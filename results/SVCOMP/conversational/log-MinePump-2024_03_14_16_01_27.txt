public class MinePump {

    boolean pumpRunning = false;

    boolean systemActive = true;

    Environment env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Environment env) {
        super();
        this.env = env;
    }

    //@ ensures pumpRunning ==> \old(env.getWaterLevel()) > env.getWaterLevel();
    //@ ensures systemActive ==> processEnvironment();
    public void timeShift() {
        if (pumpRunning) env.lowerWaterLevel();
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures !pumpRunning;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == env.isMethaneLevelCritical();
    public boolean isMethaneAlarm() {
        return env.isMethaneLevelCritical();
    }

    //@ ensures \result.equals("Pump(System:" + (systemActive ? "On" : "Off") + ",Pump:" + (pumpRunning ? "On" : "Off") + ") " + env.toString());
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result == systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }

    //@ ensures \result == env;
    public Environment getEnv() {
        return env;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:7: error: cannot find symbol
    Environment env;
    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:11: error: cannot find symbol
    public MinePump(Environment env) {
                    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:81: error: cannot find symbol
    public Environment getEnv() {
           ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:10: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures this.env == env;
                    ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures pumpRunning ==> \old(env.getWaterLevel()) > env.getWaterLevel();
                ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures pumpRunning ==> \old(env.getWaterLevel()) > env.getWaterLevel();
                                     ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures pumpRunning ==> \old(env.getWaterLevel()) > env.getWaterLevel();
                                                            ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:17: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures systemActive ==> processEnvironment();
                ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:17: error: incompatible types: void cannot be converted to boolean
    //@ ensures systemActive ==> processEnvironment();
                                                   ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
                ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:25: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
                                                     ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:34: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures pumpRunning;
                ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:39: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures !pumpRunning;
                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:44: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == env.isMethaneLevelCritical();
                           ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:49: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result.equals("Pump(System:" + (systemActive ? "On" : "Off") + ",Pump:" + (pumpRunning ? "On" : "Off") + ") " + env.toString());
                                                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:49: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result.equals("Pump(System:" + (systemActive ? "On" : "Off") + ",Pump:" + (pumpRunning ? "On" : "Off") + ") " + env.toString());
                                                                                            ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:49: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result.equals("Pump(System:" + (systemActive ? "On" : "Off") + ",Pump:" + (pumpRunning ? "On" : "Off") + ") " + env.toString());
                                                                                                                                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:60: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures !pumpRunning;
                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:69: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures !pumpRunning;
                 ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:75: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == systemActive;
                           ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:80: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == env;
                           ^
21 errors

public class MinePump {
    spec_public boolean pumpRunning = false;

    spec_public boolean systemActive = true;

    spec_public Environment env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Environment env) {
        super();
        this.env = env;
    }

    //@ ensures pumpRunning ==> \old(env.getWaterLevel()) > env.getWaterLevel();
    //@ ensures systemActive ==> processEnvironment();
    public void timeShift() {
        if (pumpRunning) env.lowerWaterLevel();
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures !pumpRunning;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == env.isMethaneLevelCritical();
    public boolean isMethaneAlarm() {
        return env.isMethaneLevelCritical();
    }

    //@ ensures \result.equals("Pump(System:" + (systemActive ? "On" : "Off") + ",Pump:" + (pumpRunning ? "On" : "Off") + ") " + env.toString());
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result == systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }

    //@ ensures \result == env;
    public Environment getEnv() {
        return env;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:2: error: <identifier> expected
    spec_public boolean pumpRunning = false;
               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:4: error: <identifier> expected
    spec_public boolean systemActive = true;
               ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:6: error: ';' expected
    spec_public Environment env;
                           ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:6: error: <identifier> expected
    spec_public Environment env;
                               ^
4 errors

public class MinePump {
    public boolean pumpRunning = false;

    public boolean systemActive = true;

    public Environment env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Environment env) {
        super();
        this.env = env;
    }

    //@ ensures pumpRunning ==> \old(env.getWaterLevel()) > env.getWaterLevel();
    //@ ensures systemActive ==> processEnvironment();
    public void timeShift() {
        if (pumpRunning) env.lowerWaterLevel();
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures !pumpRunning;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == env.isMethaneLevelCritical();
    public boolean isMethaneAlarm() {
        return env.isMethaneLevelCritical();
    }

    //@ ensures \result.equals("Pump(System:" + (systemActive ? "On" : "Off") + ",Pump:" + (pumpRunning ? "On" : "Off") + ") " + env.toString());
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result == systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }

    //@ ensures \result == env;
    public Environment getEnv() {
        return env;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:6: error: cannot find symbol
    public Environment env;
           ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:10: error: cannot find symbol
    public MinePump(Environment env) {
                    ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:80: error: cannot find symbol
    public Environment getEnv() {
           ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: incompatible types: void cannot be converted to boolean
    //@ ensures systemActive ==> processEnvironment();
                                                   ^
4 errors

public class MinePump {
    public boolean pumpRunning = false;

    public boolean systemActive = true;

    public Object env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Object env) {
        super();
        this.env = env;
    }

    //@ ensures pumpRunning ==> \old(((Environment)env).getWaterLevel()) > ((Environment)env).getWaterLevel();
    //@ ensures systemActive ==> processEnvironment();
    public void timeShift() {
        if (pumpRunning) ((Environment)env).lowerWaterLevel();
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures !pumpRunning;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == ((Environment)env).isMethaneLevelCritical();
    public boolean isMethaneAlarm() {
        return ((Environment)env).isMethaneLevelCritical();
    }

    //@ ensures \result.equals("Pump(System:" + (systemActive ? "On" : "Off") + ",Pump:" + (pumpRunning ? "On" : "Off") + ") " + env.toString());
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result == systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }

    //@ ensures \result == env;
    public Object getEnv() {
        return env;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:15: error: cannot find symbol
    //@ ensures pumpRunning ==> \old(((Environment)env).getWaterLevel()) > ((Environment)env).getWaterLevel();
                                       ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:15: error: cannot find symbol
    //@ ensures pumpRunning ==> \old(((Environment)env).getWaterLevel()) > ((Environment)env).getWaterLevel();
                                                                             ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: incompatible types: void cannot be converted to boolean
    //@ ensures systemActive ==> processEnvironment();
                                                   ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:18: error: cannot find symbol
        if (pumpRunning) ((Environment)env).lowerWaterLevel();
                           ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:43: error: cannot find symbol
    //@ ensures \result == ((Environment)env).isMethaneLevelCritical();
                             ^
  symbol:   class Environment
  location: class MinePump
/home/max/Documents/JMLGPT/tmp/MinePump.java:45: error: cannot find symbol
        return ((Environment)env).isMethaneLevelCritical();
                 ^
  symbol:   class Environment
  location: class MinePump
6 errors

public class MinePump {
    public boolean pumpRunning = false;

    public boolean systemActive = true;

    public Object env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Object env) {
        super();
        this.env = env;
    }

    //@ ensures pumpRunning ==> \old(((Object)env).getWaterLevel()) > ((Object)env).getWaterLevel();
    //@ ensures systemActive ==> processEnvironment();
    public void timeShift() {
        if (pumpRunning) ((Object)env).lowerWaterLevel();
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures !pumpRunning;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == ((Object)env).isMethaneLevelCritical();
    public boolean isMethaneAlarm() {
        return ((Object)env).isMethaneLevelCritical();
    }

    //@ ensures \result.equals("Pump(System:" + (systemActive ? "On" : "Off") + ",Pump:" + (pumpRunning ? "On" : "Off") + ") " + env.toString());
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result == systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }

    //@ ensures \result == env;
    public Object getEnv() {
        return env;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:15: error: cannot find symbol
    //@ ensures pumpRunning ==> \old(((Object)env).getWaterLevel()) > ((Object)env).getWaterLevel();
                                                  ^
  symbol:   method getWaterLevel()
  location: class Object
/home/max/Documents/JMLGPT/tmp/MinePump.java:15: error: cannot find symbol
    //@ ensures pumpRunning ==> \old(((Object)env).getWaterLevel()) > ((Object)env).getWaterLevel();
                                                                                   ^
  symbol:   method getWaterLevel()
  location: class Object
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: incompatible types: void cannot be converted to boolean
    //@ ensures systemActive ==> processEnvironment();
                                                   ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:18: error: cannot find symbol
        if (pumpRunning) ((Object)env).lowerWaterLevel();
                                      ^
  symbol:   method lowerWaterLevel()
  location: class Object
/home/max/Documents/JMLGPT/tmp/MinePump.java:43: error: cannot find symbol
    //@ ensures \result == ((Object)env).isMethaneLevelCritical();
                                        ^
  symbol:   method isMethaneLevelCritical()
  location: class Object
/home/max/Documents/JMLGPT/tmp/MinePump.java:45: error: cannot find symbol
        return ((Object)env).isMethaneLevelCritical();
                            ^
  symbol:   method isMethaneLevelCritical()
  location: class Object
6 errors

public class MinePump {
    public boolean pumpRunning = false;

    public boolean systemActive = true;

    public Object env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Object env) {
        super();
        this.env = env;
    }

    //@ ensures pumpRunning ==> true;
    //@ ensures systemActive ==> processEnvironment();
    public void timeShift() {
        if (pumpRunning) {
            // Implement logic here
        }
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures !pumpRunning;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == isMethaneAlarm();
    public boolean isMethaneAlarm() {
        // Implement logic here
        return false;
    }

    //@ ensures \result.equals("Pump(System:" + (systemActive ? "On" : "Off") + ",Pump:" + (pumpRunning ? "On" : "Off") + ") " + env.toString());
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result == systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }

    //@ ensures \result == env;
    public Object getEnv() {
        return env;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: incompatible types: void cannot be converted to boolean
    //@ ensures systemActive ==> processEnvironment();
                                                   ^
1 error

public class MinePump {
    public boolean pumpRunning = false;

    public boolean systemActive = true;

    public Object env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Object env) {
        super();
        this.env = env;
    }

    //@ ensures pumpRunning ==> true;
    //@ ensures systemActive ==> processEnvironment();
    public void timeShift() {
        if (pumpRunning) {
            // Implement logic here
        }
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures !pumpRunning;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == isMethaneAlarm();
    public boolean isMethaneAlarm() {
        // Implement logic here
        return false;
    }

    //@ ensures \result.equals("Pump(System:" + (systemActive ? "On" : "Off") + ",Pump:" + (pumpRunning ? "On" : "Off") + ") " + env.toString());
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result == systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }

    //@ ensures \result == env;
    public Object getEnv() {
        return env;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: incompatible types: void cannot be converted to boolean
    //@ ensures systemActive ==> processEnvironment();
                                                   ^
1 error

public class MinePump {
    public boolean pumpRunning = false;

    public boolean systemActive = true;

    public Object env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Object env) {
        super();
        this.env = env;
    }

    //@ ensures pumpRunning ==> true;
    //@ ensures systemActive ==> \result == processEnvironment();
    public boolean timeShift() {
        if (pumpRunning) {
            // Implement logic here
        }
        return systemActive && processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures !pumpRunning;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == isMethaneAlarm();
    public boolean isMethaneAlarm() {
        // Implement logic here
        return false;
    }

    //@ ensures \result.equals("Pump(System:" + (systemActive ? "On" : "Off") + ",Pump:" + (pumpRunning ? "On" : "Off") + ") " + env.toString());
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures \result == systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }

    //@ ensures \result == env;
    public Object getEnv() {
        return env;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: 'void' type not allowed here
    //@ ensures systemActive ==> \result == processEnvironment();
                                                              ^
/home/max/Documents/JMLGPT/tmp/MinePump.java:21: error: 'void' type not allowed here
        return systemActive && processEnvironment();
                                                 ^
2 errors

public class MinePump {
    public boolean pumpRunning = false;

    public boolean systemActive = true;

    public Object env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Object env) {
        super();
        this.env = env;
    }

    //@ ensures pumpRunning ==> true;
    //@ ensures systemActive ==> processEnvironment();
    public void timeShift() {
        if (pumpRunning) {
            // Implement logic here
        }
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures !pumpRunning;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == isMethaneAlarm();
    public boolean isMethaneAlarm() {
        // Implement logic here
        return false;
    }

    //@ ensures \result.equals("Pump(System:" + (systemActive ? "On" : "Off") + ",Pump:" + (pumpRunning ? "On" : "Off") + ") " + env.toString());
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }

    //@ ensures \result == env;
    public Object getEnv() {
        return env;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:16: error: incompatible types: void cannot be converted to boolean
    //@ ensures systemActive ==> processEnvironment();
                                                   ^
1 error

public class MinePump {
    public boolean pumpRunning = false;

    public boolean systemActive = true;

    public Object env;

    //@ requires env != null;
    //@ ensures this.env == env;
    public MinePump(Object env) {
        super();
        this.env = env;
    }

    //@ ensures pumpRunning ==> true;
    //@ ensures systemActive ==> true;
    public void timeShift() {
        if (pumpRunning) {
            // Implement logic here
        }
        if (systemActive) processEnvironment();
    }

    private void processEnvironment__wrappee__base() {}

    //@ ensures pumpRunning && isMethaneAlarm() ==> !pumpRunning;
    public void processEnvironment() {
        if (pumpRunning && isMethaneAlarm()) {
            deactivatePump();
        } else {
            processEnvironment__wrappee__base();
        }
    }

    //@ ensures pumpRunning;
    public void activatePump() {
        pumpRunning = true;
    }

    //@ ensures !pumpRunning;
    public void deactivatePump() {
        pumpRunning = false;
    }

    //@ ensures \result == isMethaneAlarm();
    public boolean isMethaneAlarm() {
        // Implement logic here
        return false;
    }

    //@ ensures \result.equals("Pump(System:" + (systemActive ? "On" : "Off") + ",Pump:" + (pumpRunning ? "On" : "Off") + ") " + env.toString());
    @Override
    public String toString() {
        return "Pump(System:"
                + (systemActive ? "On" : "Off")
                + ",Pump:"
                + (pumpRunning ? "On" : "Off")
                + ") "
                + env.toString();
    }

    //@ ensures !pumpRunning;
    public void stopSystem() {
        if (pumpRunning) {
            deactivatePump();
        }
        assert !pumpRunning;
        systemActive = false;
    }

    //@ ensures !pumpRunning;
    public void startSystem() {
        assert !pumpRunning;
        systemActive = true;
    }

    //@ ensures systemActive;
    public boolean isSystemActive() {
        return systemActive;
    }

    //@ ensures \result == env;
    public Object getEnv() {
        return env;
    }
}
/home/max/Documents/JMLGPT/tmp/MinePump.java:45: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
    //@ ensures \result == isMethaneAlarm();
                                         ^
  Reason: No logical function for method isMethaneAlarm() isMethaneAlarm()
error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
  Reason: Unexpected exception: APPLY-HELPER java.lang.NullPointerException: Cannot read field "type" because "rhs" is null
java.lang.NullPointerException: Cannot read field "type" because "rhs" is null
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitBinary(JmlAssertionAdder.java:13632)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBinary.accept(JCTree.java:2111)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertJML(JmlAssertionAdder.java:1648)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.applyHelper(JmlAssertionAdder.java:10710)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitApply(JmlAssertionAdder.java:8031)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1752)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitConditional(JmlAssertionAdder.java:6925)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitBinary(JmlAssertionAdder.java:13533)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBinary.accept(JCTree.java:2111)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlBinary(JmlAssertionAdder.java:15527)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlBinary.accept(JmlTree.java:1647)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertJML(JmlAssertionAdder.java:1648)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.applyHelper(JmlAssertionAdder.java:10710)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitApply(JmlAssertionAdder.java:8031)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1752)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitExec(JmlAssertionAdder.java:7086)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCExpressionStatement.accept(JCTree.java:1539)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertIntoBlock(JmlAssertionAdder.java:1808)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitIf(JmlAssertionAdder.java:6977)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCIf.accept(JCTree.java:1508)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1441)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertMethodBodyNoInit(JmlAssertionAdder.java:1235)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlMethodDecl(JmlAssertionAdder.java:17247)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1383)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlClassDecl(JmlAssertionAdder.java:15904)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1295)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1441)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:112)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:536)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:362)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:936)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.compile(JmlCompiler.java:197)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:321)
	at jdk.compiler/org.jmlspecs.openjml.Main.compile(Main.java:534)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:374)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:332)
	at jdk.compiler/org.jmlspecs.openjml.Main.main(Main.java:295)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:53)
java.lang.NullPointerException: Cannot read field "type" because "rhs" is null
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitBinary(JmlAssertionAdder.java:13632)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBinary.accept(JCTree.java:2111)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertJML(JmlAssertionAdder.java:1648)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.applyHelper(JmlAssertionAdder.java:10710)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitApply(JmlAssertionAdder.java:8031)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1752)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitConditional(JmlAssertionAdder.java:6925)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitBinary(JmlAssertionAdder.java:13533)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBinary.accept(JCTree.java:2111)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlBinary(JmlAssertionAdder.java:15527)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlBinary.accept(JmlTree.java:1647)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertJML(JmlAssertionAdder.java:1648)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.applyHelper(JmlAssertionAdder.java:10710)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitApply(JmlAssertionAdder.java:8031)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1752)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitExec(JmlAssertionAdder.java:7086)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCExpressionStatement.accept(JCTree.java:1539)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertIntoBlock(JmlAssertionAdder.java:1808)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitIf(JmlAssertionAdder.java:6977)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCIf.accept(JCTree.java:1508)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1441)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertMethodBodyNoInit(JmlAssertionAdder.java:1235)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlMethodDecl(JmlAssertionAdder.java:17247)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1383)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlClassDecl(JmlAssertionAdder.java:15904)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1295)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1441)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:112)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:536)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:362)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:936)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.compile(JmlCompiler.java:197)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:321)
	at jdk.compiler/org.jmlspecs.openjml.Main.compile(Main.java:534)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:374)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:332)
	at jdk.compiler/org.jmlspecs.openjml.Main.main(Main.java:295)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:53)
java.lang.RuntimeException: MISMATCHED BLOCKS
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.popBlock(JmlAssertionAdder.java:1854)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.popBlock(JmlAssertionAdder.java:1838)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitConditional(JmlAssertionAdder.java:6930)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitBinary(JmlAssertionAdder.java:13533)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBinary.accept(JCTree.java:2111)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlBinary(JmlAssertionAdder.java:15527)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlBinary.accept(JmlTree.java:1647)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertJML(JmlAssertionAdder.java:1648)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.applyHelper(JmlAssertionAdder.java:10710)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitApply(JmlAssertionAdder.java:8031)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1752)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitExec(JmlAssertionAdder.java:7086)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCExpressionStatement.accept(JCTree.java:1539)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertIntoBlock(JmlAssertionAdder.java:1808)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitIf(JmlAssertionAdder.java:6977)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCIf.accept(JCTree.java:1508)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1441)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertMethodBodyNoInit(JmlAssertionAdder.java:1235)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlMethodDecl(JmlAssertionAdder.java:17247)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1383)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlClassDecl(JmlAssertionAdder.java:15904)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1295)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1441)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:112)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:536)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:362)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:936)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.compile(JmlCompiler.java:197)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:321)
	at jdk.compiler/org.jmlspecs.openjml.Main.compile(Main.java:534)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:374)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:332)
	at jdk.compiler/org.jmlspecs.openjml.Main.main(Main.java:295)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:53)
java.lang.NullPointerException: Cannot read field "type" because "expr" is null
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.addImplicitConversion(JmlAssertionAdder.java:12095)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlBinary(JmlAssertionAdder.java:15530)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlBinary.accept(JmlTree.java:1647)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertJML(JmlAssertionAdder.java:1648)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.applyHelper(JmlAssertionAdder.java:10710)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitApply(JmlAssertionAdder.java:8031)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1752)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitExec(JmlAssertionAdder.java:7086)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCExpressionStatement.accept(JCTree.java:1539)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertIntoBlock(JmlAssertionAdder.java:1808)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitIf(JmlAssertionAdder.java:6977)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCIf.accept(JCTree.java:1508)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1441)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertMethodBodyNoInit(JmlAssertionAdder.java:1235)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlMethodDecl(JmlAssertionAdder.java:17247)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1383)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlClassDecl(JmlAssertionAdder.java:15904)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1295)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1441)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:112)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:536)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:362)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:936)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.compile(JmlCompiler.java:197)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:321)
	at jdk.compiler/org.jmlspecs.openjml.Main.compile(Main.java:534)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:374)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:332)
	at jdk.compiler/org.jmlspecs.openjml.Main.main(Main.java:295)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:53)
java.lang.NullPointerException: Cannot read field "type" because "expr" is null
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.addImplicitConversion(JmlAssertionAdder.java:12095)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlBinary(JmlAssertionAdder.java:15530)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlBinary.accept(JmlTree.java:1647)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertJML(JmlAssertionAdder.java:1648)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.applyHelper(JmlAssertionAdder.java:10710)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitApply(JmlAssertionAdder.java:8031)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1752)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitExec(JmlAssertionAdder.java:7086)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCExpressionStatement.accept(JCTree.java:1539)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertIntoBlock(JmlAssertionAdder.java:1808)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitIf(JmlAssertionAdder.java:6977)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCIf.accept(JCTree.java:1508)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1441)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertMethodBodyNoInit(JmlAssertionAdder.java:1235)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlMethodDecl(JmlAssertionAdder.java:17247)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1383)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlClassDecl(JmlAssertionAdder.java:15904)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1295)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1441)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:112)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:536)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:362)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:936)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.compile(JmlCompiler.java:197)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:321)
	at jdk.compiler/org.jmlspecs.openjml.Main.compile(Main.java:534)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:374)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:332)
	at jdk.compiler/org.jmlspecs.openjml.Main.main(Main.java:295)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:53)
java.lang.RuntimeException: MISMATCHED BLOCKS
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.popBlock(JmlAssertionAdder.java:1854)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.popBlock(JmlAssertionAdder.java:1838)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.applyHelper(JmlAssertionAdder.java:11040)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitApply(JmlAssertionAdder.java:8031)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1752)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitExec(JmlAssertionAdder.java:7086)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCExpressionStatement.accept(JCTree.java:1539)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertIntoBlock(JmlAssertionAdder.java:1808)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitIf(JmlAssertionAdder.java:6977)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCIf.accept(JCTree.java:1508)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1441)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertMethodBodyNoInit(JmlAssertionAdder.java:1235)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlMethodDecl(JmlAssertionAdder.java:17247)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1383)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlClassDecl(JmlAssertionAdder.java:15904)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1295)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1441)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:112)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:536)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:362)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:936)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.compile(JmlCompiler.java:197)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:321)
	at jdk.compiler/org.jmlspecs.openjml.Main.compile(Main.java:534)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:374)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:332)
	at jdk.compiler/org.jmlspecs.openjml.Main.main(Main.java:295)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:53)
/home/max/Documents/JMLGPT/tmp/MinePump.java:28: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
        if (pumpRunning && isMethaneAlarm()) {
                                         ^
  Reason: No logical function for method isMethaneAlarm() isMethaneAlarm()
java.lang.NullPointerException: Cannot read field "type" because "expr" is null
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.addImplicitConversion(JmlAssertionAdder.java:12095)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitConditional(JmlAssertionAdder.java:6926)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitBinary(JmlAssertionAdder.java:13533)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBinary.accept(JCTree.java:2111)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitParens(JmlAssertionAdder.java:12077)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCParens.accept(JCTree.java:1969)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitIf(JmlAssertionAdder.java:6964)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCIf.accept(JCTree.java:1508)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1441)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertMethodBodyNoInit(JmlAssertionAdder.java:1235)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlMethodDecl(JmlAssertionAdder.java:17247)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1383)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlClassDecl(JmlAssertionAdder.java:15904)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1295)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1441)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:112)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:536)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:362)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:936)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.compile(JmlCompiler.java:197)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:321)
	at jdk.compiler/org.jmlspecs.openjml.Main.compile(Main.java:534)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:374)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:332)
	at jdk.compiler/org.jmlspecs.openjml.Main.main(Main.java:295)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:53)
java.lang.NullPointerException: Cannot read field "type" because "rhs" is null
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitBinary(JmlAssertionAdder.java:13632)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBinary.accept(JCTree.java:2111)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertExpr(JmlAssertionAdder.java:1554)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertJML(JmlAssertionAdder.java:1648)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.addPostConditions(JmlAssertionAdder.java:5428)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convertMethodBodyNoInit(JmlAssertionAdder.java:1256)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlMethodDecl(JmlAssertionAdder.java:17247)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1383)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.visitJmlClassDecl(JmlAssertionAdder.java:15904)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1295)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlAssertionAdder.convert(JmlAssertionAdder.java:1441)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:112)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:536)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:362)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:936)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.compile(JmlCompiler.java:197)
	at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:321)
	at jdk.compiler/org.jmlspecs.openjml.Main.compile(Main.java:534)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:374)
	at jdk.compiler/org.jmlspecs.openjml.Main.execute(Main.java:332)
	at jdk.compiler/org.jmlspecs.openjml.Main.main(Main.java:295)
	at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:53)
3 errors

