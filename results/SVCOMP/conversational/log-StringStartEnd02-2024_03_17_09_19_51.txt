public class StringStartEnd02 {

  //@ requires args.length >= 4;
  //@ ensures \result <==> (\num_of int j; 0 <= j && j < 4; args[j].startsWith("te") == true) == 1;
  public static boolean f(String[] args) {
    if (args.length < 4)
      return false;
    int i = 0;

    //@ maintaining 0 <= j && j <= 4;
    //@ maintaining 0 <= i && i <= j;
    //@ decreases 4 - j;
    for (int j = 0; j < 4; j++) {
      if (args[j].startsWith("te"))
        ++i;
    }

    return i == 1;
  }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
      if (args[j].startsWith("te"))
                            ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class StringStartEnd02 {

  //@ requires args.length >= 4;
  //@ ensures \result <==> (\num_of int j; 0 <= j && j < 4; args[j].startsWith("te") == true) == 1;
  public static boolean f(String[] args) {
    if (args.length < 4)
      return false;
    int i = 0;

    //@ maintaining 0 <= j && j <= 4;
    //@ maintaining 0 <= i && i <= j;
    //@ decreases 4 - j;
    for (int j = 0; j < 4; j++) {
      if (args[j] != null && args[j].startsWith("te"))
        ++i;
    }

    return i == 1;
  }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
      if (args[j] != null && args[j].startsWith("te"))
                                               ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class StringStartEnd02 {

  //@ requires args.length >= 4;
  //@ ensures \result <==> (\num_of int j; 0 <= j && j < 4; args[j] != null && args[j].startsWith("te") == true) == 1;
  public static boolean f(String[] args) {
    if (args.length < 4)
      return false;
    int i = 0;

    //@ maintaining 0 <= j && j <= 4;
    //@ maintaining 0 <= i && i <= j;
    //@ decreases 4 - j;
    for (int j = 0; j < 4; j++) {
      if (args[j] != null && args[j].startsWith("te"))
        ++i;
    }

    return i == 1;
  }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
      if (args[j] != null && args[j].startsWith("te"))
                                               ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class StringStartEnd02 {

  //@ requires args.length >= 4;
  //@ ensures \result <==> (\num_of int j; 0 <= j && j < 4; args[j] != null && args[j].startsWith("te") == true) == 1;
  public static boolean f(String[] args) {
    if (args.length < 4)
      return false;
    int i = 0;

    //@ maintaining 0 <= j && j <= 4;
    //@ maintaining 0 <= i && i <= j;
    //@ decreases 4 - j;
    for (int j = 0; j < 4; j++) {
      if (args[j] != null && args[j].startsWith("te"))
        ++i;
    }

    return i == 1;
  }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
      if (args[j] != null && args[j].startsWith("te"))
                                               ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class StringStartEnd02 {

  //@ requires args.length >= 4;
  //@ ensures \result <==> (\num_of int j; 0 <= j && j < 4; args[j] != null && args[j].startsWith("te") == true) == 1;
  public static boolean f(String[] args) {
    if (args.length < 4)
      return false;
    int i = 0;

    //@ maintaining 0 <= j && j <= 4;
    //@ maintaining 0 <= i && i <= j;
    //@ decreases 4 - j;
    for (int j = 0; j < 4; j++) {
      if (args[j] != null && args[j].startsWith("te"))
        ++i;
    }

    return i == 1;
  }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
      if (args[j] != null && args[j].startsWith("te"))
                                               ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class StringStartEnd02 {

  //@ requires args.length >= 4;
  //@ ensures \result <==> (\num_of int j; 0 <= j && j < 4; args[j] != null && args[j].startsWith("te") == true) == 1;
  public static boolean f(String[] args) {
    if (args.length < 4)
      return false;
    int i = 0;

    //@ maintaining 0 <= j && j <= 4;
    //@ maintaining 0 <= i && i <= j;
    //@ decreases 4 - j;
    for (int j = 0; j < 4; j++) {
      if (args[j] != null && args[j].startsWith("te"))
        ++i;
    }

    return i == 1;
  }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
      if (args[j] != null && args[j].startsWith("te"))
                                               ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class StringStartEnd02 {

  //@ requires args.length >= 4;
  //@ ensures \result <==> (\num_of int j; 0 <= j && j < 4; args[j] != null && args[j].startsWith("te") == true) == 1;
  public static boolean f(String[] args) {
    if (args.length < 4)
      return false;
    int i = 0;

    //@ maintaining 0 <= j && j <= 4;
    //@ maintaining 0 <= i && i <= j;
    //@ decreases 4 - j;
    for (int j = 0; j < 4; j++) {
      if (args[j] != null && args[j].startsWith("te"))
        ++i;
    }

    return i == 1;
  }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
      if (args[j] != null && args[j].startsWith("te"))
                                               ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class StringStartEnd02 {

  //@ requires args.length >= 4;
  //@ ensures \result <==> (\num_of int j; 0 <= j && j < 4; args[j] != null && args[j].startsWith("te") == true) == 1;
  public static boolean f(String[] args) {
    if (args.length < 4)
      return false;
    int i = 0;

    //@ maintaining 0 <= j && j <= 4;
    //@ maintaining 0 <= i && i <= j;
    //@ decreases 4 - j;
    for (int j = 0; j < 4; j++) {
      if (args[j] != null && args[j].startsWith("te"))
        ++i;
    }

    return i == 1;
  }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
      if (args[j] != null && args[j].startsWith("te"))
                                               ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class StringStartEnd02 {

  //@ requires args.length >= 4;
  //@ ensures \result <==> (\num_of int j; 0 <= j && j < 4; args[j] != null && args[j].startsWith("te") == true) == 1;
  public static boolean f(String[] args) {
    if (args.length < 4)
      return false;
    int i = 0;

    //@ maintaining 0 <= j && j <= 4;
    //@ maintaining 0 <= i && i <= j;
    //@ decreases 4 - j;
    for (int j = 0; j < 4; j++) {
      if (args[j] != null && args[j].startsWith("te"))
        ++i;
    }

    return i == 1;
  }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
      if (args[j] != null && args[j].startsWith("te"))
                                               ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class StringStartEnd02 {

  //@ requires args.length >= 4;
  //@ ensures \result <==> (\num_of int j; 0 <= j && j < 4; args[j] != null && args[j].startsWith("te") == true) == 1;
  public static boolean f(String[] args) {
    if (args.length < 4)
      return false;
    int i = 0;

    //@ maintaining 0 <= j && j <= 4;
    //@ maintaining 0 <= i && i <= j;
    //@ decreases 4 - j;
    for (int j = 0; j < 4; j++) {
      if (args[j] != null && args[j].startsWith("te"))
        ++i;
    }

    return i == 1;
  }
  
}
/home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: StringStartEnd02.f(java.lang.String[]), Callee: java.lang.String.startsWith(java.lang.String))
      if (args[j] != null && args[j].startsWith("te"))
                                               ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/StringStartEnd02.java:14:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

