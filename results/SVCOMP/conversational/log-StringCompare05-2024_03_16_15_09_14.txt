public class StringCompare05 {
    //@ requires string != null;
    //@ requires (\forall int i; 0 <= i && i < string.length(); (int)Character.MIN_VALUE <= (int)string.charAt(i) && (int)string.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> s1 == string;
    public static boolean f (String string) {
        String s1 = new String(string);
        return s1 == string;
    }
}
/home/max/Documents/JMLGPT/tmp/StringCompare05.java:4: error: cannot find symbol
    //@ ensures \result <==> s1 == string;
                             ^
  symbol:   variable s1
  location: class StringCompare05
1 error

public class StringCompare05 {
    //@ requires string != null;
    //@ requires (\forall int i; 0 <= i && i < string.length(); (int)Character.MIN_VALUE <= (int)string.charAt(i) && (int)string.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> s1.equals(string);
    public static boolean f (String string) {
        String s1 = new String(string);
        return s1.equals(string);
    }
}
/home/max/Documents/JMLGPT/tmp/StringCompare05.java:4: error: cannot find symbol
    //@ ensures \result <==> s1.equals(string);
                             ^
  symbol:   variable s1
  location: class StringCompare05
1 error

public class StringCompare05 {
    //@ requires string != null;
    //@ requires (\forall int i; 0 <= i && i < string.length(); (int)Character.MIN_VALUE <= (int)string.charAt(i) && (int)string.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> new String(string).equals(string);
    public static boolean f (String string) {
        return new String(string).equals(string);
    }
}
/home/max/Documents/JMLGPT/tmp/StringCompare05.java:4: error: Object allocation is not permitted in specification expressions
    //@ ensures \result <==> new String(string).equals(string);
                             ^
1 error

public class StringCompare05 {
    //@ requires string != null;
    //@ requires (\forall int i; 0 <= i && i < string.length(); (int)Character.MIN_VALUE <= (int)string.charAt(i) && (int)string.charAt(i) <= (int)Character.MAX_VALUE);
    //@ ensures \result <==> string.equals(string);
    public static boolean f (String string) {
        return string.equals(string);
    }
}

