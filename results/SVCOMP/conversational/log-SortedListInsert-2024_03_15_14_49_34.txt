public class SortedListInsert {

  private static class List {
    public int x;
    public List next;

    private static final int SENTINEL = Integer.MAX_VALUE;

    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    //@ requires true;
    //@ ensures x == SENTINEL && next == null;
    public List() {
      this(SENTINEL, null);
    }

    //@ requires true;
    //@ ensures (\forall List l; l != null && l != this; l.x <= data);
    //@ ensures x == data ==> next.x == data;
    //@ ensures x != data ==> x == \old(data) && next.x == \old(x);
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:15: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures x == SENTINEL && next == null;
                     ^
1 error

public class SortedListInsert {

  private static class List {
    public /*@ spec_public @*/ int x;
    public /*@ spec_public @*/ List next;

    private static final int SENTINEL = Integer.MAX_VALUE;

    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }

    //@ requires true;
    //@ ensures x == SENTINEL && next == null;
    public List() {
      this(SENTINEL, null);
    }

    //@ requires true;
    //@ ensures (\forall List l; l != null && l != this; l.x <= data);
    //@ ensures x == data ==> next.x == data;
    //@ ensures x != data ==> x == \old(data) && next.x == \old(x);
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:15: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures x == SENTINEL && next == null;
                     ^
1 error

public class SortedListInsert {

  private static class List {
    public /*@ spec_public @*/ int x;
    public /*@ spec_public @*/ List next;

    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires true;
    //@ ensures x == SENTINEL && next == null;
    public List() {
      this(SENTINEL, null);
    }

    //@ requires true;
    //@ ensures (\forall List l; l != null && l != this; l.x <= data);
    //@ ensures x == data ==> next.x == data;
    //@ ensures x != data ==> x == \old(data) && next.x == \old(x);
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }

    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures x == SENTINEL && next == null;
                     ^
1 error

public class SortedListInsert {

  private static class List {
    public /*@ spec_public @*/ int x;
    public /*@ spec_public @*/ List next;

    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires true;
    //@ ensures x == SENTINEL && next == null;
    public List() {
      this(SENTINEL, null);
    }

    //@ requires true;
    //@ ensures (\forall List l; l != null && l != this; l.x <= data);
    //@ ensures x == data ==> next.x == data;
    //@ ensures x != data ==> x == \old(data) && next.x == \old(x);
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }

    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures x == SENTINEL && next == null;
                     ^
1 error

public class SortedListInsert {

  private static class List {
    public /*@ spec_public @*/ int x;
    public /*@ spec_public @*/ List next;

    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires true;
    //@ ensures x == SENTINEL && next == null;
    public List() {
      this(SENTINEL, null);
    }

    //@ requires true;
    //@ ensures (\forall List l; l != null && l != this; l.x <= data);
    //@ ensures x == data ==> next.x == data;
    //@ ensures x != data ==> x == \old(data) && next.x == \old(x);
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }

    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures x == SENTINEL && next == null;
                     ^
1 error

public class SortedListInsert {

  private static class List {
    public /*@ spec_public @*/ int x;
    public /*@ spec_public @*/ List next;

    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires true;
    //@ ensures x == SENTINEL && next == null;
    public List() {
      this(SENTINEL, null);
    }

    //@ requires true;
    //@ ensures (\forall List l; l != null && l != this; l.x <= data);
    //@ ensures x == data ==> next.x == data;
    //@ ensures x != data ==> x == \old(data) && next.x == \old(x);
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }

    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures x == SENTINEL && next == null;
                     ^
1 error

public class SortedListInsert {

  private static class List {
    public /*@ spec_public @*/ int x;
    public /*@ spec_public @*/ List next;

    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires true;
    //@ ensures x == SENTINEL && next == null;
    public List() {
      this(SENTINEL, null);
    }

    //@ requires true;
    //@ ensures (\forall List l; l != null && l != this; l.x <= data);
    //@ ensures x == data ==> next.x == data;
    //@ ensures x != data ==> x == \old(data) && next.x == \old(x);
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }

    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures x == SENTINEL && next == null;
                     ^
1 error

public class SortedListInsert {

  private static class List {
    public /*@ spec_public @*/ int x;
    public /*@ spec_public @*/ List next;

    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires true;
    //@ ensures x == SENTINEL && next == null;
    public List() {
      this(SENTINEL, null);
    }

    //@ requires true;
    //@ ensures (\forall List l; l != null && l != this; l.x <= data);
    //@ ensures x == data ==> next.x == data;
    //@ ensures x != data ==> x == \old(data) && next.x == \old(x);
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }

    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures x == SENTINEL && next == null;
                     ^
1 error

public class SortedListInsert {

  private static class List {
    public /*@ spec_public @*/ int x;
    public /*@ spec_public @*/ List next;

    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires true;
    //@ ensures x == SENTINEL && next == null;
    public List() {
      this(SENTINEL, null);
    }

    //@ requires true;
    //@ ensures (\forall List l; l != null && l != this; l.x <= data);
    //@ ensures x == data ==> next.x == data;
    //@ ensures x != data ==> x == \old(data) && next.x == \old(x);
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }

    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures x == SENTINEL && next == null;
                     ^
1 error

public class SortedListInsert {

  private static class List {
    public /*@ spec_public @*/ int x;
    public /*@ spec_public @*/ List next;

    private static final int SENTINEL = Integer.MAX_VALUE;

    //@ requires true;
    //@ ensures x == SENTINEL && next == null;
    public List() {
      this(SENTINEL, null);
    }

    //@ requires true;
    //@ ensures (\forall List l; l != null && l != this; l.x <= data);
    //@ ensures x == data ==> next.x == data;
    //@ ensures x != data ==> x == \old(data) && next.x == \old(x);
    public void insert(int data) {
      if (data > this.x) {
        next.insert(data);
      } else {
        next = new List(x, next);
        x = data;
      }
    }

    private List(int x, List next) {
      this.x = x;
      this.next = next;
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:10: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures x == SENTINEL && next == null;
                     ^
1 error

