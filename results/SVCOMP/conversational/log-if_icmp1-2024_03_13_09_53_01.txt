class if_icmp1 {
    //@ ensures \result == -1 <==> i + 1 < 0;
    //@ ensures \result == f(i, i + 1);
    private static boolean f(int i, int j) {
        if (i == j) {
            return false;
        }
        if (i >= j) {
            return false;
        }
        if (j > i) {
            return true;
        } else {
            return false;
        }
        if (j <= i) {
            return false;
        }
        if (j < i) {
            return false;
        } else {
            return true;
        }
    }

    //@ ensures \result == -1 <==> i + 1 < 0;
    //@ ensures \result == f(i, i + 1);
    public static int fun(int i) {
        if (i + 1 < 0) return -1;
        return f(i, i + 1);
    }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:2: error: incomparable types: boolean and int
    //@ ensures \result == -1 <==> i + 1 < 0;
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:27: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    //@ ensures \result == f(i, i + 1);
                           ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:27: error: incomparable types: int and boolean
    //@ ensures \result == f(i, i + 1);
                        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:30: error: incompatible types: boolean cannot be converted to int
        return f(i, i + 1);
                ^
4 errors

class if_icmp1 {
    private /*@ spec_public @*/ static boolean f(int i, int j) {
        if (i == j) {
            return false;
        }
        if (i >= j) {
            return false;
        }
        if (j > i) {
            return true;
        } else {
            return false;
        }
        if (j <= i) {
            return false;
        }
        if (j < i) {
            return false;
        } else {
            return true;
        }
    }

    //@ requires Integer.MIN_VALUE <= i && i <= Integer.MAX_VALUE;
    //@ ensures \result == -1 <==> i + 1 < 0;
    //@ ensures \result == f(i, i + 1);
    public static int fun(int i) {
        if (i + 1 < 0) return -1;
        return f(i, i + 1) ? 1 : 0;
    }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:26: error: incomparable types: int and boolean
    //@ ensures \result == f(i, i + 1);
                        ^
1 error

class if_icmp1 {
    private /*@ spec_public @*/ static boolean f(int i, int j) {
        if (i == j) {
            return false;
        }
        if (i >= j) {
            return false;
        }
        if (j > i) {
            return true;
        } else {
            return false;
        }
        if (j <= i) {
            return false;
        }
        if (j < i) {
            return false;
        } else {
            return true;
        }
    }

    //@ requires Integer.MIN_VALUE <= i && i <= Integer.MAX_VALUE;
    //@ ensures \result <==> i + 1 < 0;
    //@ ensures \result <==> f(i, i + 1);
    public static boolean fun(int i) {
        return i + 1 < 0 ? true : false;
    }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:14: error: unreachable statement
        if (j <= i) {
        ^
1 error

class if_icmp1 {
    private /*@ spec_public @*/ static boolean f(int i, int j) {
        if (i == j) {
            return false;
        }
        if (i >= j) {
            return false;
        }
        if (j > i) {
            return true;
        } else {
            return false;
        }
        if (j < i) {
            return false;
        } else {
            return true;
        }
    }

    //@ requires Integer.MIN_VALUE <= i && i <= Integer.MAX_VALUE;
    //@ ensures \result <==> i + 1 < 0;
    //@ ensures \result <==> f(i, i + 1);
    public static boolean fun(int i) {
        return i + 1 < 0 ? true : false;
    }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:14: error: unreachable statement
        if (j < i) {
        ^
1 error

class if_icmp1 {
    private /*@ spec_public @*/ static boolean f(int i, int j) {
        if (i == j) {
            return false;
        }
        if (i >= j) {
            return false;
        }
        if (j > i) {
            return true;
        } else {
            return false;
        }
        if (j <= i) {
            return false;
        }
    }

    //@ requires Integer.MIN_VALUE <= i && i <= Integer.MAX_VALUE;
    //@ ensures \result <==> i + 1 < 0;
    //@ ensures \result <==> f(i, i + 1);
    public static boolean fun(int i) {
        return i + 1 < 0 ? true : false;
    }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:14: error: unreachable statement
        if (j <= i) {
        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:17: error: missing return statement
    }
    ^
2 errors

class if_icmp1 {
    private /*@ spec_public @*/ static boolean f(int i, int j) {
        if (i == j) {
            return false;
        }
        if (i >= j) {
            return false;
        }
        if (j > i) {
            return true;
        }
        return false;
    }

    //@ requires Integer.MIN_VALUE <= i && i <= Integer.MAX_VALUE;
    //@ ensures \result <==> i + 1 < 0;
    //@ ensures \result <==> f(i, i + 1);
    public static boolean fun(int i) {
        return i + 1 < 0 ? true : false;
    }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:17:) in method fun
        return i + 1 < 0 ? true : false;
        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:19:
    //@ ensures \result <==> f(i, i + 1);
        ^
2 verification failures

class if_icmp1 {
    private /*@ spec_public @*/ static boolean f(int i, int j) {
        if (i == j) {
            return false;
        }
        if (i >= j) {
            return false;
        }
        if (j > i) {
            return true;
        }
        return false;
    }

    //@ requires Integer.MIN_VALUE <= i && i <= Integer.MAX_VALUE;
    //@ ensures \result <==> i + 1 < 0;
    //@ ensures \result <==> f(i, i + 1);
    public static boolean fun(int i) {
        return i + 1 < 0;
    }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:17:) in method fun
        return i + 1 < 0;
        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:19:
    //@ ensures \result <==> f(i, i + 1);
        ^
2 verification failures

class if_icmp1 {
    private /*@ spec_public @*/ static boolean f(int i, int j) {
        if (i == j) {
            return false;
        }
        if (i >= j) {
            return false;
        }
        if (j > i) {
            return true;
        }
        return false;
    }

    //@ requires Integer.MIN_VALUE <= i && i <= Integer.MAX_VALUE;
    //@ ensures \result <==> i + 1 < 0;
    //@ ensures \result <==> f(i, i + 1);
    public static boolean fun(int i) {
        return i + 1 < 0 ? true : false;
    }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:17:) in method fun
        return i + 1 < 0 ? true : false;
        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:19:
    //@ ensures \result <==> f(i, i + 1);
        ^
2 verification failures

class if_icmp1 {
    private /*@ spec_public @*/ static boolean f(int i, int j) {
        if (i == j) {
            return false;
        }
        if (i >= j) {
            return false;
        }
        if (j > i) {
            return true;
        }
        return false;
    }

    //@ requires Integer.MIN_VALUE <= i && i <= Integer.MAX_VALUE;
    //@ ensures \result <==> i + 1 < 0;
    //@ ensures \result <==> f(i, i + 1);
    public static boolean fun(int i) {
        return i + 1 < 0;
    }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:17:) in method fun
        return i + 1 < 0;
        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:19:
    //@ ensures \result <==> f(i, i + 1);
        ^
2 verification failures

class if_icmp1 {
    private /*@ spec_public @*/ static boolean f(int i, int j) {
        if (i == j) {
            return false;
        }
        if (i >= j) {
            return false;
        }
        if (j > i) {
            return true;
        }
        return false;
    }

    //@ requires Integer.MIN_VALUE <= i && i <= Integer.MAX_VALUE;
    //@ ensures \result <==> i + 1 < 0;
    //@ ensures \result <==> f(i, i + 1);
    public static boolean fun(int i) {
        return i + 1 < 0;
    }
}
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:17:) in method fun
        return i + 1 < 0;
        ^
/home/max/Documents/JMLGPT/tmp/if_icmp1.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/if_icmp1.java:19:
    //@ ensures \result <==> f(i, i + 1);
        ^
2 verification failures

