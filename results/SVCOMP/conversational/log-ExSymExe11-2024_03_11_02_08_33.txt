class Main {
  static int field;

  //@ requires arg >= 0;
  //@ ensures \result == true <==> (x * field) <= 0 && y > 0;
  //@ ensures \result == false <==> (x * field) > 0 || y <= 0;
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x == 3 && z == field;
  //@ ensures \result == true <==> (x * z) <= 0 && y > 0;
  //@ ensures \result == false <==> (x * z) > 0 || y <= 0;
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: cannot find symbol
  //@ ensures \result == true <==> (x * field) <= 0 && y > 0;
                                    ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result == true <==> (x * field) <= 0 && y > 0;
                                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: cannot find symbol
  //@ ensures \result == true <==> (x * field) <= 0 && y > 0;
                                                       ^
  symbol:   variable y
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:6: error: cannot find symbol
  //@ ensures \result == false <==> (x * field) > 0 || y <= 0;
                                     ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result == false <==> (x * field) > 0 || y <= 0;
                                         ^
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:6: error: cannot find symbol
  //@ ensures \result == false <==> (x * field) > 0 || y <= 0;
                                                       ^
  symbol:   variable y
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:16: error: An identifier with package visibility may not be used in a requires clause with public visibility
  //@ requires x == 3 && z == field;
                              ^
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:17: error: cannot find symbol
  //@ ensures \result == true <==> (x * z) <= 0 && y > 0;
                                                   ^
  symbol:   variable y
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:18: error: cannot find symbol
  //@ ensures \result == false <==> (x * z) > 0 || y <= 0;
                                                   ^
  symbol:   variable y
  location: class Main
9 errors

class Main {
  static /*@ spec_public */ int field;

  //@ requires arg >= 0;
  //@ ensures \result == true <==> (x * field) <= 0 && y > 0;
  //@ ensures \result == false <==> (x * field) > 0 || y <= 0;
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x == 3 && z == field;
  //@ ensures \result == true <==> (x * z) <= 0 && y > 0;
  //@ ensures \result == false <==> (x * z) > 0 || y <= 0;
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: cannot find symbol
  //@ ensures \result == true <==> (x * field) <= 0 && y > 0;
                                    ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: cannot find symbol
  //@ ensures \result == true <==> (x * field) <= 0 && y > 0;
                                                       ^
  symbol:   variable y
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:6: error: cannot find symbol
  //@ ensures \result == false <==> (x * field) > 0 || y <= 0;
                                     ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:6: error: cannot find symbol
  //@ ensures \result == false <==> (x * field) > 0 || y <= 0;
                                                       ^
  symbol:   variable y
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:17: error: cannot find symbol
  //@ ensures \result == true <==> (x * z) <= 0 && y > 0;
                                                   ^
  symbol:   variable y
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:18: error: cannot find symbol
  //@ ensures \result == false <==> (x * z) > 0 || y <= 0;
                                                   ^
  symbol:   variable y
  location: class Main
6 errors

class Main {
  static /*@ spec_public */ int field;

  //@ requires arg >= 0;
  //@ ensures \result == true <==> (3 * field) <= 0 && 3 > 0;
  //@ ensures \result == false <==> (3 * field) > 0 || 3 <= 0;
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires x == 3 && z == field;
  //@ ensures \result == true <==> (3 * z) <= 0 && 3 > 0;
  //@ ensures \result == false <==> (3 * z) > 0 || 3 <= 0;
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
