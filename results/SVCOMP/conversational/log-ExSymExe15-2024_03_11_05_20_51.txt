class Main {
  static int field;
  static int field2;
  
  //@ ensures field == arg;
  //@ ensures \result == (field < 0) || test(13000, field, field2);
  public static boolean f(Short arg) {
    int x = 13000;
    Main inst = new Main();
    field = arg;
    if (field < 0)
      return true;
    return inst.test(x, field, field2);
  }
  
  //@ modifies field2;
  //@ ensures field2 == x + z;
  //@ ensures z == x - 3 - 4;
  //@ ensures \result == (x + z <= 99);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe15");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r <= 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:5: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures field == arg;
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result == (field < 0) || test(13000, field, field2);
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result == (field < 0) || test(13000, field, field2);
                                                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result == (field < 0) || test(13000, field, field2);
                                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:6: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result == (field < 0) || test(13000, field, field2);
                                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:16: error: An identifier with package visibility may not be used in a assignable clause with public visibility
  //@ modifies field2;
               ^
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:17: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures field2 == x + z;
              ^
7 errors

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;
  
  //@ ensures field == arg;
  //@ ensures \result == (field < 0) || test(13000, field, field2);
  public static boolean f(Short arg) {
    int x = 13000;
    Main inst = new Main();
    field = arg;
    if (field < 0)
      return true;
    return inst.test(x, field, field2);
  }
  
  //@ modifies field2;
  //@ ensures field2 == x + z;
  //@ ensures z == x - 3 - 4;
  //@ ensures \result == (x + z <= 99);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe15");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r <= 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:8: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result == (field < 0) || test(13000, field, field2);
                                        ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;
  
  //@ ensures field == arg;
  //@ ensures \result == (field < 0) || new Main().test(13000, field, field2);
  public static boolean f(Short arg) {
    int x = 13000;
    Main inst = new Main();
    field = arg;
    if (field < 0)
      return true;
    return inst.test(x, field, field2);
  }
  
  //@ modifies field2;
  //@ ensures field2 == x + z;
  //@ ensures z == x - 3 - 4;
  //@ ensures \result == (x + z <= 99);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe15");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r <= 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:8: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == (field < 0) || new Main().test(13000, field, field2);
                                        ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;
  
  //@ ensures field == arg;
  //@ ensures \result == (field < 0) || test(13000, field, field2);
  public static boolean f(Short arg) {
    int x = 13000;
    Main inst = new Main();
    field = arg;
    if (field < 0)
      return true;
    return inst.test(x, field, field2);
  }
  
  //@ modifies field2;
  //@ ensures field2 == x + z;
  //@ ensures z == x - 3 - 4;
  //@ ensures \result == (x + z <= 99);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe15");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r <= 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:8: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result == (field < 0) || test(13000, field, field2);
                                        ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;
  
  //@ requires arg != null;
  //@ ensures field == arg;
  //@ ensures \result == (field < 0) || new Main().test(13000, field, field2);
  public static boolean f(Short arg) {
    int x = 13000;
    Main inst = new Main();
    field = arg;
    if (field < 0)
      return true;
    return inst.test(x, field, field2);
  }
  
  //@ modifies field2;
  //@ ensures field2 == x + z;
  //@ ensures z == x - 3 - 4;
  //@ ensures \result == (x + z <= 99);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe15");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r <= 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:9: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == (field < 0) || new Main().test(13000, field, field2);
                                        ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;
  
  //@ requires arg != null;
  //@ ensures field == arg;
  //@ ensures \result == (field < 0) || test(13000, field, field2);
  public static boolean f(Short arg) {
    int x = 13000;
    Main inst = new Main();
    field = arg;
    if (field < 0)
      return true;
    return inst.test(x, field, field2);
  }
  
  //@ modifies field2;
  //@ ensures field2 == x + z;
  //@ ensures z == x - 3 - 4;
  //@ ensures \result == (x + z <= 99);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe15");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r <= 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:9: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result == (field < 0) || test(13000, field, field2);
                                        ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;
  
  //@ requires arg != null;
  //@ ensures field == arg;
  //@ ensures \result == (field < 0) || new Main().test(13000, field, field2);
  public static boolean f(Short arg) {
    int x = 13000;
    Main inst = new Main();
    field = arg;
    if (field < 0)
      return true;
    return inst.test(x, field, field2);
  }
  
  //@ modifies field2;
  //@ ensures field2 == x + z;
  //@ ensures z == x - 3 - 4;
  //@ ensures \result == (x + z <= 99);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe15");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r <= 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:9: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == (field < 0) || new Main().test(13000, field, field2);
                                        ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;
  
  //@ requires arg != null;
  //@ ensures field == arg;
  //@ ensures \result == (field < 0) || test(13000, field, field2);
  public static boolean f(Short arg) {
    int x = 13000;
    Main inst = new Main();
    field = arg;
    if (field < 0)
      return true;
    return inst.test(x, field, field2);
  }
  
  //@ modifies field2;
  //@ ensures field2 == x + z;
  //@ ensures z == x - 3 - 4;
  //@ ensures \result == (x + z <= 99);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe15");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r <= 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:9: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result == (field < 0) || test(13000, field, field2);
                                        ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;
  
  //@ requires arg != null;
  //@ ensures field == arg;
  //@ ensures \result == (field < 0) || new Main().test(13000, field, field2);
  public static boolean f(Short arg) {
    int x = 13000;
    Main inst = new Main();
    field = arg;
    if (field < 0)
      return true;
    return inst.test(x, field, field2);
  }
  
  //@ modifies field2;
  //@ ensures field2 == x + z;
  //@ ensures z == x - 3 - 4;
  //@ ensures \result == (x + z <= 99);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe15");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r <= 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:9: error: Object allocation is not permitted in specification expressions
  //@ ensures \result == (field < 0) || new Main().test(13000, field, field2);
                                        ^
1 error

class Main {
  //@ spec_public
  static int field;
  //@ spec_public
  static int field2;
  
  //@ requires arg != null;
  //@ ensures field == arg;
  //@ ensures \result == (field < 0) || test(13000, field, field2);
  public static boolean f(Short arg) {
    int x = 13000;
    Main inst = new Main();
    field = arg;
    if (field < 0)
      return true;
    return inst.test(x, field, field2);
  }
  
  //@ modifies field2;
  //@ ensures field2 == x + z;
  //@ ensures z == x - 3 - 4;
  //@ ensures \result == (x + z <= 99);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe15");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r <= 99) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x <= z) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe15.java:9: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result == (field < 0) || test(13000, field, field2);
                                        ^
1 error

