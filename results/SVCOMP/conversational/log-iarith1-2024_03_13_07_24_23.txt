/*
 * Origin of the benchmark:
 *     license: 4-clause BSD (see /java/jbmc-regression/LICENSE)
 *     repo: https://github.com/diffblue/cbmc.git
 *     branch: develop
 *     directory: regression/cbmc-java/iarith1
 * The benchmark was taken from the repo: 24 January 2018
 */
class Main {
    //@ ensures i == -32;
    //@ ensures l == -32L;
    public static void main(String[] args) {
        int i = 99;
        ++i;
        int tmp = i + 2;
        i = tmp;
        tmp = i - 3;
        i = tmp;
        i += 3;
        i -= 3;
        tmp = i * 2;
        i = tmp;
        tmp = i / 3;
        i = tmp;
        i %= 34;
        i = -i;
        assert i == -32;
        long l = 99;
        ++l;
        l += 2L;
        l -= 3L;
        l *= 2L;
        l /= 3L;
        l %= 34L;
        l = -l;
        assert l == -32L;
    }
}
/home/max/Documents/JMLGPT/tmp/iarith1.java:10: error: cannot find symbol
    //@ ensures i == -32;
                ^
  symbol:   variable i
  location: class Main
/home/max/Documents/JMLGPT/tmp/iarith1.java:11: error: cannot find symbol
    //@ ensures l == -32L;
                ^
  symbol:   variable l
  location: class Main
2 errors

/*
 * Origin of the benchmark:
 *     license: 4-clause BSD (see /java/jbmc-regression/LICENSE)
 *     repo: https://github.com/diffblue/cbmc.git
 *     branch: develop
 *     directory: regression/cbmc-java/iarith1
 * The benchmark was taken from the repo: 24 January 2018
 */
class Main {
    //@ ensures \result == -32;
    //@ ensures \result == -32L;
    public static void main(String[] args) {
        int i = 99;
        ++i;
        int tmp = i + 2;
        i = tmp;
        tmp = i - 3;
        i = tmp;
        i += 3;
        i -= 3;
        tmp = i * 2;
        i = tmp;
        tmp = i / 3;
        i = tmp;
        i %= 34;
        i = -i;
        assert i == -32;
        long l = 99;
        ++l;
        l += 2L;
        l -= 3L;
        l *= 2L;
        l /= 3L;
        l %= 34L;
        l = -l;
        assert l == -32L;
    }
}
/home/max/Documents/JMLGPT/tmp/iarith1.java:10: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result == -32;
                 ^
/home/max/Documents/JMLGPT/tmp/iarith1.java:11: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures \result == -32L;
                 ^
2 errors

/*
 * Origin of the benchmark:
 *     license: 4-clause BSD (see /java/jbmc-regression/LICENSE)
 *     repo: https://github.com/diffblue/cbmc.git
 *     branch: develop
 *     directory: regression/cbmc-java/iarith1
 * The benchmark was taken from the repo: 24 January 2018
 */
class Main {
    //@ ensures i == -32;
    //@ ensures l == -32L;
    public static void main(String[] args) {
        int i = 99;
        ++i;
        int tmp = i + 2;
        i = tmp;
        tmp = i - 3;
        i = tmp;
        i += 3;
        i -= 3;
        tmp = i * 2;
        i = tmp;
        tmp = i / 3;
        i = tmp;
        i %= 34;
        i = -i;
        assert i == -32;
        long l = 99;
        ++l;
        l += 2L;
        l -= 3L;
        l *= 2L;
        l /= 3L;
        l %= 34L;
        l = -l;
        assert l == -32L;
    }
}
/home/max/Documents/JMLGPT/tmp/iarith1.java:10: error: cannot find symbol
    //@ ensures i == -32;
                ^
  symbol:   variable i
  location: class Main
/home/max/Documents/JMLGPT/tmp/iarith1.java:11: error: cannot find symbol
    //@ ensures l == -32L;
                ^
  symbol:   variable l
  location: class Main
2 errors

/*
 * Origin of the benchmark:
 *     license: 4-clause BSD (see /java/jbmc-regression/LICENSE)
 *     repo: https://github.com/diffblue/cbmc.git
 *     branch: develop
 *     directory: regression/cbmc-java/iarith1
 * The benchmark was taken from the repo: 24 January 2018
 */
class Main {
    public static void main(String[] args) {
        int i = 99;
        ++i;
        int tmp = i + 2;
        i = tmp;
        tmp = i - 3;
        i = tmp;
        i += 3;
        i -= 3;
        tmp = i * 2;
        i = tmp;
        tmp = i / 3;
        i = tmp;
        i %= 34;
        i = -i;
        assert i == -32;
        long l = 99;
        ++l;
        l += 2L;
        l -= 3L;
        l *= 2L;
        l /= 3L;
        l %= 34L;
        l = -l;
        assert l == -32L;
    }
}

