class Main {
    static int field;
    static int field2;

    //@ ensures \result <==> z * x <= x && x <= y * x && z > x;
    public boolean test(int x, int z, int r) {
        System.out.println("Testing ExSymExe18");
        int y = 3;
        x = x * r;
        z = z * x;
        r = y * x;
        if (z > x) {
            System.out.println("branch FOO1");
            return false;
        } else {
            System.out.println("branch FOO2");
            if (x > r) {
                System.out.println("branch BOO1");
            } else {
                System.out.println("branch BOO2");
            }
        }
        return true;
    }

    //@ ensures field == 9;
    //@ ensures \result <==> test(3, field, field2);
    public static boolean f() {
        int x = 3;
        Main inst = new Main();
        field = 9;
        return inst.test(x, field, field2);
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:5: error: cannot find symbol
    //@ ensures \result <==> z * x <= x && x <= y * x && z > x;
                                                ^
  symbol:   variable y
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:26: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures field == 9;
                ^
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:27: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result <==> test(3, field, field2);
                                     ^
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:27: error: An identifier with package visibility may not be used in a ensures clause with public visibility
    //@ ensures \result <==> test(3, field, field2);
                                            ^
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:27: error: non-static method test(int,int,int) cannot be referenced from a static context
    //@ ensures \result <==> test(3, field, field2);
                             ^
5 errors

class Main {
    spec_public static int field;
    spec_public static int field2;

    //@ ensures \result <==> z * x <= x && x <= 3 * x && z > x;
    public boolean test(int x, int z, int r) {
        System.out.println("Testing ExSymExe18");
        int y = 3;
        x = x * r;
        z = z * x;
        r = y * x;
        if (z > x) {
            System.out.println("branch FOO1");
            return false;
        } else {
            System.out.println("branch FOO2");
            if (x > r) {
                System.out.println("branch BOO1");
            } else {
                System.out.println("branch BOO2");
            }
        }
        return true;
    }

    //@ ensures field == 9;
    //@ ensures \result <==> test(3, field, field2);
    public static boolean f() {
        int x = 3;
        Main inst = new Main();
        field = 9;
        return inst.test(x, field, field2);
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:2: error: <identifier> expected
    spec_public static int field;
               ^
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:3: error: <identifier> expected
    spec_public static int field2;
               ^
2 errors

class Main {
    //@ spec_public
    static int field;
    //@ spec_public
    static int field2;

    //@ ensures \result <==> z * x <= x && x <= 3 * x && z > x;
    public boolean test(int x, int z, int r) {
        System.out.println("Testing ExSymExe18");
        int y = 3;
        x = x * r;
        z = z * x;
        r = y * x;
        if (z > x) {
            System.out.println("branch FOO1");
            return false;
        } else {
            System.out.println("branch FOO2");
            if (x > r) {
                System.out.println("branch BOO1");
            } else {
                System.out.println("branch BOO2");
            }
        }
        return true;
    }

    //@ ensures field == 9;
    //@ ensures \result <==> test(3, field, field2);
    public static boolean f() {
        int x = 3;
        Main inst = new Main();
        field = 9;
        return inst.test(x, field, field2);
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:29: error: non-static method test(int,int,int) cannot be referenced from a static context
    //@ ensures \result <==> test(3, field, field2);
                             ^
1 error

class Main {
    //@ spec_public
    static int field;
    //@ spec_public
    static int field2;

    //@ ensures \result <==> z * x <= x && x <= 3 * x && z > x;
    public boolean test(int x, int z, int r) {
        System.out.println("Testing ExSymExe18");
        int y = 3;
        x = x * r;
        z = z * x;
        r = y * x;
        if (z > x) {
            System.out.println("branch FOO1");
            return false;
        } else {
            System.out.println("branch FOO2");
            if (x > r) {
                System.out.println("branch BOO1");
            } else {
                System.out.println("branch BOO2");
            }
        }
        return true;
    }

    //@ ensures field == 9;
    //@ ensures \result <==> new Main().test(3, field, field2);
    public static boolean f() {
        int x = 3;
        field = 9;
        return new Main().test(x, field, field2);
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:29: error: Object allocation is not permitted in specification expressions
    //@ ensures \result <==> new Main().test(3, field, field2);
                             ^
1 error

class Main {
    //@ spec_public
    static int field;
    //@ spec_public
    static int field2;

    //@ ensures field == 9;
    //@ ensures \result <==> test(3, field, field2);
    public static boolean f() {
        int x = 3;
        field = 9;
        return new Main().test(x, field, field2);
    }

    //@ ensures \result <==> z * x <= x && x <= 3 * x && z > x;
    public boolean test(int x, int z, int r) {
        System.out.println("Testing ExSymExe18");
        int y = 3;
        x = x * r;
        z = z * x;
        r = y * x;
        if (z > x) {
            System.out.println("branch FOO1");
            return false;
        } else {
            System.out.println("branch FOO2");
            if (x > r) {
                System.out.println("branch BOO1");
            } else {
                System.out.println("branch BOO2");
            }
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:8: error: non-static method test(int,int,int) cannot be referenced from a static context
    //@ ensures \result <==> test(3, field, field2);
                             ^
1 error

class Main {
    //@ spec_public
    static int field;
    //@ spec_public
    static int field2;

    //@ ensures field == 9;
    //@ ensures \result <==> new Main().test(3, field, field2);
    public static boolean f() {
        int x = 3;
        field = 9;
        return new Main().test(x, field, field2);
    }

    //@ ensures \result <==> z * x <= x && x <= 3 * x && z > x;
    public boolean test(int x, int z, int r) {
        System.out.println("Testing ExSymExe18");
        int y = 3;
        x = x * r;
        z = z * x;
        r = y * x;
        if (z > x) {
            System.out.println("branch FOO1");
            return false;
        } else {
            System.out.println("branch FOO2");
            if (x > r) {
                System.out.println("branch BOO1");
            } else {
                System.out.println("branch BOO2");
            }
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:8: error: Object allocation is not permitted in specification expressions
    //@ ensures \result <==> new Main().test(3, field, field2);
                             ^
1 error

class Main {
    //@ spec_public
    static int field;
    //@ spec_public
    static int field2;

    //@ ensures field == 9;
    //@ ensures \result <==> test(3, field, field2);
    public static boolean f() {
        int x = 3;
        field = 9;
        Main inst = new Main();
        return inst.test(x, field, field2);
    }

    //@ ensures \result <==> z * x <= x && x <= 3 * x && z > x;
    public boolean test(int x, int z, int r) {
        System.out.println("Testing ExSymExe18");
        int y = 3;
        x = x * r;
        z = z * x;
        r = y * x;
        if (z > x) {
            System.out.println("branch FOO1");
            return false;
        } else {
            System.out.println("branch FOO2");
            if (x > r) {
                System.out.println("branch BOO1");
            } else {
                System.out.println("branch BOO2");
            }
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:8: error: non-static method test(int,int,int) cannot be referenced from a static context
    //@ ensures \result <==> test(3, field, field2);
                             ^
1 error

class Main {
    //@ spec_public
    static int field;
    //@ spec_public
    static int field2;

    //@ ensures field == 9;
    //@ ensures \result <==> new Main().test(3, field, field2);
    public static boolean f() {
        int x = 3;
        field = 9;
        Main inst = new Main();
        return inst.test(x, field, field2);
    }

    //@ ensures \result <==> z * x <= x && x <= 3 * x && z > x;
    public boolean test(int x, int z, int r) {
        System.out.println("Testing ExSymExe18");
        int y = 3;
        x = x * r;
        z = z * x;
        r = y * x;
        if (z > x) {
            System.out.println("branch FOO1");
            return false;
        } else {
            System.out.println("branch FOO2");
            if (x > r) {
                System.out.println("branch BOO1");
            } else {
                System.out.println("branch BOO2");
            }
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:8: error: Object allocation is not permitted in specification expressions
    //@ ensures \result <==> new Main().test(3, field, field2);
                             ^
1 error

class Main {
    //@ spec_public
    static int field;
    //@ spec_public
    static int field2;

    //@ ensures field == 9;
    //@ ensures \result <==> test(3, field, field2);
    public static boolean f() {
        int x = 3;
        field = 9;
        Main inst = new Main();
        return inst.test(x, field, field2);
    }

    //@ ensures \result <==> z * x <= x && x <= 3 * x && z > x;
    public boolean test(int x, int z, int r) {
        System.out.println("Testing ExSymExe18");
        int y = 3;
        x = x * r;
        z = z * x;
        r = y * x;
        if (z > x) {
            System.out.println("branch FOO1");
            return false;
        } else {
            System.out.println("branch FOO2");
            if (x > r) {
                System.out.println("branch BOO1");
            } else {
                System.out.println("branch BOO2");
            }
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:8: error: non-static method test(int,int,int) cannot be referenced from a static context
    //@ ensures \result <==> test(3, field, field2);
                             ^
1 error

class Main {
    //@ spec_public
    static int field;
    //@ spec_public
    static int field2;

    //@ ensures field == 9;
    //@ ensures \result <==> new Main().test(3, field, field2);
    public static boolean f() {
        int x = 3;
        field = 9;
        return new Main().test(x, field, field2);
    }

    //@ ensures \result <==> z * x <= x && x <= 3 * x && z > x;
    public boolean test(int x, int z, int r) {
        System.out.println("Testing ExSymExe18");
        int y = 3;
        x = x * r;
        z = z * x;
        r = y * x;
        if (z > x) {
            System.out.println("branch FOO1");
            return false;
        } else {
            System.out.println("branch FOO2");
            if (x > r) {
                System.out.println("branch BOO1");
            } else {
                System.out.println("branch BOO2");
            }
        }
        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:8: error: Object allocation is not permitted in specification expressions
    //@ ensures \result <==> new Main().test(3, field, field2);
                             ^
1 error

