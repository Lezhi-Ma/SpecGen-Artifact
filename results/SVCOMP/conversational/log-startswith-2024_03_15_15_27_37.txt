public class startswith {
  /*@ requires request != null; 
    @ requires (\forall int i; 0 <= i && i < request.length(); (int)Character.MIN_VALUE <= (int)request.charAt(i) && (int)request.charAt(i) <= (int)Character.MAX_VALUE);
    @ ensures \result <==> !(request.equals("") && argsEnv[0].equals("GOTCHA"));
    @*/
  public boolean doPost(String request) throws IOException {
    String param = request;

    String[] argsEnv = {param};

    if (param.equals("") && argsEnv[0].equals("GOTCHA")) {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/startswith.java:6: error: cannot find symbol
  public boolean doPost(String request) throws IOException {
                                               ^
  symbol:   class IOException
  location: class startswith
/home/max/Documents/JMLGPT/tmp/startswith.java:4: error: cannot find symbol
    @ ensures \result <==> !(request.equals("") && argsEnv[0].equals("GOTCHA"));
                                                   ^
  symbol:   variable argsEnv
  location: class startswith
2 errors

public class startswith {
  /*@ requires request != null; 
    @ requires (\forall int i; 0 <= i && i < request.length(); (int)Character.MIN_VALUE <= (int)request.charAt(i) && (int)request.charAt(i) <= (int)Character.MAX_VALUE);
    @ ensures \result <==> !(request.equals("") && param.equals("GOTCHA"));
    @*/
  public boolean doPost(String request) {
    String param = request;

    String[] argsEnv = {param};

    if (param.equals("") && param.equals("GOTCHA")) {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/startswith.java:4: error: cannot find symbol
    @ ensures \result <==> !(request.equals("") && param.equals("GOTCHA"));
                                                   ^
  symbol:   variable param
  location: class startswith
1 error

public class startswith {
  /*@ requires request != null; 
    @ requires (\forall int i; 0 <= i && i < request.length(); (int)Character.MIN_VALUE <= (int)request.charAt(i) && (int)request.charAt(i) <= (int)Character.MAX_VALUE);
    @ ensures \result <==> !(request.equals("") && argsEnv[0].equals("GOTCHA"));
    @*/
  public boolean doPost(String request) {
    String param = request;

    String[] argsEnv = {param};

    if (param.equals("") && argsEnv[0].equals("GOTCHA")) {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/startswith.java:4: error: cannot find symbol
    @ ensures \result <==> !(request.equals("") && argsEnv[0].equals("GOTCHA"));
                                                   ^
  symbol:   variable argsEnv
  location: class startswith
1 error

public class startswith {
  /*@ requires request != null; 
    @ requires (\forall int i; 0 <= i && i < request.length(); (int)Character.MIN_VALUE <= (int)request.charAt(i) && (int)request.charAt(i) <= (int)Character.MAX_VALUE);
    @ ensures \result <==> !(request.equals("") && request.equals("GOTCHA"));
    @*/
  public boolean doPost(String request) {
    String param = request;

    String[] argsEnv = {param};

    if (param.equals("") && param.equals("GOTCHA")) {
      return false;
    }
    return true;
  }
}

