class Main {

  /*@
    requires args != null;
    ensures \result == \nothing;
  @*/
  public static void main(String[] args) {
    SNode sn = new SNode();
    SNode sn2 = sn.swap();
  }
}

class SNode {
  int elem;
  SNode next;
  static SNode head; // = new SNode(); //change is here

  /*@
    ensures head != null ==> \false;
    ensures head == null ==> \result == \this;
  @*/
  SNode swap() {
    if (head != null) {
      assert false;
      System.out.println("head is not null");
    } else {
      System.out.println("head is null");
    }
    return this;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeGetStatic.java:19: error: This backslash token is unknown: \false
    ensures head != null ==> \false;
                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeGetStatic.java:20: error: This backslash token is unknown: \this
    ensures head == null ==> \result == \this;
                                        ^
2 errors

class Main {

  /*@
    requires args != null;
    ensures \result == \nothing;
  @*/
  public static void main(String[] args) {
    SNode sn = new SNode();
    SNode sn2 = sn.swap();
  }
}

class SNode {
  int elem;
  SNode next;
  static SNode head; // = new SNode(); //change is here

  /*@
    ensures head != null ==> false;
    ensures head == null ==> \result == this;
  @*/
  SNode swap() {
    if (head != null) {
      assert false;
      System.out.println("head is not null");
    } else {
      System.out.println("head is null");
    }
    return this;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeGetStatic.java:5: error: A \result expression may not be used in the specification of a method that returns void
    ensures \result == \nothing;
             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeGetStatic.java:5: error: No operator for <any> == none
    ensures \result == \nothing;
                    ^
2 errors

class Main {

  /*@
    requires args != null;
    ensures true;
  @*/
  public static void main(String[] args) {
    SNode sn = new SNode();
    SNode sn2 = sn.swap();
  }
}

class SNode {
  int elem;
  SNode next;
  static SNode head; // = new SNode(); //change is here

  /*@
    ensures head != null ==> false;
    ensures head == null ==> \result == this;
  @*/
  SNode swap() {
    if (head != null) {
      assert false;
      System.out.println("head is not null");
    } else {
      System.out.println("head is null");
    }
    return this;
  }
}
