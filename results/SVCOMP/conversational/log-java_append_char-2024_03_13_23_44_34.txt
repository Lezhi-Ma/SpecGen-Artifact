class Main {
    //@ requires true;
    //@ ensures \result == true ==> \result == tmp.equals("diffblue");
    //@ ensures \result == false ==> \result == !tmp.equals("diffblue");
    public static boolean f(boolean b) {
        char[] diff = {'d', 'i', 'f', 'f'};
        char[] blue = {'b', 'l', 'u', 'e'};

        StringBuilder buffer = new StringBuilder();

        buffer.append(diff).append(blue);

        String tmp = buffer.toString();
        if (b) return (tmp.equals("diffblue"));
        else return (!tmp.equals("diffblue"));
    }
}
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: cannot find symbol
    //@ ensures \result == true ==> \result == tmp.equals("diffblue");
                                               ^
  symbol:   variable tmp
  location: class Main
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: cannot find symbol
    //@ ensures \result == false ==> \result == !tmp.equals("diffblue");
                                                 ^
  symbol:   variable tmp
  location: class Main
2 errors

class Main {
    //@ requires true;
    //@ ensures \result == true ==> \result == buffer.toString().equals("diffblue");
    //@ ensures \result == false ==> \result == !buffer.toString().equals("diffblue");
    public static boolean f(boolean b) {
        char[] diff = {'d', 'i', 'f', 'f'};
        char[] blue = {'b', 'l', 'u', 'e'};

        StringBuilder buffer = new StringBuilder();

        buffer.append(diff).append(blue);

        if (b) return (buffer.toString().equals("diffblue"));
        else return (!buffer.toString().equals("diffblue"));
    }
}
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: cannot find symbol
    //@ ensures \result == true ==> \result == buffer.toString().equals("diffblue");
                                               ^
  symbol:   variable buffer
  location: class Main
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: cannot find symbol
    //@ ensures \result == false ==> \result == !buffer.toString().equals("diffblue");
                                                 ^
  symbol:   variable buffer
  location: class Main
2 errors

class Main {
    //@ requires true;
    //@ ensures \result == true ==> \result == new String(buffer).equals("diffblue");
    //@ ensures \result == false ==> \result == !new String(buffer).equals("diffblue");
    public static boolean f(boolean b) {
        char[] diff = {'d', 'i', 'f', 'f'};
        char[] blue = {'b', 'l', 'u', 'e'};

        StringBuilder buffer = new StringBuilder();

        buffer.append(diff).append(blue);

        if (b) return (new String(buffer).equals("diffblue"));
        else return (!new String(buffer).equals("diffblue"));
    }
}
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: cannot find symbol
    //@ ensures \result == true ==> \result == new String(buffer).equals("diffblue");
                                                          ^
  symbol:   variable buffer
  location: class Main
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == true ==> \result == new String(buffer).equals("diffblue");
                                               ^
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: cannot find symbol
    //@ ensures \result == false ==> \result == !new String(buffer).equals("diffblue");
                                                            ^
  symbol:   variable buffer
  location: class Main
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == false ==> \result == !new String(buffer).equals("diffblue");
                                                 ^
4 errors

class Main {
    //@ requires true;
    //@ ensures \result == true ==> \result == new String(diff).concat(new String(blue)).equals("diffblue");
    //@ ensures \result == false ==> \result == !new String(diff).concat(new String(blue)).equals("diffblue");
    public static boolean f(boolean b) {
        char[] diff = {'d', 'i', 'f', 'f'};
        char[] blue = {'b', 'l', 'u', 'e'};

        StringBuilder buffer = new StringBuilder();

        buffer.append(diff).append(blue);

        if (b) return (new String(diff).concat(new String(blue)).equals("diffblue"));
        else return (!new String(diff).concat(new String(blue)).equals("diffblue"));
    }
}
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: cannot find symbol
    //@ ensures \result == true ==> \result == new String(diff).concat(new String(blue)).equals("diffblue");
                                                                                  ^
  symbol:   variable blue
  location: class Main
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == true ==> \result == new String(diff).concat(new String(blue)).equals("diffblue");
                                                                       ^
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: cannot find symbol
    //@ ensures \result == true ==> \result == new String(diff).concat(new String(blue)).equals("diffblue");
                                                          ^
  symbol:   variable diff
  location: class Main
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == true ==> \result == new String(diff).concat(new String(blue)).equals("diffblue");
                                               ^
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: cannot find symbol
    //@ ensures \result == false ==> \result == !new String(diff).concat(new String(blue)).equals("diffblue");
                                                                                    ^
  symbol:   variable blue
  location: class Main
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == false ==> \result == !new String(diff).concat(new String(blue)).equals("diffblue");
                                                                         ^
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: cannot find symbol
    //@ ensures \result == false ==> \result == !new String(diff).concat(new String(blue)).equals("diffblue");
                                                            ^
  symbol:   variable diff
  location: class Main
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == false ==> \result == !new String(diff).concat(new String(blue)).equals("diffblue");
                                                 ^
8 errors

class Main {
    //@ requires true;
    //@ ensures \result == true ==> \result == new String(new char[]{'d', 'i', 'f', 'f'}).concat(new String(new char[]{'b', 'l', 'u', 'e'})).equals("diffblue");
    //@ ensures \result == false ==> \result == !new String(new char[]{'d', 'i', 'f', 'f'}).concat(new String(new char[]{'b', 'l', 'u', 'e'})).equals("diffblue");
    public static boolean f(boolean b) {
        char[] diff = {'d', 'i', 'f', 'f'};
        char[] blue = {'b', 'l', 'u', 'e'};

        StringBuilder buffer = new StringBuilder();

        buffer.append(diff).append(blue);

        if (b) return (new String(new char[]{'d', 'i', 'f', 'f'}).concat(new String(new char[]{'b', 'l', 'u', 'e'})).equals("diffblue"));
        else return (!new String(new char[]{'d', 'i', 'f', 'f'}).concat(new String(new char[]{'b', 'l', 'u', 'e'})).equals("diffblue"));
    }
}
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == true ==> \result == new String(new char[]{'d', 'i', 'f', 'f'}).concat(new String(new char[]{'b', 'l', 'u', 'e'})).equals("diffblue");
                                                                                                 ^
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == true ==> \result == new String(new char[]{'d', 'i', 'f', 'f'}).concat(new String(new char[]{'b', 'l', 'u', 'e'})).equals("diffblue");
                                               ^
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == false ==> \result == !new String(new char[]{'d', 'i', 'f', 'f'}).concat(new String(new char[]{'b', 'l', 'u', 'e'})).equals("diffblue");
                                                                                                   ^
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == false ==> \result == !new String(new char[]{'d', 'i', 'f', 'f'}).concat(new String(new char[]{'b', 'l', 'u', 'e'})).equals("diffblue");
                                                 ^
4 errors

class Main {
    //@ requires true;
    //@ ensures \result == true ==> \result == new String(new char[]{'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'}).equals("diffblue");
    //@ ensures \result == false ==> \result == !new String(new char[]{'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'}).equals("diffblue");
    public static boolean f(boolean b) {
        char[] diff = {'d', 'i', 'f', 'f'};
        char[] blue = {'b', 'l', 'u', 'e'};

        StringBuilder buffer = new StringBuilder();

        buffer.append(diff).append(blue);

        if (b) return (new String(new char[]{'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'}).equals("diffblue"));
        else return (!new String(new char[]{'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'}).equals("diffblue"));
    }
}
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == true ==> \result == new String(new char[]{'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'}).equals("diffblue");
                                               ^
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == false ==> \result == !new String(new char[]{'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'}).equals("diffblue");
                                                 ^
2 errors

class Main {
    //@ requires true;
    //@ ensures \result == true ==> \result == tmp.equals("diffblue");
    //@ ensures \result == false ==> \result == !tmp.equals("diffblue");
    public static boolean f(boolean b) {
        char[] diff = {'d', 'i', 'f', 'f'};
        char[] blue = {'b', 'l', 'u', 'e'};

        StringBuilder buffer = new StringBuilder();

        buffer.append(diff).append(blue);

        String tmp = buffer.toString();
        if (b) return (tmp.equals("diffblue"));
        else return (!tmp.equals("diffblue"));
    }
}
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: cannot find symbol
    //@ ensures \result == true ==> \result == tmp.equals("diffblue");
                                               ^
  symbol:   variable tmp
  location: class Main
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: cannot find symbol
    //@ ensures \result == false ==> \result == !tmp.equals("diffblue");
                                                 ^
  symbol:   variable tmp
  location: class Main
2 errors

class Main {
    //@ requires true;
    //@ ensures \result == true ==> \result == buffer.toString().equals("diffblue");
    //@ ensures \result == false ==> \result == !buffer.toString().equals("diffblue");
    public static boolean f(boolean b) {
        char[] diff = {'d', 'i', 'f', 'f'};
        char[] blue = {'b', 'l', 'u', 'e'};

        StringBuilder buffer = new StringBuilder();

        buffer.append(diff).append(blue);

        if (b) return (buffer.toString().equals("diffblue"));
        else return (!buffer.toString().equals("diffblue"));
    }
}
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: cannot find symbol
    //@ ensures \result == true ==> \result == buffer.toString().equals("diffblue");
                                               ^
  symbol:   variable buffer
  location: class Main
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: cannot find symbol
    //@ ensures \result == false ==> \result == !buffer.toString().equals("diffblue");
                                                 ^
  symbol:   variable buffer
  location: class Main
2 errors

class Main {
    //@ requires true;
    //@ ensures \result == true ==> \result == new String(buffer).equals("diffblue");
    //@ ensures \result == false ==> \result == !new String(buffer).equals("diffblue");
    public static boolean f(boolean b) {
        char[] diff = {'d', 'i', 'f', 'f'};
        char[] blue = {'b', 'l', 'u', 'e'};

        StringBuilder buffer = new StringBuilder();

        buffer.append(diff).append(blue);

        if (b) return (new String(buffer).equals("diffblue"));
        else return (!new String(buffer).equals("diffblue"));
    }
}
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: cannot find symbol
    //@ ensures \result == true ==> \result == new String(buffer).equals("diffblue");
                                                          ^
  symbol:   variable buffer
  location: class Main
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == true ==> \result == new String(buffer).equals("diffblue");
                                               ^
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: cannot find symbol
    //@ ensures \result == false ==> \result == !new String(buffer).equals("diffblue");
                                                            ^
  symbol:   variable buffer
  location: class Main
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == false ==> \result == !new String(buffer).equals("diffblue");
                                                 ^
4 errors

class Main {
    //@ requires true;
    //@ ensures \result == true ==> \result == new String(new char[]{'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'}).equals("diffblue");
    //@ ensures \result == false ==> \result == !new String(new char[]{'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'}).equals("diffblue");
    public static boolean f(boolean b) {
        char[] diff = {'d', 'i', 'f', 'f'};
        char[] blue = {'b', 'l', 'u', 'e'};

        StringBuilder buffer = new StringBuilder();

        buffer.append(diff).append(blue);

        if (b) return (new String(new char[]{'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'}).equals("diffblue"));
        else return (!new String(new char[]{'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'}).equals("diffblue"));
    }
}
/home/max/Documents/JMLGPT/tmp/java_append_char.java:3: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == true ==> \result == new String(new char[]{'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'}).equals("diffblue");
                                               ^
/home/max/Documents/JMLGPT/tmp/java_append_char.java:4: error: Object allocation is not permitted in specification expressions
    //@ ensures \result == false ==> \result == !new String(new char[]{'d', 'i', 'f', 'f', 'b', 'l', 'u', 'e'}).equals("diffblue");
                                                 ^
2 errors

