class assert3 {
    //@ ensures true;
    public static void func() {
        int i = Verifier.nondetInt();

        if (i >= 1000)
            if (!(i > 1000))
                assert false;
    }
}
/home/max/Documents/JMLGPT/tmp/assert3.java:4: error: cannot find symbol
        int i = Verifier.nondetInt();
                ^
  symbol:   variable Verifier
  location: class assert3
1 error

class assert3 {
    //@ ensures true;
    public static void func() {
        int i = (int) (Math.random() * Integer.MAX_VALUE);

        if (i >= 1000)
            if (!(i > 1000))
                assert false;
    }
}
/home/max/Documents/JMLGPT/tmp/assert3.java:8: verify: The prover cannot establish an assertion (Assert) in method func
                assert false;
                ^
1 verification failure

class assert3 {
    //@ ensures true;
    public static void func() {
        int i = (int) (Math.random() * Integer.MAX_VALUE);

        if (i >= 1000)
            if (!(i > 1000))
                assert false;
    }
}
/home/max/Documents/JMLGPT/tmp/assert3.java:8: verify: The prover cannot establish an assertion (Assert) in method func
                assert false;
                ^
1 verification failure

class assert3 {
    //@ ensures true;
    public static void func() {
        int i = (int) (Math.random() * Integer.MAX_VALUE);

        if (i >= 1000 && i <= 1000) {
            assert false;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/assert3.java:7: verify: The prover cannot establish an assertion (Assert) in method func
            assert false;
            ^
1 verification failure

class assert3 {
    //@ ensures true;
    public static void func() {
        int i = (int) (Math.random() * Integer.MAX_VALUE);

        if (i >= 1000) {
            assert i > 1000;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/assert3.java:7: verify: The prover cannot establish an assertion (Assert) in method func
            assert i > 1000;
            ^
1 verification failure

class assert3 {
    //@ ensures true;
    public static void func() {
        int i = (int) (Math.random() * Integer.MAX_VALUE);

        if (i >= 1000) {
            assert i == 1000;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/assert3.java:7: verify: The prover cannot establish an assertion (Assert) in method func
            assert i == 1000;
            ^
1 verification failure

class assert3 {
    //@ ensures true;
    public static void func() {
        int i = (int) (Math.random() * Integer.MAX_VALUE);

        if (i >= 1000) {
            assert i != 1000;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/assert3.java:7: verify: The prover cannot establish an assertion (Assert) in method func
            assert i != 1000;
            ^
1 verification failure

class assert3 {
    //@ ensures true;
    public static void func() {
        int i = (int) (Math.random() * Integer.MAX_VALUE);

        if (i >= 1000) {
            assert i >= 1001;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/assert3.java:7: verify: The prover cannot establish an assertion (Assert) in method func
            assert i >= 1001;
            ^
1 verification failure

class assert3 {
    //@ ensures true;
    public static void func() {
        int i = (int) (Math.random() * Integer.MAX_VALUE);

        if (i >= 1000) {
            assert i > 1000;
        }
    }
}
/home/max/Documents/JMLGPT/tmp/assert3.java:7: verify: The prover cannot establish an assertion (Assert) in method func
            assert i > 1000;
            ^
1 verification failure

class assert3 {
    //@ ensures true;
    public static void func() {
        int i = (int) (Math.random() * Integer.MAX_VALUE);

        if (i >= 1000) {
            // No assertion in this version
        }
    }
}

