import java.util.Random;

class assert2 {
    //@ ensures \result >= 0;
    //@ ensures \result < Integer.MAX_VALUE;
    public static int nextInt() {
        return new Random().nextInt();
    }

    //@ requires i >= 0;
    //@ requires i < Integer.MAX_VALUE;
    //@ requires i >= 1000;
    //@ ensures i > 1000 ==> \result == true;
    //@ ensures i <= 1000 ==> \result == true;
    public static boolean checkAssertion(int i) {
        return i > 1000;
    }

    //@ ensures checkAssertion(\result) ==> \result > 1000;
    public static void main() {
        int i = nextInt();

        if (i >= 1000) assert checkAssertion(i) : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:19: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures checkAssertion(\result) ==> \result > 1000;
                                ^
/home/max/Documents/JMLGPT/tmp/assert2.java:19: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures checkAssertion(\result) ==> \result > 1000;
                                             ^
2 errors

import java.util.Random;

class assert2 {
    //@ ensures \result >= 0;
    //@ ensures \result < Integer.MAX_VALUE;
    public static int nextInt() {
        return new Random().nextInt();
    }

    //@ requires i >= 0;
    //@ requires i < Integer.MAX_VALUE;
    //@ requires i >= 1000;
    //@ ensures \result == (i > 1000);
    public static boolean checkAssertion(int i) {
        return i > 1000;
    }

    //@ ensures checkAssertion(i) ==> i > 1000;
    public static void main() {
        int i = nextInt();

        if (i >= 1000) assert checkAssertion(i) : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:18: error: cannot find symbol
    //@ ensures checkAssertion(i) ==> i > 1000;
                               ^
  symbol:   variable i
  location: class assert2
/home/max/Documents/JMLGPT/tmp/assert2.java:18: error: cannot find symbol
    //@ ensures checkAssertion(i) ==> i > 1000;
                                      ^
  symbol:   variable i
  location: class assert2
2 errors

import java.util.Random;

class assert2 {
    //@ ensures \result >= 0;
    //@ ensures \result < Integer.MAX_VALUE;
    public static int nextInt() {
        return new Random().nextInt();
    }

    //@ requires i >= 0;
    //@ requires i < Integer.MAX_VALUE;
    //@ requires i >= 1000;
    //@ ensures \result == (i > 1000);
    public static boolean checkAssertion(int i) {
        return i > 1000;
    }

    //@ ensures checkAssertion(\old(i)) ==> \result > 1000;
    public static void main() {
        int i = nextInt();

        if (i >= 1000) assert checkAssertion(i) : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:18: error: cannot find symbol
    //@ ensures checkAssertion(\old(i)) ==> \result > 1000;
                                    ^
  symbol:   variable i
  location: class assert2
/home/max/Documents/JMLGPT/tmp/assert2.java:18: error: A \result expression may not be used in the specification of a method that returns void
    //@ ensures checkAssertion(\old(i)) ==> \result > 1000;
                                             ^
2 errors

import java.util.Random;

class assert2 {
    //@ ensures \result >= 0;
    //@ ensures \result < Integer.MAX_VALUE;
    public static int nextInt() {
        return new Random().nextInt();
    }

    //@ requires i >= 0;
    //@ requires i < Integer.MAX_VALUE;
    //@ requires i >= 1000;
    //@ ensures \result == (i > 1000);
    public static boolean checkAssertion(int i) {
        return i > 1000;
    }

    //@ ensures checkAssertion(i) ==> i > 1000;
    public static void main() {
        int i = nextInt();

        if (i >= 1000) assert checkAssertion(i) : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:18: error: cannot find symbol
    //@ ensures checkAssertion(i) ==> i > 1000;
                               ^
  symbol:   variable i
  location: class assert2
/home/max/Documents/JMLGPT/tmp/assert2.java:18: error: cannot find symbol
    //@ ensures checkAssertion(i) ==> i > 1000;
                                      ^
  symbol:   variable i
  location: class assert2
2 errors

import java.util.Random;

class assert2 {
    //@ ensures \result >= 0;
    //@ ensures \result < Integer.MAX_VALUE;
    public static int nextInt() {
        return new Random().nextInt();
    }

    //@ requires i >= 0;
    //@ requires i < Integer.MAX_VALUE;
    //@ requires i >= 1000;
    //@ ensures \result == (i > 1000);
    public static boolean checkAssertion(int i) {
        return i > 1000;
    }

    //@ ensures checkAssertion(i) ==> i > 1000;
    public static void main() {
        int i = nextInt();

        if (i >= 1000) assert checkAssertion(i) : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:18: error: cannot find symbol
    //@ ensures checkAssertion(i) ==> i > 1000;
                               ^
  symbol:   variable i
  location: class assert2
/home/max/Documents/JMLGPT/tmp/assert2.java:18: error: cannot find symbol
    //@ ensures checkAssertion(i) ==> i > 1000;
                                      ^
  symbol:   variable i
  location: class assert2
2 errors

import java.util.Random;

class assert2 {
    //@ ensures \result >= 0;
    //@ ensures \result < Integer.MAX_VALUE;
    public static int nextInt() {
        return new Random().nextInt();
    }

    //@ requires i >= 0;
    //@ requires i < Integer.MAX_VALUE;
    //@ requires i >= 1000;
    //@ ensures \result == (i > 1000);
    public static boolean checkAssertion(int i) {
        return i > 1000;
    }

    //@ ensures checkAssertion(\old(i)) ==> \old(i) > 1000;
    public static void main() {
        int i = nextInt();

        if (i >= 1000) assert checkAssertion(i) : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:18: error: cannot find symbol
    //@ ensures checkAssertion(\old(i)) ==> \old(i) > 1000;
                                    ^
  symbol:   variable i
  location: class assert2
/home/max/Documents/JMLGPT/tmp/assert2.java:18: error: cannot find symbol
    //@ ensures checkAssertion(\old(i)) ==> \old(i) > 1000;
                                                 ^
  symbol:   variable i
  location: class assert2
2 errors

import java.util.Random;

class assert2 {
    //@ ensures \result >= 0;
    //@ ensures \result < Integer.MAX_VALUE;
    public static int nextInt() {
        return new Random().nextInt();
    }

    //@ requires i >= 0;
    //@ requires i < Integer.MAX_VALUE;
    //@ requires i >= 1000;
    //@ ensures \result == (i > 1000);
    public static boolean checkAssertion(int i) {
        return i > 1000;
    }

    //@ ensures checkAssertion(i) ==> i > 1000;
    public static void main() {
        int i = nextInt();

        if (i >= 1000) assert checkAssertion(i) : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:18: error: cannot find symbol
    //@ ensures checkAssertion(i) ==> i > 1000;
                               ^
  symbol:   variable i
  location: class assert2
/home/max/Documents/JMLGPT/tmp/assert2.java:18: error: cannot find symbol
    //@ ensures checkAssertion(i) ==> i > 1000;
                                      ^
  symbol:   variable i
  location: class assert2
2 errors

import java.util.Random;

class assert2 {
    //@ ensures \result >= 0;
    //@ ensures \result < Integer.MAX_VALUE;
    public static int nextInt() {
        return new Random().nextInt();
    }

    //@ requires i >= 0;
    //@ requires i < Integer.MAX_VALUE;
    //@ requires i >= 1000;
    //@ ensures \result == (i > 1000);
    public static boolean checkAssertion(int i) {
        return i > 1000;
    }

    //@ ensures checkAssertion(i) ==> i > 1000;
    public static void main() {
        int i = nextInt();

        if (i >= 1000) assert checkAssertion(i) : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:18: error: cannot find symbol
    //@ ensures checkAssertion(i) ==> i > 1000;
                               ^
  symbol:   variable i
  location: class assert2
/home/max/Documents/JMLGPT/tmp/assert2.java:18: error: cannot find symbol
    //@ ensures checkAssertion(i) ==> i > 1000;
                                      ^
  symbol:   variable i
  location: class assert2
2 errors

import java.util.Random;

class assert2 {
    //@ ensures \result >= 0;
    //@ ensures \result < Integer.MAX_VALUE;
    public static int nextInt() {
        return new Random().nextInt();
    }

    //@ requires i >= 0;
    //@ requires i < Integer.MAX_VALUE;
    //@ requires i >= 1000;
    //@ ensures \result == (i > 1000);
    public static boolean checkAssertion(int i) {
        return i > 1000;
    }

    //@ ensures checkAssertion(i) ==> i > 1000;
    public static void main() {
        int i = nextInt();

        if (i >= 1000) assert checkAssertion(i) : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:18: error: cannot find symbol
    //@ ensures checkAssertion(i) ==> i > 1000;
                               ^
  symbol:   variable i
  location: class assert2
/home/max/Documents/JMLGPT/tmp/assert2.java:18: error: cannot find symbol
    //@ ensures checkAssertion(i) ==> i > 1000;
                                      ^
  symbol:   variable i
  location: class assert2
2 errors

import java.util.Random;

class assert2 {
    //@ ensures \result >= 0;
    //@ ensures \result < Integer.MAX_VALUE;
    public static int nextInt() {
        return new Random().nextInt();
    }

    //@ requires i >= 0;
    //@ requires i < Integer.MAX_VALUE;
    //@ requires i >= 1000;
    //@ ensures \result == (i > 1000);
    public static boolean checkAssertion(int i) {
        return i > 1000;
    }

    //@ ensures checkAssertion(i) ==> i > 1000;
    public static void main() {
        int i = nextInt();

        if (i >= 1000) assert checkAssertion(i) : "i is greater 1000";
    }
}
/home/max/Documents/JMLGPT/tmp/assert2.java:18: error: cannot find symbol
    //@ ensures checkAssertion(i) ==> i > 1000;
                               ^
  symbol:   variable i
  location: class assert2
/home/max/Documents/JMLGPT/tmp/assert2.java:18: error: cannot find symbol
    //@ ensures checkAssertion(i) ==> i > 1000;
                                      ^
  symbol:   variable i
  location: class assert2
2 errors

