class SQLException extends Exception {
}

class Statement {
  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void executeQuery(String s) {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }
}

public class Connection {
  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void prepareStatement(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  //@ ensures true;
  public void close() throws SQLException {}

  //@ ensures \result != null;
  public Statement createStatement() {
    return new Statement();
  }
}
/home/max/Documents/JMLGPT/tmp/Connection.java:10: verify: The prover cannot establish an assertion (Assert) in method execute
      assert false;
      ^
/home/max/Documents/JMLGPT/tmp/Connection.java:28: verify: The prover cannot establish an assertion (Assert) in method executeQuery
      assert false;
      ^
/home/max/Documents/JMLGPT/tmp/Connection.java:19: verify: The prover cannot establish an assertion (Assert) in method executeUpdate
      assert false;
      ^
/home/max/Documents/JMLGPT/tmp/Connection.java:39: verify: The prover cannot establish an assertion (Assert) in method prepareStatement
      assert false;
      ^
4 verification failures

class SQLException extends Exception {
}

class Statement {
  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void executeQuery(String s) {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }
}

public class Connection {
  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void prepareStatement(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ ensures true;
  public void close() throws SQLException {}

  //@ ensures \result != null;
  public Statement createStatement() {
    return new Statement();
  }
}
/home/max/Documents/JMLGPT/tmp/Connection.java:28: error: unreported exception SQLException; must be caught or declared to be thrown
      throw new SQLException();
      ^
1 error

class SQLException extends Exception {
}

class Statement {
  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void executeQuery(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }
}

public class Connection {
  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void prepareStatement(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ ensures true;
  public void close() throws SQLException {}

  //@ ensures \result != null;
  public Statement createStatement() {
    return new Statement();
  }
}

