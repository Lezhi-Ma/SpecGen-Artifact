public class Primes {

  //@ requires m >= 0;
  //@ ensures \result >= 0;
  //@ ensures \result == n * m;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m >= 0 && n >= 0;
  //@ ensures \result == 1 <==> n % m == 0;
  //@ ensures \result == 0 <==> n % m != 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0 && m >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:39: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:40: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:46: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:47: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
4 errors

public class Primes {

  //@ requires m >= 0;
  //@ ensures \result >= 0;
  //@ ensures \result == n * m;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m >= 0 && n >= 0;
  //@ ensures \result == 1 <==> n % m == 0;
  //@ ensures \result == 0 <==> n % m != 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0 && m >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:39: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:40: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:46: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:47: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
4 errors

public class Primes {

  //@ requires m >= 0;
  //@ ensures \result >= 0;
  //@ ensures \result == n * m;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m >= 0 && n >= 0;
  //@ ensures \result == 1 <==> n % m == 0;
  //@ ensures \result == 0 <==> n % m != 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0 && m >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:39: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:40: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:46: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:47: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
4 errors

public class Primes {

  //@ requires m >= 0;
  //@ ensures \result >= 0;
  //@ ensures \result == n * m;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m >= 0 && n >= 0;
  //@ ensures \result == 1 <==> n % m == 0;
  //@ ensures \result == 0 <==> n % m != 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0 && m >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:39: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:40: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:46: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:47: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
4 errors

public class Primes {

  //@ requires m >= 0;
  //@ ensures \result >= 0;
  //@ ensures \result == n * m;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m >= 0 && n >= 0;
  //@ ensures \result == 1 <==> n % m == 0;
  //@ ensures \result == 0 <==> n % m != 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0 && m >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:39: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:40: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:46: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:47: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
4 errors

public class Primes {

  //@ requires m >= 0;
  //@ ensures \result >= 0;
  //@ ensures \result == n * m;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m >= 0 && n >= 0;
  //@ ensures \result == 1 <==> n % m == 0;
  //@ ensures \result == 0 <==> n % m != 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0 && m >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:39: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:40: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:46: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:47: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
4 errors

public class Primes {

  //@ requires m >= 0;
  //@ ensures \result >= 0;
  //@ ensures \result == n * m;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m >= 0 && n >= 0;
  //@ ensures \result == 1 <==> n % m == 0;
  //@ ensures \result == 0 <==> n % m != 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0 && m >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:39: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:40: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:46: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:47: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
4 errors

public class Primes {

  //@ requires m >= 0;
  //@ ensures \result >= 0;
  //@ ensures \result == n * m;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m >= 0 && n >= 0;
  //@ ensures \result == 1 <==> n % m == 0;
  //@ ensures \result == 0 <==> n % m != 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0 && m >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:39: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:40: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:46: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:47: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
4 errors

public class Primes {

  //@ requires m >= 0;
  //@ ensures \result >= 0;
  //@ ensures \result == n * m;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m >= 0 && n >= 0;
  //@ ensures \result == 1 <==> n % m == 0;
  //@ ensures \result == 0 <==> n % m != 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0 && m >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:39: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:40: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:46: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:47: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
4 errors

public class Primes {

  //@ requires m >= 0;
  //@ ensures \result >= 0;
  //@ ensures \result == n * m;
  static int mult(int n, int m) {
    if (m < 0) {
      return mult(n, -m);
    }
    if (m == 0) {
      return 0;
    }
    if (m == 1) {
      return 1;
    }
    return n + mult(n, m - 1);
  }

  //@ requires m >= 0 && n >= 0;
  //@ ensures \result == 1 <==> n % m == 0;
  //@ ensures \result == 0 <==> n % m != 0;
  static int multiple_of(int n, int m) {
    if (m < 0) {
      return multiple_of(n, -m);
    }
    if (n < 0) {
      return multiple_of(-n, m); // false
    }
    if (m == 0) {
      return 0; // false
    }
    if (n == 0) {
      return 1; // true
    }
    return multiple_of(n - m, m);
  }

  //@ requires n >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime(int n) {
    return is_prime_(n, n - 1);
  }

  //@ requires n >= 0 && m >= 0;
  //@ ensures \result == 1 <==> n is prime;
  //@ ensures \result == 0 <==> n is not prime;
  static int is_prime_(int n, int m) {
    if (n <= 1) {
      return 0; // false
    } else if (n == 2) {
      return 1; // true
    } else {
      if (m <= 1) {
        return 1; // true
      } else {
        if (multiple_of(n, m) == 0) {
          return 0; // false
        }
        return is_prime_(n, m - 1);
      }
    }
  }
  
}
/home/max/Documents/JMLGPT/tmp/Primes.java:39: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:40: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:46: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 1 <==> n is prime;
                                  ^
/home/max/Documents/JMLGPT/tmp/Primes.java:47: error: Incorrectly formed or terminated ensures statement near here
  //@ ensures \result == 0 <==> n is not prime;
                                  ^
4 errors

