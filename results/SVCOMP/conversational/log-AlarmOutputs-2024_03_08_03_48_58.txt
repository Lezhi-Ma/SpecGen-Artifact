import java.util.Random;

final class Verifier {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondetInt() {
    return new Random().nextInt();
  }
}

public class AlarmOutputs {
  public int isAudioDisabled = Verifier.nondetInt();
  public int notificationMessage = Verifier.nondetInt();
  public int audioNotificationCommand = Verifier.nondetInt();
  public int highestLevelAlarm = Verifier.nondetInt();
  public int logMessageId = Verifier.nondetInt();
}
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:11: verify: The prover cannot establish an assertion (Assignable) in method AlarmOutputs: \everything
  public int isAudioDisabled = Verifier.nondetInt();
                                                 ^
1 verification failure

import java.util.Random;

final class Verifier {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondetInt() {
    return new Random().nextInt();
  }
}

public class AlarmOutputs {
  //@ public model instance int isAudioDisabled;
  //@ public model instance int notificationMessage;
  //@ public model instance int audioNotificationCommand;
  //@ public model instance int highestLevelAlarm;
  //@ public model instance int logMessageId;
  
  public AlarmOutputs() {
    isAudioDisabled = Verifier.nondetInt();
    notificationMessage = Verifier.nondetInt();
    audioNotificationCommand = Verifier.nondetInt();
    highestLevelAlarm = Verifier.nondetInt();
    logMessageId = Verifier.nondetInt();
  }
}
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:18: error: cannot find symbol
    isAudioDisabled = Verifier.nondetInt();
    ^
  symbol:   variable isAudioDisabled
  location: class AlarmOutputs
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:19: error: cannot find symbol
    notificationMessage = Verifier.nondetInt();
    ^
  symbol:   variable notificationMessage
  location: class AlarmOutputs
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:20: error: cannot find symbol
    audioNotificationCommand = Verifier.nondetInt();
    ^
  symbol:   variable audioNotificationCommand
  location: class AlarmOutputs
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:21: error: cannot find symbol
    highestLevelAlarm = Verifier.nondetInt();
    ^
  symbol:   variable highestLevelAlarm
  location: class AlarmOutputs
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22: error: cannot find symbol
    logMessageId = Verifier.nondetInt();
    ^
  symbol:   variable logMessageId
  location: class AlarmOutputs
5 errors

import java.util.Random;

final class Verifier {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondetInt() {
    return new Random().nextInt();
  }
}

public class AlarmOutputs {
  public int isAudioDisabled;
  public int notificationMessage;
  public int audioNotificationCommand;
  public int highestLevelAlarm;
  public int logMessageId;
  
  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
  //@ ensures notificationMessage >= Integer.MIN_VALUE && notificationMessage <= Integer.MAX_VALUE;
  //@ ensures audioNotificationCommand >= Integer.MIN_VALUE && audioNotificationCommand <= Integer.MAX_VALUE;
  //@ ensures highestLevelAlarm >= Integer.MIN_VALUE && highestLevelAlarm <= Integer.MAX_VALUE;
  //@ ensures logMessageId >= Integer.MIN_VALUE && logMessageId <= Integer.MAX_VALUE;
  public AlarmOutputs() {
    isAudioDisabled = Verifier.nondetInt();
    notificationMessage = Verifier.nondetInt();
    audioNotificationCommand = Verifier.nondetInt();
    highestLevelAlarm = Verifier.nondetInt();
    logMessageId = Verifier.nondetInt();
  }
}
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17:) in method AlarmOutputs
  public AlarmOutputs() {
         ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22:
  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
      ^
2 verification failures

import java.util.Random;

final class Verifier {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondetInt() {
    return new Random().nextInt();
  }
}

public class AlarmOutputs {
  public int isAudioDisabled;
  public int notificationMessage;
  public int audioNotificationCommand;
  public int highestLevelAlarm;
  public int logMessageId;
  
  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
  //@ ensures notificationMessage >= Integer.MIN_VALUE && notificationMessage <= Integer.MAX_VALUE;
  //@ ensures audioNotificationCommand >= Integer.MIN_VALUE && audioNotificationCommand <= Integer.MAX_VALUE;
  //@ ensures highestLevelAlarm >= Integer.MIN_VALUE && highestLevelAlarm <= Integer.MAX_VALUE;
  //@ ensures logMessageId >= Integer.MIN_VALUE && logMessageId <= Integer.MAX_VALUE;
  public AlarmOutputs() {
    isAudioDisabled = Verifier.nondetInt();
    notificationMessage = Verifier.nondetInt();
    audioNotificationCommand = Verifier.nondetInt();
    highestLevelAlarm = Verifier.nondetInt();
    logMessageId = Verifier.nondetInt();
  }
}
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17:) in method AlarmOutputs
  public AlarmOutputs() {
         ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22:
  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
      ^
2 verification failures

import java.util.Random;

final class Verifier {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondetInt() {
    return new Random().nextInt();
  }
}

public class AlarmOutputs {
  public int isAudioDisabled;
  public int notificationMessage;
  public int audioNotificationCommand;
  public int highestLevelAlarm;
  public int logMessageId;
  
  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
  //@ ensures notificationMessage >= Integer.MIN_VALUE && notificationMessage <= Integer.MAX_VALUE;
  //@ ensures audioNotificationCommand >= Integer.MIN_VALUE && audioNotificationCommand <= Integer.MAX_VALUE;
  //@ ensures highestLevelAlarm >= Integer.MIN_VALUE && highestLevelAlarm <= Integer.MAX_VALUE;
  //@ ensures logMessageId >= Integer.MIN_VALUE && logMessageId <= Integer.MAX_VALUE;
  public AlarmOutputs() {
    isAudioDisabled = Verifier.nondetInt();
    notificationMessage = Verifier.nondetInt();
    audioNotificationCommand = Verifier.nondetInt();
    highestLevelAlarm = Verifier.nondetInt();
    logMessageId = Verifier.nondetInt();
  }
}
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17:) in method AlarmOutputs
  public AlarmOutputs() {
         ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22:
  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
      ^
2 verification failures

import java.util.Random;

final class Verifier {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondetInt() {
    return new Random().nextInt();
  }
}

public class AlarmOutputs {
  public int isAudioDisabled;
  public int notificationMessage;
  public int audioNotificationCommand;
  public int highestLevelAlarm;
  public int logMessageId;
  
  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
  //@ ensures notificationMessage >= Integer.MIN_VALUE && notificationMessage <= Integer.MAX_VALUE;
  //@ ensures audioNotificationCommand >= Integer.MIN_VALUE && audioNotificationCommand <= Integer.MAX_VALUE;
  //@ ensures highestLevelAlarm >= Integer.MIN_VALUE && highestLevelAlarm <= Integer.MAX_VALUE;
  //@ ensures logMessageId >= Integer.MIN_VALUE && logMessageId <= Integer.MAX_VALUE;
  public AlarmOutputs() {
    isAudioDisabled = Verifier.nondetInt();
    notificationMessage = Verifier.nondetInt();
    audioNotificationCommand = Verifier.nondetInt();
    highestLevelAlarm = Verifier.nondetInt();
    logMessageId = Verifier.nondetInt();
  }
}
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17:) in method AlarmOutputs
  public AlarmOutputs() {
         ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22:
  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
      ^
2 verification failures

import java.util.Random;

final class Verifier {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondetInt() {
    return new Random().nextInt();
  }
}

public class AlarmOutputs {
  public int isAudioDisabled;
  public int notificationMessage;
  public int audioNotificationCommand;
  public int highestLevelAlarm;
  public int logMessageId;
  
  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
  //@ ensures notificationMessage >= Integer.MIN_VALUE && notificationMessage <= Integer.MAX_VALUE;
  //@ ensures audioNotificationCommand >= Integer.MIN_VALUE && audioNotificationCommand <= Integer.MAX_VALUE;
  //@ ensures highestLevelAlarm >= Integer.MIN_VALUE && highestLevelAlarm <= Integer.MAX_VALUE;
  //@ ensures logMessageId >= Integer.MIN_VALUE && logMessageId <= Integer.MAX_VALUE;
  public AlarmOutputs() {
    isAudioDisabled = Verifier.nondetInt();
    notificationMessage = Verifier.nondetInt();
    audioNotificationCommand = Verifier.nondetInt();
    highestLevelAlarm = Verifier.nondetInt();
    logMessageId = Verifier.nondetInt();
  }
}
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17:) in method AlarmOutputs
  public AlarmOutputs() {
         ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22:
  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
      ^
2 verification failures

import java.util.Random;

final class Verifier {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondetInt() {
    return new Random().nextInt();
  }
}

public class AlarmOutputs {
  public int isAudioDisabled;
  public int notificationMessage;
  public int audioNotificationCommand;
  public int highestLevelAlarm;
  public int logMessageId;
  
  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
  //@ ensures notificationMessage >= Integer.MIN_VALUE && notificationMessage <= Integer.MAX_VALUE;
  //@ ensures audioNotificationCommand >= Integer.MIN_VALUE && audioNotificationCommand <= Integer.MAX_VALUE;
  //@ ensures highestLevelAlarm >= Integer.MIN_VALUE && highestLevelAlarm <= Integer.MAX_VALUE;
  //@ ensures logMessageId >= Integer.MIN_VALUE && logMessageId <= Integer.MAX_VALUE;
  public AlarmOutputs() {
    isAudioDisabled = Verifier.nondetInt();
    notificationMessage = Verifier.nondetInt();
    audioNotificationCommand = Verifier.nondetInt();
    highestLevelAlarm = Verifier.nondetInt();
    logMessageId = Verifier.nondetInt();
  }
}
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17:) in method AlarmOutputs
  public AlarmOutputs() {
         ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22:
  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
      ^
2 verification failures

import java.util.Random;

public class AlarmOutputs {
  public int isAudioDisabled;
  public int notificationMessage;
  public int audioNotificationCommand;
  public int highestLevelAlarm;
  public int logMessageId;
  
  public AlarmOutputs() {
    isAudioDisabled = new Random().nextInt();
    notificationMessage = new Random().nextInt();
    audioNotificationCommand = new Random().nextInt();
    highestLevelAlarm = new Random().nextInt();
    logMessageId = new Random().nextInt();
  }
}

