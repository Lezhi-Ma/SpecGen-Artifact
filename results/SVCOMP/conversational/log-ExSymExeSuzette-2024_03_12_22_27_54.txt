class Main {
  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result <==> method_a(x, y) > 0;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result == (x > 10 ? x : (y > 10 ? y : 0));
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires Integer.MIN_VALUE <= z && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z > 10 ? z + 1 : z - 1);
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : test(arg, 0);
                                                          ^
1 error

class Main {
  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result <==> method_a(x, y) > 0;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result == (x > 10 ? x : (y > 10 ? y : 0));
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires Integer.MIN_VALUE <= z && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z > 10 ? z + 1 : z - 1);
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : new Main().test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : new Main().test(arg, 0);
                                                          ^
1 error

class Main {
  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result <==> method_a(x, y) > 0;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result == (x > 10 ? x : (y > 10 ? y : 0));
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires Integer.MIN_VALUE <= z && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z > 10 ? z + 1 : z - 1);
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : test(arg, 0);
                                                          ^
1 error

class Main {
  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result <==> method_a(x, y) > 0;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result == (x > 10 ? x : (y > 10 ? y : 0));
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires Integer.MIN_VALUE <= z && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z > 10 ? z + 1 : z - 1);
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : new Main().test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : new Main().test(arg, 0);
                                                          ^
1 error

class Main {
  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result <==> method_a(x, y) > 0;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result == (x > 10 ? x : (y > 10 ? y : 0));
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires Integer.MIN_VALUE <= z && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z > 10 ? z + 1 : z - 1);
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : test(arg, 0);
                                                          ^
1 error

class Main {
  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result <==> method_a(x, y) > 0;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result == (x > 10 ? x : (y > 10 ? y : 0));
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires Integer.MIN_VALUE <= z && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z > 10 ? z + 1 : z - 1);
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : test(arg, 0);
                                                          ^
1 error

class Main {
  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result <==> method_a(x, y) > 0;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result == (x > 10 ? x : (y > 10 ? y : 0));
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires Integer.MIN_VALUE <= z && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z > 10 ? z + 1 : z - 1);
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : new Main().test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : new Main().test(arg, 0);
                                                          ^
1 error

class Main {
  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result <==> method_a(x, y) > 0;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result == (x > 10 ? x : (y > 10 ? y : 0));
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires Integer.MIN_VALUE <= z && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z > 10 ? z + 1 : z - 1);
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : test(arg, 0);
                                                          ^
1 error

class Main {
  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result <==> method_a(x, y) > 0;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result == (x > 10 ? x : (y > 10 ? y : 0));
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires Integer.MIN_VALUE <= z && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z > 10 ? z + 1 : z - 1);
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : new Main().test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: Object allocation is not permitted in specification expressions
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : new Main().test(arg, 0);
                                                          ^
1 error

class Main {
  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result <==> method_a(x, y) > 0;
  public boolean test(int x, int y) {

    int v = method_a(x, y);

    if (v > 0) {
      return false;
    }
    return true;
  }

  //@ requires Integer.MIN_VALUE <= x && x <= Integer.MAX_VALUE;
  //@ requires Integer.MIN_VALUE <= y && y <= Integer.MAX_VALUE;
  //@ ensures \result == (x > 10 ? x : (y > 10 ? y : 0));
  public int method_a(int x, int y) {

    if (x > 10) return x;

    if (y > 10) return y;

    return 0;
  }

  //@ requires Integer.MIN_VALUE <= z && z <= Integer.MAX_VALUE;
  //@ ensures \result == (z > 10 ? z + 1 : z - 1);
  public int method_b(int z) {

    if (z > 10) return z++;
    else return z--;
  }

  //@ requires Integer.MIN_VALUE <= arg && arg <= Integer.MAX_VALUE;
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : test(arg, 0);
  public static boolean f(int arg) {

    Main ex = new Main();
    if (arg < 0 || arg > 10) return true;
    return ex.test(arg, 0);
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeSuzette.java:36: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result <==> (arg < 0 || arg > 10) ? true : test(arg, 0);
                                                          ^
1 error

