public class calc {
    //@ requires args != null;
    //@ requires args.length >= 2;
    //@ ensures args.length < 2 ==> System.out.println("need two arguments");
    public static void fun(String[] args) {
        if (args.length < 2) {
            System.out.println("need two arguments");
            return;
        }
        new calc().do_stuff(args[0], args[1]);
    }

    //@ requires a != null && b != null;
    //@ requires \fresh(a) && \fresh(b);
    //@ requires (\forall int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
    //@ requires (\forall int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
    //@ ensures (\exists int x, int y; x == Integer.parseInt(a) && y == Integer.parseInt(b); x != y || x == y);
    void do_stuff(String a, String b) {
        try {
            int x = Integer.parseInt(a);
            int y = Integer.parseInt(b);
            assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
        } catch (java.lang.NumberFormatException e) {
        }
    }
}
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: <identifier> expected
    //@ ensures (\exists int x, int y; x == Integer.parseInt(a) && y == Integer.parseInt(b); x != y || x == y);
                               ^
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: Expected a semicolon to separate the parts of a JML quantified expression
    //@ ensures (\exists int x, int y; x == Integer.parseInt(a) && y == Integer.parseInt(b); x != y || x == y);
                                ^
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: ')' expected
    //@ ensures (\exists int x, int y; x == Integer.parseInt(a) && y == Integer.parseInt(b); x != y || x == y);
                                                                                           ^
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: <identifier> expected
    //@ ensures (\exists int x, int y; x == Integer.parseInt(a) && y == Integer.parseInt(b); x != y || x == y);
                                                                                              ^
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: Method specs may not precede a variable declaration
    //@ ensures (\exists int x, int y; x == Integer.parseInt(a) && y == Integer.parseInt(b); x != y || x == y);
                                                                                               ^
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: <identifier> expected
    //@ ensures (\exists int x, int y; x == Integer.parseInt(a) && y == Integer.parseInt(b); x != y || x == y);
                                                                                                   ^
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: <identifier> expected
    //@ ensures (\exists int x, int y; x == Integer.parseInt(a) && y == Integer.parseInt(b); x != y || x == y);
                                                                                                        ^
/home/max/Documents/JMLGPT/tmp/calc.java:17: error: <identifier> expected
    //@ ensures (\exists int x, int y; x == Integer.parseInt(a) && y == Integer.parseInt(b); x != y || x == y);
                                                                                                             ^
8 errors

public class calc {
    //@ requires args != null;
    //@ requires args.length >= 2;
    //@ ensures args.length < 2 ==> System.out.println("need two arguments");
    public static void fun(String[] args) {
        if (args.length < 2) {
            System.out.println("need two arguments");
            return;
        }
        new calc().do_stuff(args[0], args[1]);
    }

    //@ requires a != null && b != null;
    //@ requires \fresh(a) && \fresh(b);
    //@ requires (\forall int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
    //@ requires (\forall int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
    //@ ensures (\exists int x; (\exists int y; x == Integer.parseInt(a) && y == Integer.parseInt(b); x != y || x == y));
    void do_stuff(String a, String b) {
        try {
            int x = Integer.parseInt(a);
            int y = Integer.parseInt(b);
            assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
        } catch (java.lang.NumberFormatException e) {
        }
    }
}
/home/max/Documents/JMLGPT/tmp/calc.java:4: error: incompatible types: void cannot be converted to boolean
    //@ ensures args.length < 2 ==> System.out.println("need two arguments");
                                                      ^
/home/max/Documents/JMLGPT/tmp/calc.java:14: error: A \fresh expression may not be in a requires clause
    //@ requires \fresh(a) && \fresh(b);
                        ^
/home/max/Documents/JMLGPT/tmp/calc.java:14: error: A \fresh expression may not be in a requires clause
    //@ requires \fresh(a) && \fresh(b);
                                     ^
3 errors

public class calc {
    //@ requires args != null;
    //@ requires args.length >= 2;
    //@ ensures args.length < 2 ==> true;
    public static void fun(String[] args) {
        if (args.length < 2) {
            System.out.println("need two arguments");
            return;
        }
        new calc().do_stuff(args[0], args[1]);
    }

    //@ requires a != null && b != null;
    //@ requires (\forall int i; 0 <= i && i < a.length(); Character.isDigit(a.charAt(i)));
    //@ requires (\forall int i; 0 <= i && i < b.length(); Character.isDigit(b.charAt(i)));
    //@ ensures (\exists int x; (\exists int y; x == Integer.parseInt(a) && y == Integer.parseInt(b); x != y || x == y));
    void do_stuff(String a, String b) {
        try {
            int x = Integer.parseInt(a);
            int y = Integer.parseInt(b);
            assert Integer.parseInt(a) != Integer.parseInt(b) || x == y;
        } catch (java.lang.NumberFormatException e) {
        }
    }
}
