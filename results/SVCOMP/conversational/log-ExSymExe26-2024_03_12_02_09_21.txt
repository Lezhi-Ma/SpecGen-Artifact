class Main {

  //@ ensures \result ==> test(a, b, a);
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE;
  //@ requires y >= Integer.MIN_VALUE && y <= Integer.MAX_VALUE;
  //@ requires z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result ==> (y > 0 && z > 0);
  //@ ensures !\result ==> (z <= 0 || y <= 0);
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe26");
    y = x;
    z++;
    if (z > 0) System.out.println("branch FOO1");
    else {
      return false;
    }
    if (y > 0) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe26.java:3: error: cannot find symbol
  //@ ensures \result ==> test(a, b, a);
                               ^
  symbol:   variable a
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe26.java:3: error: cannot find symbol
  //@ ensures \result ==> test(a, b, a);
                                  ^
  symbol:   variable b
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe26.java:3: error: cannot find symbol
  //@ ensures \result ==> test(a, b, a);
                                     ^
  symbol:   variable a
  location: class Main
3 errors

class Main {

  //@ ensures \result ==> test(3, 8, 3);
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE;
  //@ requires y >= Integer.MIN_VALUE && y <= Integer.MAX_VALUE;
  //@ requires z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result ==> (y > 0 && z > 0);
  //@ ensures !\result ==> (z <= 0 || y <= 0);
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe26");
    y = x;
    z++;
    if (z > 0) System.out.println("branch FOO1");
    else {
      return false;
    }
    if (y > 0) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe26.java:3: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result ==> test(3, 8, 3);
                          ^
1 error

class Main {

  //@ ensures \result ==> inst.test(3, 8, 3);
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE;
  //@ requires y >= Integer.MIN_VALUE && y <= Integer.MAX_VALUE;
  //@ requires z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result ==> (y > 0 && z > 0);
  //@ ensures !\result ==> (z <= 0 || y <= 0);
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe26");
    y = x;
    z++;
    if (z > 0) System.out.println("branch FOO1");
    else {
      return false;
    }
    if (y > 0) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe26.java:3: error: cannot find symbol
  //@ ensures \result ==> inst.test(3, 8, 3);
                          ^
  symbol:   variable inst
  location: class Main
1 error

class Main {

  //@ ensures \result ==> this.test(3, 8, 3);
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE;
  //@ requires y >= Integer.MIN_VALUE && y <= Integer.MAX_VALUE;
  //@ requires z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result ==> (y > 0 && z > 0);
  //@ ensures !\result ==> (z <= 0 || y <= 0);
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe26");
    y = x;
    z++;
    if (z > 0) System.out.println("branch FOO1");
    else {
      return false;
    }
    if (y > 0) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe26.java:3: error: non-static variable this cannot be referenced from a static context
  //@ ensures \result ==> this.test(3, 8, 3);
                          ^
1 error

class Main {

  //@ ensures \result ==> inst.test(3, 8, 3);
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE;
  //@ requires y >= Integer.MIN_VALUE && y <= Integer.MAX_VALUE;
  //@ requires z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result ==> (y > 0 && z > 0);
  //@ ensures !\result ==> (z <= 0 || y <= 0);
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe26");
    y = x;
    z++;
    if (z > 0) System.out.println("branch FOO1");
    else {
      return false;
    }
    if (y > 0) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe26.java:3: error: cannot find symbol
  //@ ensures \result ==> inst.test(3, 8, 3);
                          ^
  symbol:   variable inst
  location: class Main
1 error

class Main {

  //@ ensures \result ==> this.test(3, 8, 3);
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE;
  //@ requires y >= Integer.MIN_VALUE && y <= Integer.MAX_VALUE;
  //@ requires z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result ==> (y > 0 && z > 0);
  //@ ensures !\result ==> (z <= 0 || y <= 0);
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe26");
    y = x;
    z++;
    if (z > 0) System.out.println("branch FOO1");
    else {
      return false;
    }
    if (y > 0) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe26.java:3: error: non-static variable this cannot be referenced from a static context
  //@ ensures \result ==> this.test(3, 8, 3);
                          ^
1 error

class Main {

  //@ ensures \result ==> test(3, 8, 3);
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE;
  //@ requires y >= Integer.MIN_VALUE && y <= Integer.MAX_VALUE;
  //@ requires z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result ==> (y > 0 && z > 0);
  //@ ensures !\result ==> (z <= 0 || y <= 0);
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe26");
    y = x;
    z++;
    if (z > 0) System.out.println("branch FOO1");
    else {
      return false;
    }
    if (y > 0) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe26.java:3: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result ==> test(3, 8, 3);
                          ^
1 error

class Main {

  //@ ensures \result ==> new Main().test(3, 8, 3);
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE;
  //@ requires y >= Integer.MIN_VALUE && y <= Integer.MAX_VALUE;
  //@ requires z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result ==> (y > 0 && z > 0);
  //@ ensures !\result ==> (z <= 0 || y <= 0);
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe26");
    y = x;
    z++;
    if (z > 0) System.out.println("branch FOO1");
    else {
      return false;
    }
    if (y > 0) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe26.java:3: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().test(3, 8, 3);
                          ^
1 error

class Main {

  //@ ensures \result ==> test(3, 8, 3);
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE;
  //@ requires y >= Integer.MIN_VALUE && y <= Integer.MAX_VALUE;
  //@ requires z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result ==> (y > 0 && z > 0);
  //@ ensures !\result ==> (z <= 0 || y <= 0);
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe26");
    y = x;
    z++;
    if (z > 0) System.out.println("branch FOO1");
    else {
      return false;
    }
    if (y > 0) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe26.java:3: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result ==> test(3, 8, 3);
                          ^
1 error

class Main {

  //@ ensures \result ==> new Main().test(3, 8, 3);
  public static boolean f() {
    int a = 3;
    Main inst = new Main();
    int b = 8;
    return inst.test(a, b, a);
  }

  //@ requires x >= Integer.MIN_VALUE && x <= Integer.MAX_VALUE;
  //@ requires y >= Integer.MIN_VALUE && y <= Integer.MAX_VALUE;
  //@ requires z >= Integer.MIN_VALUE && z <= Integer.MAX_VALUE;
  //@ ensures \result ==> (y > 0 && z > 0);
  //@ ensures !\result ==> (z <= 0 || y <= 0);
  public boolean test(int x, int y, int z) {
    System.out.println("Testing ExSymExe26");
    y = x;
    z++;
    if (z > 0) System.out.println("branch FOO1");
    else {
      return false;
    }
    if (y > 0) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");

    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe26.java:3: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().test(3, 8, 3);
                          ^
1 error

