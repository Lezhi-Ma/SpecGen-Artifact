class A extends RuntimeException {}

class B extends A {}

class C extends B {}

public class exceptions10 {
  //@ requires true;
  //@ ensures \result == null;
  static void foo() {
    try {
      A b = new A();
      throw b;
    } catch (A exc) {
      assert false;
    }
  }

  //@ requires true;
  //@ ensures \result == null;
  public static void main(String[] args) {
    try {
      A a = new A();
      foo();
    } catch (B exc) {
      assert false;
    }
  }
}
/home/max/Documents/JMLGPT/tmp/exceptions10.java:9: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures \result == null;
               ^
/home/max/Documents/JMLGPT/tmp/exceptions10.java:20: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures \result == null;
               ^
2 errors

class A extends RuntimeException {}

class B extends A {}

class C extends B {}

public class exceptions10 {
  //@ requires true;
  //@ ensures true;
  static void foo() {
    try {
      A b = new A();
      throw b;
    } catch (A exc) {
      assert false;
    }
  }

  //@ requires true;
  //@ ensures true;
  public static void main(String[] args) {
    try {
      A a = new A();
      foo();
    } catch (B exc) {
      assert false;
    }
  }
}
/home/max/Documents/JMLGPT/tmp/exceptions10.java:15: verify: The prover cannot establish an assertion (Assert) in method foo
      assert false;
      ^
/home/max/Documents/JMLGPT/tmp/exceptions10.java:26: verify: The prover cannot establish an assertion (Assert) in method main
      assert false;
      ^
2 verification failures

class A extends RuntimeException {}

class B extends A {}

class C extends B {}

public class exceptions10 {
  //@ requires true;
  //@ ensures true;
  static void foo() {
    try {
      A b = new A();
      throw b;
    } catch (A exc) {
      // assert false;
    }
  }

  //@ requires true;
  //@ ensures true;
  public static void main(String[] args) {
    try {
      A a = new A();
      foo();
    } catch (B exc) {
      // assert false;
    }
  }
}

