class Main {
    //@ ensures \result <==> i != null;
    public static boolean test(Integer i) {
        if (i instanceof Integer) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result <==> (test(null) == false) && (test(new Integer(1)) == true);
    public static boolean f() {
        return (!test(null)) && (test(new Integer(1)));
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:11: error: Object allocation is not permitted in specification expressions
    //@ ensures \result <==> (test(null) == false) && (test(new Integer(1)) == true);
                                                            ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
1 error

class Main {
    //@ ensures \result <==> i != null;
    public static boolean test(Integer i) {
        if (i instanceof Integer) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result <==> (test(null) == false) && (test(new Integer(1)) == true);
    public static boolean f() {
        return (!test(null)) && (test(1));
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:11: error: Object allocation is not permitted in specification expressions
    //@ ensures \result <==> (test(null) == false) && (test(new Integer(1)) == true);
                                                            ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
1 error

class Main {
    //@ ensures \result <==> i != null;
    public static boolean test(Integer i) {
        if (i instanceof Integer) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result <==> (test(null) == false) && (test(1) == true);
    public static boolean f() {
        return (!test(null)) && (test(1));
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:13: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/instanceof8.java:3:) in method f: i in test(java.lang.Integer)
        return (!test(null)) && (test(1));
                      ^
/home/max/Documents/JMLGPT/tmp/instanceof8.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/instanceof8.java:13:
    public static boolean test(Integer i) {
                               ^
2 verification failures

class Main {
    //@ ensures \result <==> i != null;
    public static boolean test(Integer i) {
        if (i != null) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result <==> (test(null) == false) && (test(1) == true);
    public static boolean f() {
        return (!test(null)) && (test(1));
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:13: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/instanceof8.java:3:) in method f: i in test(java.lang.Integer)
        return (!test(null)) && (test(1));
                      ^
/home/max/Documents/JMLGPT/tmp/instanceof8.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/instanceof8.java:13:
    public static boolean test(Integer i) {
                               ^
2 verification failures

class Main {
    //@ ensures \result <==> i != null;
    public static boolean test(Integer i) {
        if (i != null) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result <==> (test(null) == false) && (test(1) == true);
    public static boolean f() {
        return (!test(null)) && (test(new Integer(1)));
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:13: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/instanceof8.java:3:) in method f: i in test(java.lang.Integer)
        return (!test(null)) && (test(new Integer(1)));
                      ^
/home/max/Documents/JMLGPT/tmp/instanceof8.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/instanceof8.java:13:
    public static boolean test(Integer i) {
                               ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
2 verification failures

class Main {
    //@ ensures \result <==> i != null;
    public static boolean test(Integer i) {
        if (i != null) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result <==> (test(null) == false) && (test(new Integer(1)) == true);
    public static boolean f() {
        return (!test(null)) && (test(new Integer(1)));
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:11: error: Object allocation is not permitted in specification expressions
    //@ ensures \result <==> (test(null) == false) && (test(new Integer(1)) == true);
                                                            ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
1 error

class Main {
    //@ ensures \result <==> i != null;
    public static boolean test(Integer i) {
        if (i instanceof Integer) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result <==> (test(null) == false) && (test(1) == true);
    public static boolean f() {
        return (!test(null)) && (test(1));
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:13: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/instanceof8.java:3:) in method f: i in test(java.lang.Integer)
        return (!test(null)) && (test(1));
                      ^
/home/max/Documents/JMLGPT/tmp/instanceof8.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/instanceof8.java:13:
    public static boolean test(Integer i) {
                               ^
2 verification failures

class Main {
    //@ ensures \result <==> i != null;
    public static boolean test(Integer i) {
        if (i != null) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result <==> (test(null) == false) && (test(1) == true);
    public static boolean f() {
        return (!test(null)) && (test(1));
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:13: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/instanceof8.java:3:) in method f: i in test(java.lang.Integer)
        return (!test(null)) && (test(1));
                      ^
/home/max/Documents/JMLGPT/tmp/instanceof8.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/instanceof8.java:13:
    public static boolean test(Integer i) {
                               ^
2 verification failures

class Main {
    //@ ensures \result <==> i != null;
    public static boolean test(Integer i) {
        if (i != null) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result <==> (test(null) == false) && (test(new Integer(1)) == true);
    public static boolean f() {
        return (!test(null)) && (test(new Integer(1)));
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:11: error: Object allocation is not permitted in specification expressions
    //@ ensures \result <==> (test(null) == false) && (test(new Integer(1)) == true);
                                                            ^
Note: /home/max/Documents/JMLGPT/tmp/instanceof8.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
1 error

class Main {
    //@ ensures \result <==> i != null;
    public static boolean test(Integer i) {
        if (i instanceof Integer) {
            return true;
        } else {
            return false;
        }
    }

    //@ ensures \result <==> (test(null) == false) && (test(1) == true);
    public static boolean f() {
        return (!test(null)) && (test(1));
    }
}
/home/max/Documents/JMLGPT/tmp/instanceof8.java:13: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/instanceof8.java:3:) in method f: i in test(java.lang.Integer)
        return (!test(null)) && (test(1));
                      ^
/home/max/Documents/JMLGPT/tmp/instanceof8.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/instanceof8.java:13:
    public static boolean test(Integer i) {
                               ^
2 verification failures

