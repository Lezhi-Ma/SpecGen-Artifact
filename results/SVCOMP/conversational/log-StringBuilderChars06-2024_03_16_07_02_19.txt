public class StringBuilderChars06 {
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result <==> buffer.toString().equals("detimiL eTlBffiiH"); @*/
  public static boolean f(String arg) {
    StringBuilder buffer = new StringBuilder(arg);
    buffer.reverse();
    return buffer.toString().equals("detimiL eTlBffiiH");
  }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars06.java:4: error: cannot find symbol
    @    ensures \result <==> buffer.toString().equals("detimiL eTlBffiiH"); @*/
                              ^
  symbol:   variable buffer
  location: class StringBuilderChars06
1 error

public class StringBuilderChars06 {
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result <==> (new StringBuilder(arg).reverse().toString().equals("detimiL eTlBffiiH")); @*/
  public static boolean f(String arg) {
    StringBuilder buffer = new StringBuilder(arg);
    buffer.reverse();
    return buffer.toString().equals("detimiL eTlBffiiH");
  }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars06.java:4: error: Object allocation is not permitted in specification expressions
    @    ensures \result <==> (new StringBuilder(arg).reverse().toString().equals("detimiL eTlBffiiH")); @*/
                               ^
1 error

public class StringBuilderChars06 {
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result <==> (new StringBuilder(arg).reverse().toString().equals("detimiL eTlBffiiH")); @*/
  public static boolean f(String arg) {
    StringBuilder buffer = new StringBuilder(arg);
    buffer.reverse();
    return buffer.toString().equals("detimiL eTlBffiiH");
  }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars06.java:4: error: Object allocation is not permitted in specification expressions
    @    ensures \result <==> (new StringBuilder(arg).reverse().toString().equals("detimiL eTlBffiiH")); @*/
                               ^
1 error

public class StringBuilderChars06 {
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result <==> reverseString(arg).equals("detimiL eTlBffiiH"); @*/
  public static boolean f(String arg) {
    StringBuilder buffer = new StringBuilder(arg);
    buffer.reverse();
    return buffer.toString().equals("detimiL eTlBffiiH");
  }
  
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < str.length(); (int)Character.MIN_VALUE <= (int)str.charAt(i) && (int)str.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result.equals(new StringBuilder(str).reverse().toString()); @*/
  public static String reverseString(String str) {
    return new StringBuilder(str).reverse().toString();
  }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars06.java:13: error: Object allocation is not permitted in specification expressions
    @    ensures \result.equals(new StringBuilder(str).reverse().toString()); @*/
                                ^
1 error

public class StringBuilderChars06 {
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result <==> reverseString(arg).equals("detimiL eTlBffiiH"); @*/
  public static boolean f(String arg) {
    StringBuilder buffer = new StringBuilder(arg);
    buffer.reverse();
    return buffer.toString().equals("detimiL eTlBffiiH");
  }
  
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < str.length(); (int)Character.MIN_VALUE <= (int)str.charAt(i) && (int)str.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result.equals(reverseStringHelper(str)); @*/
  public static String reverseString(String str) {
    return reverseStringHelper(str);
  }
  
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < str.length(); (int)Character.MIN_VALUE <= (int)str.charAt(i) && (int)str.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result.equals(new StringBuilder(str).reverse().toString()); @*/
  private static String reverseStringHelper(String str) {
    return new StringBuilder(str).reverse().toString();
  }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars06.java:13: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    @    ensures \result.equals(reverseStringHelper(str)); @*/
                                ^
/home/max/Documents/JMLGPT/tmp/StringBuilderChars06.java:20: error: Object allocation is not permitted in specification expressions
    @    ensures \result.equals(new StringBuilder(str).reverse().toString()); @*/
                                ^
2 errors

public class StringBuilderChars06 {
  //@ spec_public
  private static String reverse = "";
  
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result <==> reverseString(arg).equals("detimiL eTlBffiiH"); @*/
  public static boolean f(String arg) {
    StringBuilder buffer = new StringBuilder(arg);
    buffer.reverse();
    return buffer.toString().equals("detimiL eTlBffiiH");
  }
  
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < str.length(); (int)Character.MIN_VALUE <= (int)str.charAt(i) && (int)str.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result.equals(reverseStringHelper(str)); @*/
  public static String reverseString(String str) {
    return reverseStringHelper(str);
  }
  
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < str.length(); (int)Character.MIN_VALUE <= (int)str.charAt(i) && (int)str.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result.equals(new StringBuilder(str).reverse().toString()); @*/
  private static String reverseStringHelper(String str) {
    return new StringBuilder(str).reverse().toString();
  }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars06.java:16: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    @    ensures \result.equals(reverseStringHelper(str)); @*/
                                ^
/home/max/Documents/JMLGPT/tmp/StringBuilderChars06.java:23: error: Object allocation is not permitted in specification expressions
    @    ensures \result.equals(new StringBuilder(str).reverse().toString()); @*/
                                ^
2 errors

public class StringBuilderChars06 {
  //@ spec_public
  private static String reverse = "";
  
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result <==> reverseString(arg).equals("detimiL eTlBffiiH"); @*/
  public static boolean f(String arg) {
    StringBuilder buffer = new StringBuilder(arg);
    buffer.reverse();
    return buffer.toString().equals("detimiL eTlBffiiH");
  }
  
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < str.length(); (int)Character.MIN_VALUE <= (int)str.charAt(i) && (int)str.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result.equals(reverseStringHelper(str)); @*/
  public static String reverseString(String str) {
    return reverseStringHelper(str);
  }
  
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < str.length(); (int)Character.MIN_VALUE <= (int)str.charAt(i) && (int)str.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result.equals(reverseStringHelper(str)); @*/
  private static String reverseStringHelper(String str) {
    StringBuilder reversed = new StringBuilder();
    for (int i = str.length() - 1; i >= 0; i--) {
        reversed.append(str.charAt(i));
    }
    return reversed.toString();
  }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars06.java:16: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    @    ensures \result.equals(reverseStringHelper(str)); @*/
                                ^
/home/max/Documents/JMLGPT/tmp/StringBuilderChars06.java:23: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    @    ensures \result.equals(reverseStringHelper(str)); @*/
                                ^
2 errors

public class StringBuilderChars06 {
  //@ spec_public
  private static String reverse = "";
  
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result <==> reverseString(arg).equals("detimiL eTlBffiiH"); @*/
  public static boolean f(String arg) {
    StringBuilder buffer = new StringBuilder(arg);
    buffer.reverse();
    return buffer.toString().equals("detimiL eTlBffiiH");
  }
  
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < str.length(); (int)Character.MIN_VALUE <= (int)str.charAt(i) && (int)str.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result.equals(reverseStringHelper(str)); @*/
  public static String reverseString(String str) {
    return reverseStringHelper(str);
  }
  
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < str.length(); (int)Character.MIN_VALUE <= (int)str.charAt(i) && (int)str.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result.equals(reverseStringHelper(str)); @*/
  private static String reverseStringHelper(String str) {
    StringBuilder reversed = new StringBuilder();
    for (int i = str.length() - 1; i >= 0; i--) {
        reversed.append(str.charAt(i));
    }
    return reversed.toString();
  }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars06.java:16: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    @    ensures \result.equals(reverseStringHelper(str)); @*/
                                ^
/home/max/Documents/JMLGPT/tmp/StringBuilderChars06.java:23: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    @    ensures \result.equals(reverseStringHelper(str)); @*/
                                ^
2 errors

public class StringBuilderChars06 {
  //@ spec_public
  private static String reverse = "";
  
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result <==> reverseString(arg).equals("detimiL eTlBffiiH"); @*/
  public static boolean f(String arg) {
    StringBuilder buffer = new StringBuilder(arg);
    buffer.reverse();
    return buffer.toString().equals("detimiL eTlBffiiH");
  }
  
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < str.length(); (int)Character.MIN_VALUE <= (int)str.charAt(i) && (int)str.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result.equals(reverseStringHelper(str)); @*/
  public static String reverseString(String str) {
    return reverseStringHelper(str);
  }
  
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < str.length(); (int)Character.MIN_VALUE <= (int)str.charAt(i) && (int)str.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result.equals(reverseStringHelper(str)); @*/
  private static String reverseStringHelper(String str) {
    StringBuilder reversed = new StringBuilder();
    for (int i = str.length() - 1; i >= 0; i--) {
        reversed.append(str.charAt(i));
    }
    return reversed.toString();
  }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars06.java:16: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    @    ensures \result.equals(reverseStringHelper(str)); @*/
                                ^
/home/max/Documents/JMLGPT/tmp/StringBuilderChars06.java:23: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    @    ensures \result.equals(reverseStringHelper(str)); @*/
                                ^
2 errors

public class StringBuilderChars06 {
  //@ spec_public
  private static String reverse = "";
  
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < arg.length(); (int)Character.MIN_VALUE <= (int)arg.charAt(i) && (int)arg.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result <==> reverseString(arg).equals("detimiL eTlBffiiH"); @*/
  public static boolean f(String arg) {
    StringBuilder buffer = new StringBuilder(arg);
    buffer.reverse();
    return buffer.toString().equals("detimiL eTlBffiiH");
  }
  
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < str.length(); (int)Character.MIN_VALUE <= (int)str.charAt(i) && (int)str.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result.equals(reverseStringHelper(str)); @*/
  public static String reverseString(String str) {
    return reverseStringHelper(str);
  }
  
  /*@ public normal_behavior
    @    requires (\forall int i; 0 <= i && i < str.length(); (int)Character.MIN_VALUE <= (int)str.charAt(i) && (int)str.charAt(i) <= (int)Character.MAX_VALUE);
    @    ensures \result.equals(reverseStringHelper(str)); @*/
  private static String reverseStringHelper(String str) {
    StringBuilder reversed = new StringBuilder();
    for (int i = str.length() - 1; i >= 0; i--) {
        reversed.append(str.charAt(i));
    }
    return reversed.toString();
  }
}
/home/max/Documents/JMLGPT/tmp/StringBuilderChars06.java:16: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    @    ensures \result.equals(reverseStringHelper(str)); @*/
                                ^
/home/max/Documents/JMLGPT/tmp/StringBuilderChars06.java:23: error: An identifier with private visibility may not be used in a ensures clause with public visibility
    @    ensures \result.equals(reverseStringHelper(str)); @*/
                                ^
2 errors

