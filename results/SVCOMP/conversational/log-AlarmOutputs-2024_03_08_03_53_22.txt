import java.util.Random;

final class Verifier {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondetInt() {
    return new Random().nextInt();
  }
}

public class AlarmOutputs {
  //@ public invariant isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
  //@ public invariant notificationMessage >= Integer.MIN_VALUE && notificationMessage <= Integer.MAX_VALUE;
  //@ public invariant audioNotificationCommand >= Integer.MIN_VALUE && audioNotificationCommand <= Integer.MAX_VALUE;
  //@ public invariant highestLevelAlarm >= Integer.MIN_VALUE && highestLevelAlarm <= Integer.MAX_VALUE;
  //@ public invariant logMessageId >= Integer.MIN_VALUE && logMessageId <= Integer.MAX_VALUE;
  public int isAudioDisabled = Verifier.nondetInt();
  public int notificationMessage = Verifier.nondetInt();
  public int audioNotificationCommand = Verifier.nondetInt();
  public int highestLevelAlarm = Verifier.nondetInt();
  public int logMessageId = Verifier.nondetInt();
}
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:16: verify: The prover cannot establish an assertion (Assignable) in method AlarmOutputs: \everything
  public int isAudioDisabled = Verifier.nondetInt();
                                                 ^
1 verification failure

import java.util.Random;

final class Verifier {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondetInt() {
    return new Random().nextInt();
  }
}

public class AlarmOutputs {
  public int isAudioDisabled;
  public int notificationMessage;
  public int audioNotificationCommand;
  public int highestLevelAlarm;
  public int logMessageId;

  //@ assignable isAudioDisabled, notificationMessage, audioNotificationCommand, highestLevelAlarm, logMessageId;
  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
  //@ ensures notificationMessage >= Integer.MIN_VALUE && notificationMessage <= Integer.MAX_VALUE;
  //@ ensures audioNotificationCommand >= Integer.MIN_VALUE && audioNotificationCommand <= Integer.MAX_VALUE;
  //@ ensures highestLevelAlarm >= Integer.MIN_VALUE && highestLevelAlarm <= Integer.MAX_VALUE;
  //@ ensures logMessageId >= Integer.MIN_VALUE && logMessageId <= Integer.MAX_VALUE;
  public AlarmOutputs() {
    isAudioDisabled = Verifier.nondetInt();
    notificationMessage = Verifier.nondetInt();
    audioNotificationCommand = Verifier.nondetInt();
    highestLevelAlarm = Verifier.nondetInt();
    logMessageId = Verifier.nondetInt();
  }
}
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17: error: Implicit references to 'this' are not permitted in constructor assignable clauses: isAudioDisabled
  //@ assignable isAudioDisabled, notificationMessage, audioNotificationCommand, highestLevelAlarm, logMessageId;
                 ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17: error: Implicit references to 'this' are not permitted in constructor assignable clauses: notificationMessage
  //@ assignable isAudioDisabled, notificationMessage, audioNotificationCommand, highestLevelAlarm, logMessageId;
                                  ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17: error: Implicit references to 'this' are not permitted in constructor assignable clauses: audioNotificationCommand
  //@ assignable isAudioDisabled, notificationMessage, audioNotificationCommand, highestLevelAlarm, logMessageId;
                                                       ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17: error: Implicit references to 'this' are not permitted in constructor assignable clauses: highestLevelAlarm
  //@ assignable isAudioDisabled, notificationMessage, audioNotificationCommand, highestLevelAlarm, logMessageId;
                                                                                 ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17: error: Implicit references to 'this' are not permitted in constructor assignable clauses: logMessageId
  //@ assignable isAudioDisabled, notificationMessage, audioNotificationCommand, highestLevelAlarm, logMessageId;
                                                                                                    ^
5 errors

import java.util.Random;

final class Verifier {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondetInt() {
    return new Random().nextInt();
  }
}

public class AlarmOutputs {
  public int isAudioDisabled;
  public int notificationMessage;
  public int audioNotificationCommand;
  public int highestLevelAlarm;
  public int logMessageId;

  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
  //@ ensures notificationMessage >= Integer.MIN_VALUE && notificationMessage <= Integer.MAX_VALUE;
  //@ ensures audioNotificationCommand >= Integer.MIN_VALUE && audioNotificationCommand <= Integer.MAX_VALUE;
  //@ ensures highestLevelAlarm >= Integer.MIN_VALUE && highestLevelAlarm <= Integer.MAX_VALUE;
  //@ ensures logMessageId >= Integer.MIN_VALUE && logMessageId <= Integer.MAX_VALUE;
  public AlarmOutputs() {
    isAudioDisabled = Verifier.nondetInt();
    notificationMessage = Verifier.nondetInt();
    audioNotificationCommand = Verifier.nondetInt();
    highestLevelAlarm = Verifier.nondetInt();
    logMessageId = Verifier.nondetInt();
  }
}
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17:) in method AlarmOutputs
  public AlarmOutputs() {
         ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22:
  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
      ^
2 verification failures

import java.util.Random;

final class Verifier {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondetInt() {
    return new Random().nextInt();
  }
}

public class AlarmOutputs {
  public int isAudioDisabled;
  public int notificationMessage;
  public int audioNotificationCommand;
  public int highestLevelAlarm;
  public int logMessageId;

  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
  //@ ensures notificationMessage >= Integer.MIN_VALUE && notificationMessage <= Integer.MAX_VALUE;
  //@ ensures audioNotificationCommand >= Integer.MIN_VALUE && audioNotificationCommand <= Integer.MAX_VALUE;
  //@ ensures highestLevelAlarm >= Integer.MIN_VALUE && highestLevelAlarm <= Integer.MAX_VALUE;
  //@ ensures logMessageId >= Integer.MIN_VALUE && logMessageId <= Integer.MAX_VALUE;
  public AlarmOutputs() {
    isAudioDisabled = Verifier.nondetInt();
    notificationMessage = Verifier.nondetInt();
    audioNotificationCommand = Verifier.nondetInt();
    highestLevelAlarm = Verifier.nondetInt();
    logMessageId = Verifier.nondetInt();
  }
}
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17:) in method AlarmOutputs
  public AlarmOutputs() {
         ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22:
  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
      ^
2 verification failures

import java.util.Random;

final class Verifier {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondetInt() {
    return new Random().nextInt();
  }
}

public class AlarmOutputs {
  public int isAudioDisabled;
  public int notificationMessage;
  public int audioNotificationCommand;
  public int highestLevelAlarm;
  public int logMessageId;

  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
  //@ ensures notificationMessage >= Integer.MIN_VALUE && notificationMessage <= Integer.MAX_VALUE;
  //@ ensures audioNotificationCommand >= Integer.MIN_VALUE && audioNotificationCommand <= Integer.MAX_VALUE;
  //@ ensures highestLevelAlarm >= Integer.MIN_VALUE && highestLevelAlarm <= Integer.MAX_VALUE;
  //@ ensures logMessageId >= Integer.MIN_VALUE && logMessageId <= Integer.MAX_VALUE;
  public AlarmOutputs() {
    isAudioDisabled = Verifier.nondetInt();
    notificationMessage = Verifier.nondetInt();
    audioNotificationCommand = Verifier.nondetInt();
    highestLevelAlarm = Verifier.nondetInt();
    logMessageId = Verifier.nondetInt();
  }
}
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17:) in method AlarmOutputs
  public AlarmOutputs() {
         ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22:
  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
      ^
2 verification failures

import java.util.Random;

final class Verifier {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondetInt() {
    return new Random().nextInt();
  }
}

public class AlarmOutputs {
  public int isAudioDisabled;
  public int notificationMessage;
  public int audioNotificationCommand;
  public int highestLevelAlarm;
  public int logMessageId;

  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
  //@ ensures notificationMessage >= Integer.MIN_VALUE && notificationMessage <= Integer.MAX_VALUE;
  //@ ensures audioNotificationCommand >= Integer.MIN_VALUE && audioNotificationCommand <= Integer.MAX_VALUE;
  //@ ensures highestLevelAlarm >= Integer.MIN_VALUE && highestLevelAlarm <= Integer.MAX_VALUE;
  //@ ensures logMessageId >= Integer.MIN_VALUE && logMessageId <= Integer.MAX_VALUE;
  public AlarmOutputs() {
    isAudioDisabled = Verifier.nondetInt();
    notificationMessage = Verifier.nondetInt();
    audioNotificationCommand = Verifier.nondetInt();
    highestLevelAlarm = Verifier.nondetInt();
    logMessageId = Verifier.nondetInt();
  }
}
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17:) in method AlarmOutputs
  public AlarmOutputs() {
         ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22:
  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
      ^
2 verification failures

import java.util.Random;

final class Verifier {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondetInt() {
    return new Random().nextInt();
  }
}

public class AlarmOutputs {
  public int isAudioDisabled;
  public int notificationMessage;
  public int audioNotificationCommand;
  public int highestLevelAlarm;
  public int logMessageId;

  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
  //@ ensures notificationMessage >= Integer.MIN_VALUE && notificationMessage <= Integer.MAX_VALUE;
  //@ ensures audioNotificationCommand >= Integer.MIN_VALUE && audioNotificationCommand <= Integer.MAX_VALUE;
  //@ ensures highestLevelAlarm >= Integer.MIN_VALUE && highestLevelAlarm <= Integer.MAX_VALUE;
  //@ ensures logMessageId >= Integer.MIN_VALUE && logMessageId <= Integer.MAX_VALUE;
  public AlarmOutputs() {
    isAudioDisabled = Verifier.nondetInt();
    notificationMessage = Verifier.nondetInt();
    audioNotificationCommand = Verifier.nondetInt();
    highestLevelAlarm = Verifier.nondetInt();
    logMessageId = Verifier.nondetInt();
  }
}
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17:) in method AlarmOutputs
  public AlarmOutputs() {
         ^
/home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AlarmOutputs.java:22:
  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
      ^
2 verification failures

import java.util.Random;

final class Verifier {
  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondetInt() {
    return new Random().nextInt();
  }
}

public class AlarmOutputs {
  public int isAudioDisabled;
  public int notificationMessage;
  public int audioNotificationCommand;
  public int highestLevelAlarm;
  public int logMessageId;

  //@ ensures isAudioDisabled >= Integer.MIN_VALUE && isAudioDisabled <= Integer.MAX_VALUE;
  public AlarmOutputs() {
    isAudioDisabled = Verifier.nondetInt();
  }
}

