public class MergeSortIterative {

    //@ requires a != null;
    //@ requires a.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
    public static void iterativeMergesort(int[] a) {
        int[] aux = new int[a.length];
        for (int blockSize = 1; blockSize < a.length; blockSize *= 2)
            for (int start = 0; start < a.length; start += 2 * blockSize)
                merge(a, aux, start, start + blockSize, start + 2 * blockSize);
    }

    //@ requires a != null;
    //@ requires a.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
    public static void iterativeMergesortWithoutCopy(int[] a) {
        int[] from = a, to = new int[a.length];
        for (int blockSize = 1; blockSize < a.length; blockSize *= 2) {
            for (int start = 0; start < a.length; start += 2 * blockSize)
                mergeWithoutCopy(from, to, start, start + blockSize, start + 2 * blockSize);
            int[] temp = from;
            from = to;
            to = temp;
        }
        if (a != from)
            for (int k = 0; k < a.length; k++) a[k] = from[k];
    }

    //@ requires from != null;
    //@ requires to != null;
    //@ requires lo >= 0 && lo < mid && mid < hi && hi <= from.length;
    //@ ensures (\forall int i; lo <= i && i < hi-1; to[i] <= to[i+1]);
    private static void mergeWithoutCopy(int[] from, int[] to, int lo, int mid, int hi) {
        if (mid > from.length) mid = from.length;
        if (hi > from.length) hi = from.length;
        int i = lo, j = mid;
        for (int k = lo; k < hi; k++) {
            if (i == mid) to[k] = from[j++];
            else if (j == hi) to[k] = from[i++];
            else if (from[j] < from[i]) to[k] = from[j++];
            else to[k] = from[i++];
        }
    }

    //@ requires a != null;
    //@ requires aux != null;
    //@ requires lo >= 0 && lo < hi && hi <= a.length;
    //@ ensures (\forall int i; lo <= i && i < hi-1; a[i] <= a[i+1]);
    private static void merge(int[] a, int[] aux, int lo, int mid, int hi) {
        if (mid >= a.length) return;
        if (hi > a.length) hi = a.length;
        int i = lo, j = mid;
        for (int k = lo; k < hi; k++) {
            if (i == mid) aux[k] = a[j++];
            else if (j == hi) aux[k] = a[i++];
            else if (a[j] < a[i]) aux[k] = a[j++];
            else aux[k] = a[i++];
        }
        for (int k = lo; k < hi; k++) a[k] = aux[k];
    }

    //@ requires a != null;
    //@ requires aux != null;
    //@ requires lo >= 0 && lo < hi && hi <= a.length;
    //@ ensures (\forall int i; lo <= i && i < hi-1; a[i] <= a[i+1]);
    public static void recursiveMergesort(int[] a, int[] aux, int lo, int hi) {
        if (hi - lo <= 1) return;
        int mid = lo + (hi - lo) / 2;
        recursiveMergesort(a, aux, lo, mid);
        recursiveMergesort(a, aux, mid, hi);
        merge(a, aux, lo, mid, hi);
    }

    //@ requires a != null;
    //@ requires a.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
    public static void recursiveMergesort(int[] a) {
        int n = a.length;
        int[] aux = new int[n];
        recursiveMergesort(a, aux, 0, n);
    }
}
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:5:) in method iterativeMergesort
    public static void iterativeMergesort(int[] a) {
                       ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:6:
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:15:) in method iterativeMergesortWithoutCopy
    public static void iterativeMergesortWithoutCopy(int[] a) {
                       ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:16:
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:50: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:48:) in method merge
        if (mid >= a.length) return;
                             ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:50:
    //@ ensures (\forall int i; lo <= i && i < hi-1; a[i] <= a[i+1]);
        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:33: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:32:) in method mergeWithoutCopy
    private static void mergeWithoutCopy(int[] from, int[] to, int lo, int mid, int hi) {
                        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:33:
    //@ ensures (\forall int i; lo <= i && i < hi-1; to[i] <= to[i+1]);
        ^
8 verification failures

public class MergeSortIterative {

    //@ requires a != null;
    //@ requires a.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
    public static void iterativeMergesort(int[] a) {
        int[] aux = new int[a.length];
        for (int blockSize = 1; blockSize < a.length; blockSize *= 2)
            for (int start = 0; start < a.length; start += 2 * blockSize)
                merge(a, aux, start, start + blockSize, Math.min(start + 2 * blockSize, a.length));
    }

    //@ requires a != null;
    //@ requires a.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
    public static void iterativeMergesortWithoutCopy(int[] a) {
        int[] from = a, to = new int[a.length];
        for (int blockSize = 1; blockSize < a.length; blockSize *= 2) {
            for (int start = 0; start < a.length; start += 2 * blockSize)
                mergeWithoutCopy(from, to, start, start + blockSize, Math.min(start + 2 * blockSize, a.length));
            int[] temp = from;
            from = to;
            to = temp;
        }
        if (a != from)
            for (int k = 0; k < a.length; k++) a[k] = from[k];
    }

    //@ requires from != null;
    //@ requires to != null;
    //@ requires lo >= 0 && lo < mid && mid < hi && hi <= from.length;
    //@ ensures (\forall int i; lo <= i && i < hi-1; to[i] <= to[i+1]);
    private static void mergeWithoutCopy(int[] from, int[] to, int lo, int mid, int hi) {
        int i = lo, j = mid;
        for (int k = lo; k < hi; k++) {
            if (i == mid) to[k] = from[j++];
            else if (j == hi) to[k] = from[i++];
            else if (from[j] < from[i]) to[k] = from[j++];
            else to[k] = from[i++];
        }
    }

    //@ requires a != null;
    //@ requires aux != null;
    //@ requires lo >= 0 && lo < hi && hi <= a.length;
    //@ ensures (\forall int i; lo <= i && i < hi-1; a[i] <= a[i+1]);
    private static void merge(int[] a, int[] aux, int lo, int mid, int hi) {
        int i = lo, j = mid;
        for (int k = lo; k < hi; k++) {
            if (i == mid) aux[k] = a[j++];
            else if (j == hi) aux[k] = a[i++];
            else if (a[j] < a[i]) aux[k] = a[j++];
            else aux[k] = a[i++];
        }
        for (int k = lo; k < hi; k++) a[k] = aux[k];
    }

    //@ requires a != null;
    //@ requires aux != null;
    //@ requires lo >= 0 && lo < hi && hi <= a.length;
    //@ ensures (\forall int i; lo <= i && i < hi-1; a[i] <= a[i+1]);
    public static void recursiveMergesort(int[] a, int[] aux, int lo, int hi) {
        if (hi - lo <= 1) return;
        int mid = lo + (hi - lo) / 2;
        recursiveMergesort(a, aux, lo, mid);
        recursiveMergesort(a, aux, mid, hi);
        merge(a, aux, lo, mid, hi);
    }

    //@ requires a != null;
    //@ requires a.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
    public static void recursiveMergesort(int[] a) {
        int n = a.length;
        int[] aux = new int[n];
        recursiveMergesort(a, aux, 0, n);
    }
}
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:5:) in method iterativeMergesort
    public static void iterativeMergesort(int[] a) {
                       ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:6:
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:15:) in method iterativeMergesortWithoutCopy
    public static void iterativeMergesortWithoutCopy(int[] a) {
                       ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:16:
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:47: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:46:) in method merge
    private static void merge(int[] a, int[] aux, int lo, int mid, int hi) {
                        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:47:
    //@ ensures (\forall int i; lo <= i && i < hi-1; a[i] <= a[i+1]);
        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:33: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:32:) in method mergeWithoutCopy
    private static void mergeWithoutCopy(int[] from, int[] to, int lo, int mid, int hi) {
                        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:33:
    //@ ensures (\forall int i; lo <= i && i < hi-1; to[i] <= to[i+1]);
        ^
8 verification failures

public class MergeSortIterative {

    //@ requires a != null;
    //@ requires a.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
    public static void iterativeMergesort(int[] a) {
        int[] aux = new int[a.length];
        for (int blockSize = 1; blockSize < a.length; blockSize *= 2)
            for (int start = 0; start < a.length; start += 2 * blockSize)
                merge(a, aux, start, start + blockSize, Math.min(start + 2 * blockSize, a.length));
    }

    //@ requires a != null;
    //@ requires a.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
    public static void iterativeMergesortWithoutCopy(int[] a) {
        int[] from = a, to = new int[a.length];
        for (int blockSize = 1; blockSize < a.length; blockSize *= 2) {
            for (int start = 0; start < a.length; start += 2 * blockSize)
                mergeWithoutCopy(from, to, start, start + blockSize, Math.min(start + 2 * blockSize, a.length));
            int[] temp = from;
            from = to;
            to = temp;
        }
        if (a != from)
            for (int k = 0; k < a.length; k++) a[k] = from[k];
    }

    //@ requires a != null;
    //@ requires a.length > 0;
    //@ requires aux != null;
    //@ requires lo >= 0 && lo < hi && hi <= a.length;
    //@ ensures (\forall int i; lo <= i && i < hi-1; a[i] <= a[i+1]);
    private static void merge(int[] a, int[] aux, int lo, int mid, int hi) {
        int i = lo, j = mid;
        for (int k = lo; k < hi; k++) {
            if (i == mid) aux[k] = a[j++];
            else if (j == hi) aux[k] = a[i++];
            else if (a[j] < a[i]) aux[k] = a[j++];
            else aux[k] = a[i++];
        }
        for (int k = lo; k < hi; k++) a[k] = aux[k];
    }

    //@ requires from != null;
    //@ requires to != null;
    //@ requires lo >= 0 && lo < hi && hi <= from.length;
    //@ ensures (\forall int i; lo <= i && i < hi-1; to[i] <= to[i+1]);
    private static void mergeWithoutCopy(int[] from, int[] to, int lo, int mid, int hi) {
        int i = lo, j = mid;
        for (int k = lo; k < hi; k++) {
            if (i == mid) to[k] = from[j++];
            else if (j == hi) to[k] = from[i++];
            else if (from[j] < from[i]) to[k] = from[j++];
            else to[k] = from[i++];
        }
    }
}
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:5:) in method iterativeMergesort
    public static void iterativeMergesort(int[] a) {
                       ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:6:
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:15:) in method iterativeMergesortWithoutCopy
    public static void iterativeMergesortWithoutCopy(int[] a) {
                       ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:16:
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:33:) in method merge
    private static void merge(int[] a, int[] aux, int lo, int mid, int hi) {
                        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:34:
    //@ ensures (\forall int i; lo <= i && i < hi-1; a[i] <= a[i+1]);
        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:49: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:48:) in method mergeWithoutCopy
    private static void mergeWithoutCopy(int[] from, int[] to, int lo, int mid, int hi) {
                        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:49:
    //@ ensures (\forall int i; lo <= i && i < hi-1; to[i] <= to[i+1]);
        ^
8 verification failures

public class MergeSortIterative {

    //@ requires a != null;
    //@ requires a.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
    public static void iterativeMergesort(int[] a) {
        int[] aux = new int[a.length];
        for (int blockSize = 1; blockSize < a.length; blockSize *= 2)
            for (int start = 0; start < a.length; start += 2 * blockSize)
                merge(a, aux, start, start + blockSize, Math.min(start + 2 * blockSize, a.length));
    }

    //@ requires a != null;
    //@ requires a.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
    public static void iterativeMergesortWithoutCopy(int[] a) {
        int[] from = a, to = new int[a.length];
        for (int blockSize = 1; blockSize < a.length; blockSize *= 2) {
            for (int start = 0; start < a.length; start += 2 * blockSize)
                mergeWithoutCopy(from, to, start, start + blockSize, Math.min(start + 2 * blockSize, a.length));
            int[] temp = from;
            from = to;
            to = temp;
        }
        if (a != from)
            for (int k = 0; k < a.length; k++) a[k] = from[k];
    }

    //@ requires a != null;
    //@ requires a.length > 0;
    //@ requires aux != null;
    //@ requires lo >= 0 && lo < hi && hi <= a.length;
    //@ ensures (\forall int i; lo <= i && i < hi-1; a[i] <= a[i+1]);
    private static void merge(int[] a, int[] aux, int lo, int mid, int hi) {
        int i = lo, j = mid;
        for (int k = lo; k < hi; k++) {
            if (i == mid) aux[k] = a[j++];
            else if (j == hi) aux[k] = a[i++];
            else if (a[j] < a[i]) aux[k] = a[j++];
            else aux[k] = a[i++];
        }
        for (int k = lo; k < hi; k++) a[k] = aux[k];
    }

    //@ requires from != null;
    //@ requires to != null;
    //@ requires lo >= 0 && lo < hi && hi <= from.length;
    //@ ensures (\forall int i; lo <= i && i < hi-1; to[i] <= to[i+1]);
    private static void mergeWithoutCopy(int[] from, int[] to, int lo, int mid, int hi) {
        int i = lo, j = mid;
        for (int k = lo; k < hi; k++) {
            if (i == mid) to[k] = from[j++];
            else if (j == hi) to[k] = from[i++];
            else if (from[j] < from[i]) to[k] = from[j++];
            else to[k] = from[i++];
        }
    }
}
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:5:) in method iterativeMergesort
    public static void iterativeMergesort(int[] a) {
                       ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:6:
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:15:) in method iterativeMergesortWithoutCopy
    public static void iterativeMergesortWithoutCopy(int[] a) {
                       ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:16:
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:33:) in method merge
    private static void merge(int[] a, int[] aux, int lo, int mid, int hi) {
                        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:34:
    //@ ensures (\forall int i; lo <= i && i < hi-1; a[i] <= a[i+1]);
        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:49: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:48:) in method mergeWithoutCopy
    private static void mergeWithoutCopy(int[] from, int[] to, int lo, int mid, int hi) {
                        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:49:
    //@ ensures (\forall int i; lo <= i && i < hi-1; to[i] <= to[i+1]);
        ^
8 verification failures

public class MergeSortIterative {

    //@ requires a != null;
    //@ requires a.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
    public static void iterativeMergesort(int[] a) {
        int[] aux = new int[a.length];
        for (int blockSize = 1; blockSize < a.length; blockSize *= 2)
            for (int start = 0; start < a.length; start += 2 * blockSize)
                merge(a, aux, start, start + blockSize, Math.min(start + 2 * blockSize, a.length));
    }

    //@ requires a != null;
    //@ requires a.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
    public static void iterativeMergesortWithoutCopy(int[] a) {
        int[] from = a, to = new int[a.length];
        for (int blockSize = 1; blockSize < a.length; blockSize *= 2) {
            for (int start = 0; start < a.length; start += 2 * blockSize)
                mergeWithoutCopy(from, to, start, start + blockSize, Math.min(start + 2 * blockSize, a.length));
            int[] temp = from;
            from = to;
            to = temp;
        }
        if (a != from)
            for (int k = 0; k < a.length; k++) a[k] = from[k];
    }

    //@ requires a != null;
    //@ requires a.length > 0;
    //@ requires aux != null;
    //@ requires lo >= 0 && lo < hi && hi <= a.length;
    //@ ensures (\forall int i; lo <= i && i < hi-1; a[i] <= a[i+1]);
    private static void merge(int[] a, int[] aux, int lo, int mid, int hi) {
        int i = lo, j = mid;
        for (int k = lo; k < hi; k++) {
            if (i == mid) aux[k] = a[j++];
            else if (j == hi) aux[k] = a[i++];
            else if (a[j] < a[i]) aux[k] = a[j++];
            else aux[k] = a[i++];
        }
        for (int k = lo; k < hi; k++) a[k] = aux[k];
    }

    //@ requires from != null;
    //@ requires to != null;
    //@ requires lo >= 0 && lo < hi && hi <= from.length;
    //@ ensures (\forall int i; lo <= i && i < hi-1; to[i] <= to[i+1]);
    private static void mergeWithoutCopy(int[] from, int[] to, int lo, int mid, int hi) {
        int i = lo, j = mid;
        for (int k = lo; k < hi; k++) {
            if (i == mid) to[k] = from[j++];
            else if (j == hi) to[k] = from[i++];
            else if (from[j] < from[i]) to[k] = from[j++];
            else to[k] = from[i++];
        }
    }
}
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:5:) in method iterativeMergesort
    public static void iterativeMergesort(int[] a) {
                       ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:6:
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:15:) in method iterativeMergesortWithoutCopy
    public static void iterativeMergesortWithoutCopy(int[] a) {
                       ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:16:
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:33:) in method merge
    private static void merge(int[] a, int[] aux, int lo, int mid, int hi) {
                        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:34:
    //@ ensures (\forall int i; lo <= i && i < hi-1; a[i] <= a[i+1]);
        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:49: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:48:) in method mergeWithoutCopy
    private static void mergeWithoutCopy(int[] from, int[] to, int lo, int mid, int hi) {
                        ^
/home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MergeSortIterative.java:49:
    //@ ensures (\forall int i; lo <= i && i < hi-1; to[i] <= to[i+1]);
        ^
8 verification failures

public class MergeSortIterative {

    //@ requires a != null;
    //@ requires a.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
    public static void iterativeMergesort(int[] a) {
        if (a == null || a.length <= 1) return;
        
        int[] aux = new int[a.length];
        for (int blockSize = 1; blockSize < a.length; blockSize *= 2) {
            for (int start = 0; start < a.length; start += 2 * blockSize) {
                merge(a, aux, start, start + blockSize, Math.min(start + 2 * blockSize, a.length));
            }
        }
    }

    //@ requires a != null;
    //@ requires a.length > 0;
    //@ ensures (\forall int i; 0 <= i && i < a.length-1; a[i] <= a[i+1]);
    public static void iterativeMergesortWithoutCopy(int[] a) {
        if (a == null || a.length <= 1) return;
        
        int[] from = a;
        int[] to = new int[a.length];
        for (int blockSize = 1; blockSize < a.length; blockSize *= 2) {
            for (int start = 0; start < a.length; start += 2 * blockSize) {
                mergeWithoutCopy(from, to, start, start + blockSize, Math.min(start + 2 * blockSize, a.length));
            }
            int[] temp = from;
            from = to;
            to = temp;
        }
        
        if (a != from) {
            System.arraycopy(from, 0, a, 0, a.length);
        }
    }

    //@ requires a != null;
    //@ requires aux != null;
    //@ requires lo >= 0 && lo < hi && hi <= a.length;
    //@ ensures (\forall int i; lo <= i && i < hi-1; a[i] <= a[i+1]);
    private static void merge(int[] a, int[] aux, int lo, int mid, int hi) {
        System.arraycopy(a, lo, aux, lo, hi - lo);
        
        int i = lo, j = mid;
        for (int k = lo; k < hi; k++) {
            if (i == mid) a[k] = aux[j++];
            else if (j == hi) a[k] = aux[i++];
            else if (aux[j] < aux[i]) a[k] = aux[j++];
            else a[k] = aux[i++];
        }
    }

    //@ requires from != null;
    //@ requires to != null;
    //@ requires lo >= 0 && lo < hi && hi <= from.length;
    //@ ensures (\forall int i; lo <= i && i < hi-1; to[i] <= to[i+1]);
    private static void mergeWithoutCopy(int[] from, int[] to, int lo, int mid, int hi) {
        int i = lo, j = mid;
        for (int k = lo; k < hi; k++) {
            if (i == mid) to[k] = from[j++];
            else if (j == hi) to[k] = from[i++];
            else if (from[j] < from[i]) to[k] = from[j++];
            else to[k] = from[i++];
        }
    }
}
