import java.util.Random;

public final class Verifier {
  //@ requires condition == true;
  //@ ensures \result == true;
  public static void assume(boolean condition) {
    if (!condition) {
      Runtime.getRuntime().halt(1);
    }
  }

  //@ ensures \result == true || \result == false;
  public static boolean nondetBoolean() {
    return new Random().nextBoolean();
  }

  //@ ensures \result >= Byte.MIN_VALUE && \result <= Byte.MAX_VALUE;
  public static byte nondetByte() {
    return (byte) (new Random().nextInt());
  }

  //@ ensures \result >= Character.MIN_VALUE && \result <= Character.MAX_VALUE;
  public static char nondetChar() {
    return (char) (new Random().nextInt());
  }

  //@ ensures \result >= Short.MIN_VALUE && \result <= Short.MAX_VALUE;
  public static short nondetShort() {
    return (short) (new Random().nextInt());
  }

  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondetInt() {
    return new Random().nextInt();
  }

  //@ ensures \result >= Long.MIN_VALUE && \result <= Long.MAX_VALUE;
  public static long nondetLong() {
    return new Random().nextLong();
  }

  //@ ensures \result >= 0.0 && \result < 1.0;
  public static float nondetFloat() {
    return new Random().nextFloat();
  }

  //@ ensures \result >= 0.0 && \result < 1.0;
  public static double nondetDouble() {
    return new Random().nextDouble();
  }

  //@ ensures \result != null;
  //@ ensures \result.length() >= 0;
  public static String nondetString() {
    Random random = new Random();
    int size = random.nextInt();
    assume(size >= 0);
    byte[] bytes = new byte[size];
    random.nextBytes(bytes);
    return new String(bytes);
  }
}
/home/max/Documents/JMLGPT/tmp/Verifier.java:5: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures \result == true;
               ^
1 error

import java.util.Random;

public final class Verifier {
  //@ requires condition == true;
  //@ ensures true;
  public static void assume(boolean condition) {
    if (!condition) {
      Runtime.getRuntime().halt(1);
    }
  }

  //@ ensures \result == true || \result == false;
  public static boolean nondetBoolean() {
    return new Random().nextBoolean();
  }

  //@ ensures \result >= Byte.MIN_VALUE && \result <= Byte.MAX_VALUE;
  public static byte nondetByte() {
    return (byte) (new Random().nextInt());
  }

  //@ ensures \result >= Character.MIN_VALUE && \result <= Character.MAX_VALUE;
  public static char nondetChar() {
    return (char) (new Random().nextInt());
  }

  //@ ensures \result >= Short.MIN_VALUE && \result <= Short.MAX_VALUE;
  public static short nondetShort() {
    return (short) (new Random().nextInt());
  }

  //@ ensures \result >= Integer.MIN_VALUE && \result <= Integer.MAX_VALUE;
  public static int nondetInt() {
    return new Random().nextInt();
  }

  //@ ensures \result >= Long.MIN_VALUE && \result <= Long.MAX_VALUE;
  public static long nondetLong() {
    return new Random().nextLong();
  }

  //@ ensures \result >= 0.0 && \result < 1.0;
  public static float nondetFloat() {
    return new Random().nextFloat();
  }

  //@ ensures \result >= 0.0 && \result < 1.0;
  public static double nondetDouble() {
    return new Random().nextDouble();
  }

  //@ ensures \result != null;
  //@ ensures \result.length() >= 0;
  public static String nondetString() {
    Random random = new Random();
    int size = random.nextInt();
    assume(size >= 0);
    byte[] bytes = new byte[size];
    random.nextBytes(bytes);
    return new String(bytes);
  }
}
