class SQLException extends Exception {}

class Statement {

  //@ ensures !s.contains("<bad/>");
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  //@ ensures !s.contains("<bad/>");
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  //@ ensures !s.contains("<bad/>");
  public void executeQuery(String s) {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }
}

class Connection {

  //@ ensures !s.contains("<bad/>");
  public void prepareStatement(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      assert false;
    }
  }

  //@ ensures true;
  public void close() throws SQLException {}

  //@ ensures \result != null;
  public Statement createStatement() {
    return new Statement();
  }
}

public class DriverManager {
  
  //@ ensures \result != null;
  public static Connection getConnection(String connectionString) {
    return new Connection();
  }
}
/home/max/Documents/JMLGPT/tmp/DriverManager.java:8: verify: The prover cannot establish an assertion (Assert) in method execute
      assert false;
      ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:22: verify: The prover cannot establish an assertion (Assert) in method executeQuery
      assert false;
      ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:15: verify: The prover cannot establish an assertion (Assert) in method executeUpdate
      assert false;
      ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:32: verify: The prover cannot establish an assertion (Assert) in method prepareStatement
      assert false;
      ^
4 verification failures

class SQLException extends Exception {}

class Statement {

  //@ ensures !s.contains("<bad/>");
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ ensures !s.contains("<bad/>");
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ ensures !s.contains("<bad/>");
  public void executeQuery(String s) {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }
}

class Connection {

  //@ ensures !s.contains("<bad/>");
  public void prepareStatement(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ ensures true;
  public void close() throws SQLException {}

  //@ ensures \result != null;
  public Statement createStatement() {
    return new Statement();
  }
}

public class DriverManager {
  
  //@ ensures \result != null;
  public static Connection getConnection(String connectionString) {
    return new Connection();
  }
}
/home/max/Documents/JMLGPT/tmp/DriverManager.java:22: error: unreported exception SQLException; must be caught or declared to be thrown
      throw new SQLException();
      ^
1 error

class SQLException extends Exception {}

class Statement {

  //@ ensures !s.contains("<bad/>");
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ ensures !s.contains("<bad/>");
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ ensures !s.contains("<bad/>");
  public void executeQuery(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }
}

class Connection {

  //@ ensures !s.contains("<bad/>");
  public void prepareStatement(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ ensures true;
  public void close() throws SQLException {}

  //@ ensures \result != null;
  public Statement createStatement() {
    return new Statement();
  }
}

public class DriverManager {
  
  //@ ensures \result != null;
  public static Connection getConnection(String connectionString) {
    return new Connection();
  }
}
/home/max/Documents/JMLGPT/tmp/DriverManager.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DriverManager.java:5:) in method execute
  public void execute(String s) throws SQLException {
              ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DriverManager.java:6:
  //@ ensures !s.contains("<bad/>");
      ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DriverManager.java:19:) in method executeQuery
  public void executeQuery(String s) throws SQLException {
              ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DriverManager.java:20:
  //@ ensures !s.contains("<bad/>");
      ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:13: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DriverManager.java:12:) in method executeUpdate
  public void executeUpdate(String s, Object... o) throws SQLException {
              ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DriverManager.java:13:
  //@ ensures !s.contains("<bad/>");
      ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DriverManager.java:29:) in method prepareStatement
  public void prepareStatement(String s) throws SQLException {
              ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DriverManager.java:30:
  //@ ensures !s.contains("<bad/>");
      ^
8 verification failures

class SQLException extends Exception {}

class Statement {

  //@ ensures !s.contains("<bad/>");
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ ensures !s.contains("<bad/>");
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ ensures !s.contains("<bad/>");
  public void executeQuery(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }
}

class Connection {

  //@ ensures !s.contains("<bad/>");
  public void prepareStatement(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ ensures true;
  public void close() throws SQLException {}

  //@ ensures \result != null;
  public Statement createStatement() {
    return new Statement();
  }
}

public class DriverManager {
  
  //@ ensures \result != null;
  public static Connection getConnection(String connectionString) {
    return new Connection();
  }
}
/home/max/Documents/JMLGPT/tmp/DriverManager.java:6: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DriverManager.java:5:) in method execute
  public void execute(String s) throws SQLException {
              ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DriverManager.java:6:
  //@ ensures !s.contains("<bad/>");
      ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DriverManager.java:19:) in method executeQuery
  public void executeQuery(String s) throws SQLException {
              ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DriverManager.java:20:
  //@ ensures !s.contains("<bad/>");
      ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:13: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DriverManager.java:12:) in method executeUpdate
  public void executeUpdate(String s, Object... o) throws SQLException {
              ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DriverManager.java:13:
  //@ ensures !s.contains("<bad/>");
      ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DriverManager.java:29:) in method prepareStatement
  public void prepareStatement(String s) throws SQLException {
              ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DriverManager.java:30:
  //@ ensures !s.contains("<bad/>");
      ^
8 verification failures

class SQLException extends Exception {}

class Statement {

  //@ requires s != null;
  //@ ensures !s.contains("<bad/>");
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires s != null;
  //@ ensures !s.contains("<bad/>");
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires s != null;
  //@ ensures !s.contains("<bad/>");
  public void executeQuery(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }
}

class Connection {

  //@ requires s != null;
  //@ ensures !s.contains("<bad/>");
  public void prepareStatement(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ ensures true;
  public void close() throws SQLException {}

  //@ ensures \result != null;
  public Statement createStatement() {
    return new Statement();
  }
}

public class DriverManager {
  
  //@ requires connectionString != null;
  //@ ensures \result != null;
  public static Connection getConnection(String connectionString) {
    return new Connection();
  }
}
/home/max/Documents/JMLGPT/tmp/DriverManager.java:7: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DriverManager.java:6:) in method execute
  public void execute(String s) throws SQLException {
              ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DriverManager.java:7:
  //@ ensures !s.contains("<bad/>");
      ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DriverManager.java:22:) in method executeQuery
  public void executeQuery(String s) throws SQLException {
              ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DriverManager.java:23:
  //@ ensures !s.contains("<bad/>");
      ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:15: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DriverManager.java:14:) in method executeUpdate
  public void executeUpdate(String s, Object... o) throws SQLException {
              ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DriverManager.java:15:
  //@ ensures !s.contains("<bad/>");
      ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DriverManager.java:33:) in method prepareStatement
  public void prepareStatement(String s) throws SQLException {
              ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DriverManager.java:34:
  //@ ensures !s.contains("<bad/>");
      ^
8 verification failures

class SQLException extends Exception {}

class Statement {

  //@ requires s != null;
  //@ ensures !\result.contains("<bad/>");
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires s != null;
  //@ ensures !\result.contains("<bad/>");
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires s != null;
  //@ ensures !\result.contains("<bad/>");
  public void executeQuery(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }
}

class Connection {

  //@ requires s != null;
  //@ ensures !\result.contains("<bad/>");
  public void prepareStatement(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ ensures true;
  public void close() throws SQLException {}

  //@ ensures \result != null;
  public Statement createStatement() {
    return new Statement();
  }
}

public class DriverManager {
  
  //@ requires connectionString != null;
  //@ ensures \result != null;
  public static Connection getConnection(String connectionString) {
    return new Connection();
  }
}
/home/max/Documents/JMLGPT/tmp/DriverManager.java:6: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures !\result.contains("<bad/>");
                ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:14: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures !\result.contains("<bad/>");
                ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:22: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures !\result.contains("<bad/>");
                ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:33: error: A \result expression may not be used in the specification of a method that returns void
  //@ ensures !\result.contains("<bad/>");
                ^
4 errors

class SQLException extends Exception {}

class Statement {

  //@ requires s != null;
  //@ ensures !s.contains("<bad/>");
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires s != null;
  //@ ensures !s.contains("<bad/>");
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires s != null;
  //@ ensures !s.contains("<bad/>");
  public void executeQuery(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }
}

class Connection {

  //@ requires s != null;
  //@ ensures !s.contains("<bad/>");
  public void prepareStatement(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ ensures true;
  public void close() throws SQLException {}

  //@ ensures \result != null;
  public Statement createStatement() {
    return new Statement();
  }
}

public class DriverManager {
  
  //@ requires connectionString != null;
  //@ ensures \result != null;
  public static Connection getConnection(String connectionString) {
    return new Connection();
  }
}
/home/max/Documents/JMLGPT/tmp/DriverManager.java:7: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DriverManager.java:6:) in method execute
  public void execute(String s) throws SQLException {
              ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DriverManager.java:7:
  //@ ensures !s.contains("<bad/>");
      ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DriverManager.java:22:) in method executeQuery
  public void executeQuery(String s) throws SQLException {
              ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DriverManager.java:23:
  //@ ensures !s.contains("<bad/>");
      ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:15: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DriverManager.java:14:) in method executeUpdate
  public void executeUpdate(String s, Object... o) throws SQLException {
              ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DriverManager.java:15:
  //@ ensures !s.contains("<bad/>");
      ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DriverManager.java:33:) in method prepareStatement
  public void prepareStatement(String s) throws SQLException {
              ^
/home/max/Documents/JMLGPT/tmp/DriverManager.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DriverManager.java:34:
  //@ ensures !s.contains("<bad/>");
      ^
8 verification failures

class SQLException extends Exception {}

class Statement {

  //@ requires s != null && !s.contains("<bad/>");
  public void execute(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires s != null && !s.contains("<bad/>");
  public void executeUpdate(String s, Object... o) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ requires s != null && !s.contains("<bad/>");
  public void executeQuery(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }
}

class Connection {

  //@ requires s != null && !s.contains("<bad/>");
  public void prepareStatement(String s) throws SQLException {
    if (s.contains("<bad/>")) {
      throw new SQLException();
    }
  }

  //@ ensures true;
  public void close() throws SQLException {}

  //@ ensures \result != null;
  public Statement createStatement() {
    return new Statement();
  }
}

public class DriverManager {
  
  //@ requires connectionString != null && !connectionString.contains("<bad/>");
  //@ ensures \result != null;
  public static Connection getConnection(String connectionString) {
    return new Connection();
  }
}

