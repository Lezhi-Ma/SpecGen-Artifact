class Main {
  static int field;

  //@ requires arg >= 0;
  //@ ensures \result ==> test(3, arg % 100);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires true;
  //@ ensures \result ==> (z <= 0 && y <= 0) || (z > 0 && y > 0);
  public boolean test(int x, int z) {
    System.out.println("Testing ExSymExe11");
    int y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: non-static method test(int,int) cannot be referenced from a static context
  //@ ensures \result ==> test(3, arg % 100);
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:16: error: cannot find symbol
  //@ ensures \result ==> (z <= 0 && y <= 0) || (z > 0 && y > 0);
                                     ^
  symbol:   variable y
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:16: error: cannot find symbol
  //@ ensures \result ==> (z <= 0 && y <= 0) || (z > 0 && y > 0);
                                                          ^
  symbol:   variable y
  location: class Main
3 errors

class Main {
  static int field;

  //@ requires arg >= 0;
  //@ ensures \result ==> test(3, field, arg % 100);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, field);
  }
  
  //@ requires true;
  //@ ensures \result ==> (z <= 0 && y <= 0) || (z > 0 && y > 0);
  public boolean test(int x, int z, int y) {
    System.out.println("Testing ExSymExe11");
    y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> test(3, field, arg % 100);
                                  ^
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:5: error: non-static method test(int,int,int) cannot be referenced from a static context
  //@ ensures \result ==> test(3, field, arg % 100);
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:12: error: method test in class Main cannot be applied to given types;
    return inst.test(x, field);
               ^
  required: int,int,int
  found:    int,int
  reason: actual and formal argument lists differ in length
3 errors

class Main {
  spec_public static int field;

  //@ requires arg >= 0;
  //@ ensures \result ==> inst.test(3, -3, 3, arg % 100);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, -x, 3, field);
  }
  
  //@ requires true;
  //@ ensures \result ==> (z <= 0 && y <= 0) || (z > 0 && y > 0);
  public boolean test(int x, int z, int y, int w) {
    System.out.println("Testing ExSymExe11");
    y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:2: error: <identifier> expected
  spec_public static int field;
             ^
1 error

class Main {
  //@ spec_public
  static int field;

  //@ requires arg >= 0;
  //@ ensures \result ==> inst.test(3, -3, 3, arg % 100);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    Main inst = new Main();
    field = arg % 100;
    return inst.test(x, -x, 3, field);
  }
  
  //@ requires true;
  //@ ensures \result ==> (z <= 0 && y <= 0) || (z > 0 && y > 0);
  public boolean test(int x, int z, int y, int w) {
    System.out.println("Testing ExSymExe11");
    y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:6: error: cannot find symbol
  //@ ensures \result ==> inst.test(3, -3, 3, arg % 100);
                          ^
  symbol:   variable inst
  location: class Main
1 error

class Main {
  //@ spec_public
  static int field;

  //@ requires arg >= 0;
  //@ ensures \result ==> new Main().test(3, -3, 3, field);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    field = arg % 100;
    return new Main().test(x, -x, 3, field);
  }
  
  //@ requires true;
  //@ ensures \result ==> (z <= 0 && y <= 0) || (z > 0 && y > 0);
  public boolean test(int x, int z, int y, int w) {
    System.out.println("Testing ExSymExe11");
    y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:6: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().test(3, -3, 3, field);
                          ^
1 error

class Main {
  //@ spec_public
  static int field;

  //@ requires arg >= 0;
  //@ ensures \result ==> test(3, -3, 3, arg % 100);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    field = arg % 100;
    Main inst = new Main();
    return inst.test(x, -x, 3, field);
  }
  
  //@ requires true;
  //@ ensures \result ==> (z <= 0 && y <= 0) || (z > 0 && y > 0);
  public boolean test(int x, int z, int y, int w) {
    System.out.println("Testing ExSymExe11");
    y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:6: error: non-static method test(int,int,int,int) cannot be referenced from a static context
  //@ ensures \result ==> test(3, -3, 3, arg % 100);
                          ^
1 error

class Main {
  //@ spec_public
  static int field;

  //@ requires arg >= 0;
  //@ ensures \result ==> new Main().test(3, -3, 3, field);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    field = arg % 100;
    return new Main().test(x, -x, 3, field);
  }
  
  //@ requires true;
  //@ ensures \result ==> (z <= 0 && y <= 0) || (z > 0 && y > 0);
  public boolean test(int x, int z, int y, int w) {
    System.out.println("Testing ExSymExe11");
    y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:6: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().test(3, -3, 3, field);
                          ^
1 error

class Main {
  //@ spec_public
  static int field;

  //@ requires arg >= 0;
  //@ ensures \result ==> test(3, -3, 3, arg % 100);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    field = arg % 100;
    Main inst = new Main();
    return inst.test(x, -x, 3, field);
  }
  
  //@ requires true;
  //@ ensures \result ==> (z <= 0 && y <= 0) || (z > 0 && y > 0);
  public boolean test(int x, int z, int y, int w) {
    System.out.println("Testing ExSymExe11");
    y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:6: error: non-static method test(int,int,int,int) cannot be referenced from a static context
  //@ ensures \result ==> test(3, -3, 3, arg % 100);
                          ^
1 error

class Main {
  //@ spec_public
  static int field;

  //@ requires arg >= 0;
  //@ ensures \result ==> new Main().test(3, -3, 3, field);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    field = arg % 100;
    Main inst = new Main();
    return inst.test(x, -x, 3, field);
  }
  
  //@ requires true;
  //@ ensures \result ==> (z <= 0 && y <= 0) || (z > 0 && y > 0);
  public boolean test(int x, int z, int y, int w) {
    System.out.println("Testing ExSymExe11");
    y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:6: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().test(3, -3, 3, field);
                          ^
1 error

class Main {
  //@ spec_public
  static int field;

  //@ requires arg >= 0;
  //@ ensures \result ==> test(3, -3, 3, field);
  public static boolean f(int arg) {
    if (arg < 0)
      return true;
    int x = 3;
    field = arg % 100;
    Main inst = new Main();
    return inst.test(x, -x, 3, field);
  }
  
  //@ requires true;
  //@ ensures \result ==> (z <= 0 && y <= 0) || (z > 0 && y > 0);
  public boolean test(int x, int z, int y, int w) {
    System.out.println("Testing ExSymExe11");
    y = 3;
    z = -x;
    x = z * x;
    if (z <= 0) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (y <= 0) {
      System.out.println("branch BOO1");
      return false;
    } else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe11.java:6: error: non-static method test(int,int,int,int) cannot be referenced from a static context
  //@ ensures \result ==> test(3, -3, 3, field);
                          ^
1 error

