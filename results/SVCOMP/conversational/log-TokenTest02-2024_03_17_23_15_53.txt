public class TokenTest02 {
  //@ requires sentence != null;
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
  //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
  public static boolean f() {
    String[] tokens = sentence.split(" ");

    int i = 0;
    //@ maintaining 0 <= i && i <= tokens.length;
    //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> (j < 3 ==> tokens[j].equals("genneration")));
    //@ decreases tokens.length - i;
    for (String token : tokens) {
      if (i == 3)
        if (!token.equals("genneration"))
          return false;
      ++i;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
  //@ requires sentence != null;
               ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
                                                           ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
                                                                                               ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
  //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
                                                             ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
  //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
                                                                                                 ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:6: error: cannot find symbol
    String[] tokens = sentence.split(" ");
                      ^
  symbol:   variable sentence
  location: class TokenTest02
6 errors

public class TokenTest02 {
  //@ requires sentence != null;
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
  //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
  public static boolean f() {
    String sentence = "your sentence here";
    String[] tokens = sentence.split(" ");

    int i = 0;
    //@ maintaining 0 <= i && i <= tokens.length;
    //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> (j < 3 ==> tokens[j].equals("genneration")));
    //@ decreases tokens.length - i;
    for (String token : tokens) {
      if (i == 3)
        if (!token.equals("genneration"))
          return false;
      ++i;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:2: error: cannot find symbol
  //@ requires sentence != null;
               ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
                                                           ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
                                                                                               ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
  //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
                                                             ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
  //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
                                                                                                 ^
  symbol:   variable tokens
  location: class TokenTest02
5 errors

public class TokenTest02 {
  //@ requires true; // You can add specific requirements here
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
  //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
  public static boolean f() {
    String sentence = "your sentence here";
    String[] tokens = sentence.split(" ");

    int i = 0;
    //@ maintaining 0 <= i && i <= tokens.length;
    //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> (j < 3 ==> tokens[j].equals("genneration")));
    //@ decreases tokens.length - i;
    for (String token : tokens) {
      if (i == 3)
        if (!token.equals("genneration"))
          return false;
      ++i;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
                                                           ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; tokens[i].equals("genneration")) && tokens.length >= 4;
                                                                                               ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
  //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
                                                             ^
  symbol:   variable tokens
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
  //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !tokens[i].equals("genneration")) || tokens.length < 4;
                                                                                                 ^
  symbol:   variable tokens
  location: class TokenTest02
4 errors

public class TokenTest02 {
  //@ requires true; // You can add specific requirements here
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("genneration")) && sentence.split(" ").length >= 4;
  //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !sentence.split(" ")[i].equals("genneration")) || sentence.split(" ").length < 4;
  public static boolean f() {
    String sentence = "your sentence here";

    int i = 0;
    //@ maintaining 0 <= i && i <= sentence.split(" ").length;
    //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> (j < 3 ==> sentence.split(" ")[j].equals("genneration")));
    //@ decreases sentence.split(" ").length - i;
    for (String token : sentence.split(" ")) {
      if (i == 3)
        if (!token.equals("genneration"))
          return false;
      ++i;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("genneration")) && sentence.split(" ").length >= 4;
                                                           ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: error: cannot find symbol
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("genneration")) && sentence.split(" ").length >= 4;
                                                                                                            ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
  //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !sentence.split(" ")[i].equals("genneration")) || sentence.split(" ").length < 4;
                                                             ^
  symbol:   variable sentence
  location: class TokenTest02
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:4: error: cannot find symbol
  //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !sentence.split(" ")[i].equals("genneration")) || sentence.split(" ").length < 4;
                                                                                                              ^
  symbol:   variable sentence
  location: class TokenTest02
4 errors

public class TokenTest02 {
  //@ requires true; // You can add specific requirements here
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("genneration")) && sentence.split(" ").length >= 4;
  //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !sentence.split(" ")[i].equals("genneration")) || sentence.split(" ").length < 4;
  public static boolean f(String sentence) {
    int i = 0;
    //@ maintaining 0 <= i && i <= sentence.split(" ").length;
    //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> (j < 3 ==> sentence.split(" ")[j].equals("genneration")));
    //@ decreases sentence.split(" ").length - i;
    for (String token : sentence.split(" ")) {
      if (i == 3)
        if (!token.equals("genneration"))
          return false;
      ++i;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
    return true;
    ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:16:
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("genneration")) && sentence.split(" ").length >= 4;
      ^
2 verification failures

public class TokenTest02 {
  //@ requires sentence != null;
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("genneration")) && sentence.split(" ").length >= 4;
  //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !sentence.split(" ")[i].equals("genneration")) || sentence.split(" ").length < 4;
  public static boolean f(String sentence) {
    int i = 0;
    //@ maintaining 0 <= i && i <= sentence.split(" ").length;
    //@ maintaining (\forall int j; 0 <= j && j < i; i == 3 ==> (j < 3 ==> sentence.split(" ")[j].equals("genneration")));
    //@ decreases sentence.split(" ").length - i;
    for (String token : sentence.split(" ")) {
      if (i == 3)
        if (!token.equals("genneration"))
          return false;
      ++i;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:3:) in method f
    return true;
    ^
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:16:
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("genneration")) && sentence.split(" ").length >= 4;
      ^
2 verification failures

public class TokenTest02 {
  //@ requires sentence != null;
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("genneration")) && sentence.split(" ").length >= 4;
  //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !sentence.split(" ")[i].equals("genneration")) || sentence.split(" ").length < 4;
  public static boolean f(String sentence) {
    if (sentence == null) {
      return false;
    }
    
    String[] tokens = sentence.split(" ");
    
    if (tokens.length < 4) {
      return false;
    }
    
    boolean allMatch = true;
    for (int i = 0; i < 3; i++) {
      if (!tokens[i].equals("genneration")) {
        allMatch = false;
        break;
      }
    }
    
    return allMatch;
  }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:18: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method f
      if (!tokens[i].equals("genneration")) {
                 ^
1 verification failure

public class TokenTest02 {
  //@ requires sentence != null;
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("genneration")) && sentence.split(" ").length >= 4;
  //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !sentence.split(" ")[i].equals("genneration")) || sentence.split(" ").length < 4;
  public static boolean f(String sentence) {
    if (sentence == null) {
      return false;
    }
    
    String[] tokens = sentence.split(" ");
    
    if (tokens.length < 4) {
      return false;
    }
    
    boolean allMatch = true;
    for (int i = 0; i < 3; i++) {
      //@ assume i >= 0;
      if (!tokens[i].equals("genneration")) {
        allMatch = false;
        break;
      }
    }
    
    return allMatch;
  }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:19: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: TokenTest02.f(java.lang.String), Callee: java.lang.String.equals(java.lang.Object))
      if (!tokens[i].equals("genneration")) {
                           ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:19:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class TokenTest02 {
  //@ requires sentence != null;
  //@ ensures \result ==> (\forall int i; 0 <= i && i < 3; sentence.split(" ")[i].equals("genneration")) && sentence.split(" ").length >= 4;
  //@ ensures !\result ==> (\exists int i; 0 <= i && i < 3; !sentence.split(" ")[i].equals("genneration")) || sentence.split(" ").length < 4;
  public static boolean f(String sentence) {
    if (sentence == null) {
      return false;
    }
    
    String[] tokens = sentence.split(" ");
    
    if (tokens.length < 4) {
      return false;
    }
    
    boolean allMatch = true;
    for (int i = 0; i < 3; i++) {
      //@ assume i >= 0;
      if (!tokens[i].equals("genneration")) {
        allMatch = false;
        break;
      }
    }
    
    return allMatch;
  }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:19: verify: The prover cannot establish an assertion (InvariantLeaveCaller: /home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30:) in method f: (Caller: TokenTest02.f(java.lang.String), Callee: java.lang.String.equals(java.lang.Object))
      if (!tokens[i].equals("genneration")) {
                           ^
/home/max/Documents/JMLGPT/openjml/specs/java/lang/CharSequence.jml:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/TokenTest02.java:19:
	//-RAC@ public invariant charArray != null; // FIXME - why this when there is a non_null declaration
	               ^
2 verification failures

public class TokenTest02 {
  
  public static boolean f(String sentence) {
    if (sentence == null) {
      return false;
    }
    
    String[] tokens = sentence.split(" ");
    
    if (tokens.length < 4) {
      return false;
    }
    
    boolean allMatch = true;
    for (int i = 0; i < 3; i++) {
      if (i < tokens.length && !tokens[i].equals("genneration")) {
        allMatch = false;
        break;
      }
    }
    
    return allMatch;
  }
}
/home/max/Documents/JMLGPT/tmp/TokenTest02.java:16: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method f
      if (i < tokens.length && !tokens[i].equals("genneration")) {
                                      ^
1 verification failure

