import java.io.IOException;
import java.io.PrintWriter;

public class HttpServletResponse {

  //@ requires string != null;
  //@ requires !string.contains("<bad/>");
  //@ ensures true;
  public void sendRedirect(String string) throws IOException {
    checkNoSymbolic(string);
  }

  //@ ensures \result != null;
  //@ ensures \result.checkNoSymbolic(x) == true;
  public PrintWriter getWriter() throws IOException {
    return new PrintWriter(System.out) {
      //@ requires x != null;
      //@ requires !x.contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(String x) {
        checkNoSymbolic(x);
      }

      //@ requires x != null;
      //@ requires !String.valueOf(x).contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(Object x) {
        checkNoSymbolic(String.valueOf(x));
      }
    };
  }

  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void setContentType(String s) {
    checkNoSymbolic(s);
  }

  //@ requires s != null;
  //@ ensures s != null ==> s.contains("<bad/>") ==> false;
  private void checkNoSymbolic(String s) {
    if (s != null && s.contains("<bad/>")) {
      assert false;
    }
  }
}
/home/max/Documents/JMLGPT/tmp/HttpServletResponse.java:14: error: cannot find symbol
  //@ ensures \result.checkNoSymbolic(x) == true;
                                      ^
  symbol:   variable x
  location: class HttpServletResponse
1 error

import java.io.IOException;
import java.io.PrintWriter;

public class HttpServletResponse {

  //@ requires string != null;
  //@ requires !string.contains("<bad/>");
  //@ ensures true;
  public void sendRedirect(String string) throws IOException {
    checkNoSymbolic(string);
  }

  //@ ensures \result != null;
  //@ ensures \result.checkNoSymbolic(x) == true;
  public PrintWriter getWriter() throws IOException {
    return new PrintWriter(System.out) {
      //@ requires x != null;
      //@ requires !x.contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(String x) {
        checkNoSymbolic(x);
      }

      //@ requires x != null;
      //@ requires !String.valueOf(x).contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(Object x) {
        checkNoSymbolic(String.valueOf(x));
      }
    };
  }

  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void setContentType(String s) {
    checkNoSymbolic(s);
  }

  //@ requires s != null;
  //@ ensures s != null ==> s.contains("<bad/>") ==> false;
  private void checkNoSymbolic(String s) {
    if (s != null && s.contains("<bad/>")) {
      assert false;
    }
  }
}
/home/max/Documents/JMLGPT/tmp/HttpServletResponse.java:14: error: cannot find symbol
  //@ ensures \result.checkNoSymbolic(x) == true;
                                      ^
  symbol:   variable x
  location: class HttpServletResponse
1 error

import java.io.IOException;
import java.io.PrintWriter;

public class HttpServletResponse {

  //@ requires string != null;
  //@ requires !string.contains("<bad/>");
  //@ ensures true;
  public void sendRedirect(String string) throws IOException {
    checkNoSymbolic(string);
  }

  //@ ensures \result != null;
  //@ ensures \result != null ==> \result.checkNoSymbolic(x) == true;
  public PrintWriter getWriter() throws IOException {
    return new PrintWriter(System.out) {
      //@ requires x != null;
      //@ requires !x.contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(String x) {
        checkNoSymbolic(x);
      }

      //@ requires x != null;
      //@ requires !String.valueOf(x).contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(Object x) {
        checkNoSymbolic(String.valueOf(x));
      }
    };
  }

  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void setContentType(String s) {
    checkNoSymbolic(s);
  }

  //@ requires s != null;
  //@ ensures s != null ==> s.contains("<bad/>") ==> false;
  private void checkNoSymbolic(String s) {
    if (s != null && s.contains("<bad/>")) {
      assert false;
    }
  }
}
/home/max/Documents/JMLGPT/tmp/HttpServletResponse.java:14: error: cannot find symbol
  //@ ensures \result != null ==> \result.checkNoSymbolic(x) == true;
                                                          ^
  symbol:   variable x
  location: class HttpServletResponse
1 error

import java.io.IOException;
import java.io.PrintWriter;

public class HttpServletResponse {

  //@ requires string != null;
  //@ requires !string.contains("<bad/>");
  //@ ensures true;
  public void sendRedirect(String string) throws IOException {
    checkNoSymbolic(string);
  }

  //@ ensures \result != null;
  //@ ensures \result != null ==> \result.checkNoSymbolic(x) == true;
  public PrintWriter getWriter() throws IOException {
    return new PrintWriter(System.out) {
      //@ requires x != null;
      //@ requires !x.contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(String x) {
        checkNoSymbolic(x);
      }

      //@ requires x != null;
      //@ requires !String.valueOf(x).contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(Object x) {
        checkNoSymbolic(String.valueOf(x));
      }
    };
  }

  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void setContentType(String s) {
    checkNoSymbolic(s);
  }

  //@ requires s != null;
  //@ ensures s != null ==> s.contains("<bad/>") ==> false;
  private void checkNoSymbolic(String s) {
    if (s != null && s.contains("<bad/>")) {
      assert false;
    }
  }
}
/home/max/Documents/JMLGPT/tmp/HttpServletResponse.java:14: error: cannot find symbol
  //@ ensures \result != null ==> \result.checkNoSymbolic(x) == true;
                                                          ^
  symbol:   variable x
  location: class HttpServletResponse
1 error

import java.io.IOException;
import java.io.PrintWriter;

public class HttpServletResponse {

  //@ requires string != null;
  //@ requires !string.contains("<bad/>");
  //@ ensures true;
  public void sendRedirect(String string) throws IOException {
    checkNoSymbolic(string);
  }

  //@ ensures \result != null;
  //@ ensures \result != null ==> \result.checkNoSymbolic(x) == true;
  public PrintWriter getWriter() throws IOException {
    return new PrintWriter(System.out) {
      //@ requires x != null;
      //@ requires !x.contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(String x) {
        checkNoSymbolic(x);
      }

      //@ requires x != null;
      //@ requires !String.valueOf(x).contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(Object x) {
        checkNoSymbolic(String.valueOf(x));
      }
    };
  }

  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void setContentType(String s) {
    checkNoSymbolic(s);
  }

  //@ requires s != null;
  //@ ensures s != null ==> s.contains("<bad/>") ==> false;
  private void checkNoSymbolic(String s) {
    if (s != null && s.contains("<bad/>")) {
      assert false;
    }
  }
}
/home/max/Documents/JMLGPT/tmp/HttpServletResponse.java:14: error: cannot find symbol
  //@ ensures \result != null ==> \result.checkNoSymbolic(x) == true;
                                                          ^
  symbol:   variable x
  location: class HttpServletResponse
1 error

import java.io.IOException;
import java.io.PrintWriter;

public class HttpServletResponse {

  //@ requires string != null;
  //@ requires !string.contains("<bad/>");
  //@ ensures true;
  public void sendRedirect(String string) throws IOException {
    checkNoSymbolic(string);
  }

  //@ ensures \result != null;
  //@ ensures \result != null ==> \result.checkNoSymbolic(x) == true;
  public PrintWriter getWriter() throws IOException {
    return new PrintWriter(System.out) {
      //@ requires x != null;
      //@ requires !x.contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(String x) {
        checkNoSymbolic(x);
      }

      //@ requires x != null;
      //@ requires !String.valueOf(x).contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(Object x) {
        checkNoSymbolic(String.valueOf(x));
      }
    };
  }

  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void setContentType(String s) {
    checkNoSymbolic(s);
  }

  //@ requires s != null;
  //@ ensures s != null ==> s.contains("<bad/>") ==> false;
  private void checkNoSymbolic(String s) {
    if (s != null && s.contains("<bad/>")) {
      assert false;
    }
  }
}
/home/max/Documents/JMLGPT/tmp/HttpServletResponse.java:14: error: cannot find symbol
  //@ ensures \result != null ==> \result.checkNoSymbolic(x) == true;
                                                          ^
  symbol:   variable x
  location: class HttpServletResponse
1 error

import java.io.IOException;
import java.io.PrintWriter;

public class HttpServletResponse {

  //@ requires string != null;
  //@ requires !string.contains("<bad/>");
  //@ ensures true;
  public void sendRedirect(String string) throws IOException {
    checkNoSymbolic(string);
  }

  //@ ensures \result != null;
  //@ ensures \result != null ==> \result.checkNoSymbolic(x) == true;
  public PrintWriter getWriter() throws IOException {
    return new PrintWriter(System.out) {
      //@ requires x != null;
      //@ requires !x.contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(String x) {
        checkNoSymbolic(x);
      }

      //@ requires x != null;
      //@ requires !String.valueOf(x).contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(Object x) {
        checkNoSymbolic(String.valueOf(x));
      }
    };
  }

  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void setContentType(String s) {
    checkNoSymbolic(s);
  }

  //@ requires s != null;
  //@ ensures s != null ==> s.contains("<bad/>") ==> false;
  private void checkNoSymbolic(String s) {
    if (s != null && s.contains("<bad/>")) {
      assert false;
    }
  }
}
/home/max/Documents/JMLGPT/tmp/HttpServletResponse.java:14: error: cannot find symbol
  //@ ensures \result != null ==> \result.checkNoSymbolic(x) == true;
                                                          ^
  symbol:   variable x
  location: class HttpServletResponse
1 error

import java.io.IOException;
import java.io.PrintWriter;

public class HttpServletResponse {

  //@ requires string != null;
  //@ requires !string.contains("<bad/>");
  //@ ensures true;
  public void sendRedirect(String string) throws IOException {
    checkNoSymbolic(string);
  }

  //@ ensures \result != null;
  //@ ensures \result != null ==> \result.checkNoSymbolic(x) == true;
  public PrintWriter getWriter() throws IOException {
    return new PrintWriter(System.out) {
      //@ requires x != null;
      //@ requires !x.contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(String x) {
        checkNoSymbolic(x);
      }

      //@ requires x != null;
      //@ requires !String.valueOf(x).contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(Object x) {
        checkNoSymbolic(String.valueOf(x));
      }
    };
  }

  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void setContentType(String s) {
    checkNoSymbolic(s);
  }

  //@ requires s != null;
  //@ ensures s != null ==> s.contains("<bad/>") ==> false;
  private void checkNoSymbolic(String s) {
    if (s != null && s.contains("<bad/>")) {
      assert false;
    }
  }
}
/home/max/Documents/JMLGPT/tmp/HttpServletResponse.java:14: error: cannot find symbol
  //@ ensures \result != null ==> \result.checkNoSymbolic(x) == true;
                                                          ^
  symbol:   variable x
  location: class HttpServletResponse
1 error

import java.io.IOException;
import java.io.PrintWriter;

public class HttpServletResponse {

  //@ requires string != null;
  //@ requires !string.contains("<bad/>");
  //@ ensures true;
  public void sendRedirect(String string) throws IOException {
    checkNoSymbolic(string);
  }

  //@ ensures \result != null;
  //@ ensures \result != null ==> \result.checkNoSymbolic(x) == true;
  public PrintWriter getWriter() throws IOException {
    return new PrintWriter(System.out) {
      //@ requires x != null;
      //@ requires !x.contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(String x) {
        checkNoSymbolic(x);
      }

      //@ requires x != null;
      //@ requires !String.valueOf(x).contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(Object x) {
        checkNoSymbolic(String.valueOf(x));
      }
    };
  }

  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void setContentType(String s) {
    checkNoSymbolic(s);
  }

  //@ requires s != null;
  //@ ensures s != null ==> s.contains("<bad/>") ==> false;
  private void checkNoSymbolic(String s) {
    if (s != null && s.contains("<bad/>")) {
      assert false;
    }
  }
}
/home/max/Documents/JMLGPT/tmp/HttpServletResponse.java:14: error: cannot find symbol
  //@ ensures \result != null ==> \result.checkNoSymbolic(x) == true;
                                                          ^
  symbol:   variable x
  location: class HttpServletResponse
1 error

import java.io.IOException;
import java.io.PrintWriter;

public class HttpServletResponse {

  //@ requires string != null;
  //@ requires !string.contains("<bad/>");
  //@ ensures true;
  public void sendRedirect(String string) throws IOException {
    checkNoSymbolic(string);
  }

  //@ ensures \result != null;
  //@ ensures \result != null ==> \result.checkNoSymbolic(x) == true;
  public PrintWriter getWriter() throws IOException {
    return new PrintWriter(System.out) {
      //@ requires x != null;
      //@ requires !x.contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(String x) {
        checkNoSymbolic(x);
      }

      //@ requires x != null;
      //@ requires !String.valueOf(x).contains("<bad/>");
      //@ ensures true;
      @Override
      public void println(Object x) {
        checkNoSymbolic(String.valueOf(x));
      }
    };
  }

  //@ requires s != null;
  //@ requires !s.contains("<bad/>");
  //@ ensures true;
  public void setContentType(String s) {
    checkNoSymbolic(s);
  }

  //@ requires s != null;
  //@ ensures s != null ==> s.contains("<bad/>") ==> false;
  private void checkNoSymbolic(String s) {
    if (s != null && s.contains("<bad/>")) {
      assert false;
    }
  }
}
/home/max/Documents/JMLGPT/tmp/HttpServletResponse.java:14: error: cannot find symbol
  //@ ensures \result != null ==> \result.checkNoSymbolic(x) == true;
                                                          ^
  symbol:   variable x
  location: class HttpServletResponse
1 error

