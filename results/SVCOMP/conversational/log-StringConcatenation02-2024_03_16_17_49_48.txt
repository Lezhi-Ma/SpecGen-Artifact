public class StringConcatenation02 {
    //@ requires arg1 != null && arg2 != null;
    //@ requires arg1.length() + arg2.length() + 1 <= Integer.MAX_VALUE;
    //@ ensures \result == true || \result == false;
    public static boolean f(String arg1, String arg2) {
        String[] args = new String[2];
        args[0] = arg1;
        args[1] = arg2;

        String s1 = args[0];
        String s2 = args[1];
        
        //@ assert s1.equals(args[0]);
        //@ assert s2.equals(args[1]);
        
        if (!s1.equals(args[0] + " ")) {
            return false;
        }
        if (!s2.equals(args[1])) {
            return false;
        }
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 17825792 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14436.log

public class StringConcatenation02 {
    //@ requires arg1 != null && arg2 != null;
    //@ requires arg1.length() + arg2.length() + 1 <= Integer.MAX_VALUE;
    //@ ensures \result == true || \result == false;
    public static boolean f(String arg1, String arg2) {
        String[] args = new String[2];
        args[0] = arg1;
        args[1] = arg2;

        String s1 = args[0];
        String s2 = args[1];
        
        //@ assert s1.equals(args[0]);
        //@ assert s2.equals(args[1]);
        
        if (!s1.equals(args[0] + " ")) {
            return false;
        }
        if (!s2.equals(args[1])) {
            return false;
        }
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 30408704 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14471.log

public class StringConcatenation02 {
    //@ requires arg1 != null && arg2 != null;
    //@ requires arg1.length() + arg2.length() + 1 <= Integer.MAX_VALUE;
    //@ ensures \result == true || \result == false;
    public static boolean f(String arg1, String arg2) {
        String[] args = new String[2];
        args[0] = arg1;
        args[1] = arg2;

        String s1 = args[0];
        String s2 = args[1];
        
        //@ assert s1.equals(args[0]);
        //@ assert s2.equals(args[1]);
        
        if (!s1.equals(args[0] + " ")) {
            return false;
        }
        if (!s2.equals(args[1])) {
            return false;
        }
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 25165824 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14500.log

public class StringConcatenation02 {
    //@ requires arg1 != null && arg2 != null;
    //@ requires arg1.length() + arg2.length() + 1 <= Integer.MAX_VALUE;
    //@ ensures \result == true || \result == false;
    public static boolean f(String arg1, String arg2) {
        String[] args = new String[2];
        args[0] = arg1;
        args[1] = arg2;

        String s1 = args[0];
        String s2 = args[1];
        
        //@ assert s1.equals(args[0]);
        //@ assert s2.equals(args[1]);
        
        if (!s1.equals(args[0] + " ")) {
            return false;
        }
        if (!s2.equals(args[1])) {
            return false;
        }
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 13631488 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14529.log

public class StringConcatenation02 {
    //@ requires arg1 != null && arg2 != null;
    //@ requires arg1.length() + arg2.length() + 1 <= Integer.MAX_VALUE;
    //@ ensures \result == true || \result == false;
    public static boolean f(String arg1, String arg2) {
        String[] args = new String[2];
        args[0] = arg1;
        args[1] = arg2;

        String s1 = args[0];
        String s2 = args[1];
        
        //@ assert s1.equals(args[0]);
        //@ assert s2.equals(args[1]);
        
        if (!s1.equals(args[0] + " ")) {
            return false;
        }
        if (!s2.equals(args[1])) {
            return false;
        }
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 39845888 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14558.log

public class StringConcatenation02 {
    //@ requires arg1 != null && arg2 != null;
    //@ requires arg1.length() + arg2.length() + 1 <= Integer.MAX_VALUE;
    //@ ensures \result == true || \result == false;
    public static boolean f(String arg1, String arg2) {
        String[] args = new String[2];
        args[0] = arg1;
        args[1] = arg2;

        String s1 = args[0];
        String s2 = args[1];
        
        //@ assert s1.equals(args[0]);
        //@ assert s2.equals(args[1]);
        
        if (!s1.equals(args[0] + " ")) {
            return false;
        }
        if (!s2.equals(args[1])) {
            return false;
        }
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 65536 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14588.log
#
# Compiler replay data is saved as:
# /home/max/Documents/JMLGPT/replay_pid14588.log

public class StringConcatenation02 {
    //@ requires arg1 != null && arg2 != null;
    //@ requires arg1.length() + arg2.length() + 1 <= Integer.MAX_VALUE;
    //@ ensures \result == true || \result == false;
    public static boolean f(String arg1, String arg2) {
        String[] args = new String[2];
        args[0] = arg1;
        args[1] = arg2;

        String s1 = args[0];
        String s2 = args[1];
        
        //@ assert s1.equals(args[0]);
        //@ assert s2.equals(args[1]);
        
        if (!s1.equals(args[0] + " ")) {
            return false;
        }
        if (!s2.equals(args[1])) {
            return false;
        }
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 13631488 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14621.log

public class StringConcatenation02 {
    //@ requires arg1 != null && arg2 != null;
    //@ requires arg1.length() + arg2.length() + 1 <= Integer.MAX_VALUE;
    //@ ensures \result == true || \result == false;
    public static boolean f(String arg1, String arg2) {
        String[] args = new String[2];
        args[0] = arg1;
        args[1] = arg2;

        String s1 = args[0];
        String s2 = args[1];
        
        //@ assert s1.equals(args[0]);
        //@ assert s2.equals(args[1]);
        
        if (!s1.equals(args[0] + " ")) {
            return false;
        }
        if (!s2.equals(args[1])) {
            return false;
        }
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 18874368 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14651.log

public class StringConcatenation02 {
    //@ requires arg1 != null && arg2 != null;
    //@ requires arg1.length() + arg2.length() + 1 <= Integer.MAX_VALUE;
    //@ ensures \result == true || \result == false;
    public static boolean f(String arg1, String arg2) {
        String[] args = new String[2];
        args[0] = arg1;
        args[1] = arg2;

        String s1 = args[0];
        String s2 = args[1];
        
        //@ assert s1.equals(args[0]);
        //@ assert s2.equals(args[1]);
        
        if (!s1.equals(args[0] + " ")) {
            return false;
        }
        if (!s2.equals(args[1])) {
            return false;
        }
        return true;
    }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 14680064 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14680.log

public class StringConcatenation02 {
    //@ requires arg1 != null && arg2 != null;
    //@ requires arg1.length() + arg2.length() + 1 <= Integer.MAX_VALUE;
    //@ ensures \result == true || \result == false;
    public static boolean f(String arg1, String arg2) {
        String[] args = new String[2];
        args[0] = arg1;
        args[1] = arg2;

        String s1 = args[0];
        String s2 = args[1];
        
        //@ assert s1.equals(args[0]);
        //@ assert s2.equals(args[1]);
        
        if (!s1.equals(args[0] + " ")) {
            return false;
        }
        if (!s2.equals(args[1])) {
            return false;
        }
        return true;
    }
}

