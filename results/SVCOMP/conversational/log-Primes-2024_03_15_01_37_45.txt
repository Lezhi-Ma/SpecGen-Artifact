public class Primes {

    //@ requires m >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == n*m;
    public static int mult(int n, int m) {
        if (m < 0) {
            return mult(n, -m);
        }
        if (m == 0) {
            return 0;
        }
        if (m == 1) {
            return 1;
        }
        return n + mult(n, m - 1);
    }

    //@ requires m >= 0 && n >= 0;
    //@ ensures \result == 0 ==> n is not a multiple of m;
    //@ ensures \result == 1 ==> n is a multiple of m;
    public static int multiple_of(int n, int m) {
        if (m < 0) {
            return multiple_of(n, -m);
        }
        if (n < 0) {
            return multiple_of(-n, m); // false
        }
        if (m == 0) {
            return 0; // false
        }
        if (n == 0) {
            return 1; // true
        }
        return multiple_of(n - m, m);
    }

    //@ requires n >= 0;
    //@ ensures \result == 0 ==> n is not a prime number;
    //@ ensures \result == 1 ==> n is a prime number;
    public static int is_prime(int n) {
        return is_prime_(n, n - 1);
    }

    //@ requires n >= 0 && m >= 0;
    //@ ensures \result == 0 ==> n is not a prime number;
    //@ ensures \result == 1 ==> n is a prime number;
    public static int is_prime_(int n, int m) {
        if (n <= 1) {
            return 0; // false
        } else if (n == 2) {
            return 1; // true
        } else {
            if (m <= 1) {
                return 1; // true
            } else {
                if (multiple_of(n, m) == 0) {
                    return 0; // false
                }
                return is_prime_(n, m - 1);
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Primes.java:20: error: Incorrectly formed or terminated ensures statement near here
    //@ ensures \result == 0 ==> n is not a multiple of m;
                                   ^
/home/max/Documents/JMLGPT/tmp/Primes.java:21: error: Incorrectly formed or terminated ensures statement near here
    //@ ensures \result == 1 ==> n is a multiple of m;
                                   ^
/home/max/Documents/JMLGPT/tmp/Primes.java:39: error: Incorrectly formed or terminated ensures statement near here
    //@ ensures \result == 0 ==> n is not a prime number;
                                   ^
/home/max/Documents/JMLGPT/tmp/Primes.java:40: error: Incorrectly formed or terminated ensures statement near here
    //@ ensures \result == 1 ==> n is a prime number;
                                   ^
/home/max/Documents/JMLGPT/tmp/Primes.java:46: error: Incorrectly formed or terminated ensures statement near here
    //@ ensures \result == 0 ==> n is not a prime number;
                                   ^
/home/max/Documents/JMLGPT/tmp/Primes.java:47: error: Incorrectly formed or terminated ensures statement near here
    //@ ensures \result == 1 ==> n is a prime number;
                                   ^
6 errors

public class Primes {

    //@ requires m >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == n*m;
    public static int mult(int n, int m) {
        if (m < 0) {
            return mult(n, -m);
        }
        if (m == 0) {
            return 0;
        }
        if (m == 1) {
            return 1;
        }
        return n + mult(n, m - 1);
    }

    //@ requires m >= 0 && n >= 0;
    //@ ensures \result == 0 <==> n is not a multiple of m;
    //@ ensures \result == 1 <==> n is a multiple of m;
    public static int multiple_of(int n, int m) {
        if (m < 0) {
            return multiple_of(n, -m);
        }
        if (n < 0) {
            return multiple_of(-n, m); // false
        }
        if (m == 0) {
            return 0; // false
        }
        if (n == 0) {
            return 1; // true
        }
        return multiple_of(n - m, m);
    }

    //@ requires n >= 0;
    //@ ensures \result == 0 <==> n is not a prime number;
    //@ ensures \result == 1 <==> n is a prime number;
    public static int is_prime(int n) {
        return is_prime_(n, n - 1);
    }

    //@ requires n >= 0 && m >= 0;
    //@ ensures \result == 0 <==> n is not a prime number;
    //@ ensures \result == 1 <==> n is a prime number;
    public static int is_prime_(int n, int m) {
        if (n <= 1) {
            return 0; // false
        } else if (n == 2) {
            return 1; // true
        } else {
            if (m <= 1) {
                return 1; // true
            } else {
                if (multiple_of(n, m) == 0) {
                    return 0; // false
                }
                return is_prime_(n, m - 1);
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Primes.java:20: error: Incorrectly formed or terminated ensures statement near here
    //@ ensures \result == 0 <==> n is not a multiple of m;
                                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:21: error: Incorrectly formed or terminated ensures statement near here
    //@ ensures \result == 1 <==> n is a multiple of m;
                                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:39: error: Incorrectly formed or terminated ensures statement near here
    //@ ensures \result == 0 <==> n is not a prime number;
                                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:40: error: Incorrectly formed or terminated ensures statement near here
    //@ ensures \result == 1 <==> n is a prime number;
                                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:46: error: Incorrectly formed or terminated ensures statement near here
    //@ ensures \result == 0 <==> n is not a prime number;
                                    ^
/home/max/Documents/JMLGPT/tmp/Primes.java:47: error: Incorrectly formed or terminated ensures statement near here
    //@ ensures \result == 1 <==> n is a prime number;
                                    ^
6 errors

public class Primes {

    //@ requires m >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == n*m;
    public static int mult(int n, int m) {
        if (m < 0) {
            return mult(n, -m);
        }
        if (m == 0) {
            return 0;
        }
        if (m == 1) {
            return 1;
        }
        return n + mult(n, m - 1);
    }

    //@ requires m >= 0 && n >= 0;
    //@ ensures \result == (n % m == 0) ? 1 : 0;
    public static int multiple_of(int n, int m) {
        if (m < 0) {
            return multiple_of(n, -m);
        }
        if (n < 0) {
            return multiple_of(-n, m); // false
        }
        if (m == 0) {
            return 0; // false
        }
        if (n == 0) {
            return 1; // true
        }
        return multiple_of(n - m, m);
    }

    //@ requires n >= 0;
    //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
    public static int is_prime(int n) {
        return is_prime_(n, n - 1);
    }

    //@ requires n >= 0 && m >= 0;
    //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
    public static int is_prime_(int n, int m) {
        if (n <= 1) {
            return 0; // false
        } else if (n == 2) {
            return 1; // true
        } else {
            if (m <= 1) {
                return 1; // true
            } else {
                if (multiple_of(n, m) == 0) {
                    return 0; // false
                }
                return is_prime_(n, m - 1);
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Primes.java:20: error: incomparable types: int and boolean
    //@ ensures \result == (n % m == 0) ? 1 : 0;
                        ^
/home/max/Documents/JMLGPT/tmp/Primes.java:20: error: incompatible types: int cannot be converted to boolean
    //@ ensures \result == (n % m == 0) ? 1 : 0;
                                        ^
/home/max/Documents/JMLGPT/tmp/Primes.java:38: error: incomparable types: int and boolean
    //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                        ^
/home/max/Documents/JMLGPT/tmp/Primes.java:38: error: incompatible types: int cannot be converted to boolean
    //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:44: error: incomparable types: int and boolean
    //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                        ^
/home/max/Documents/JMLGPT/tmp/Primes.java:44: error: incompatible types: int cannot be converted to boolean
    //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                                                  ^
6 errors

public class Primes {

    //@ requires m >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == n*m;
    public static int mult(int n, int m) {
        if (m < 0) {
            return mult(n, -m);
        }
        if (m == 0) {
            return 0;
        }
        if (m == 1) {
            return 1;
        }
        return n + mult(n, m - 1);
    }

    //@ requires m >= 0 && n >= 0;
    //@ ensures \result == (n % m == 0) ? 1 : 0;
    public static int multiple_of(int n, int m) {
        if (m < 0) {
            return multiple_of(n, -m);
        }
        if (n < 0) {
            return multiple_of(-n, m); // false
        }
        if (m == 0) {
            return 0; // false
        }
        if (n == 0) {
            return 1; // true
        }
        return multiple_of(n - m, m);
    }

    //@ requires n >= 0;
    //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
    public static int is_prime(int n) {
        return is_prime_(n, n - 1);
    }

    //@ requires n >= 0 && m >= 0;
    //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
    public static int is_prime_(int n, int m) {
        if (n <= 1) {
            return 0; // false
        } else if (n == 2) {
            return 1; // true
        } else {
            if (m <= 1) {
                return 1; // true
            } else {
                if (multiple_of(n, m) == 0) {
                    return 0; // false
                }
                return is_prime_(n, m - 1);
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Primes.java:20: error: incomparable types: int and boolean
    //@ ensures \result == (n % m == 0) ? 1 : 0;
                        ^
/home/max/Documents/JMLGPT/tmp/Primes.java:20: error: incompatible types: int cannot be converted to boolean
    //@ ensures \result == (n % m == 0) ? 1 : 0;
                                        ^
/home/max/Documents/JMLGPT/tmp/Primes.java:38: error: incomparable types: int and boolean
    //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                        ^
/home/max/Documents/JMLGPT/tmp/Primes.java:38: error: incompatible types: int cannot be converted to boolean
    //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:44: error: incomparable types: int and boolean
    //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                        ^
/home/max/Documents/JMLGPT/tmp/Primes.java:44: error: incompatible types: int cannot be converted to boolean
    //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                                                  ^
6 errors

public class Primes {

    //@ requires m >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == n*m;
    public static int mult(int n, int m) {
        if (m < 0) {
            return mult(n, -m);
        }
        if (m == 0) {
            return 0;
        }
        if (m == 1) {
            return 1;
        }
        return n + mult(n, m - 1);
    }

    //@ requires m >= 0 && n >= 0;
    //@ ensures \result == (n % m == 0) ? 1 : 0;
    public static int multiple_of(int n, int m) {
        if (m < 0) {
            return multiple_of(n, -m);
        }
        if (n < 0) {
            return multiple_of(-n, m); // false
        }
        if (m == 0) {
            return 0; // false
        }
        if (n == 0) {
            return 1; // true
        }
        return multiple_of(n - m, m);
    }

    //@ requires n >= 0;
    //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
    public static int is_prime(int n) {
        return is_prime_(n, n - 1);
    }

    //@ requires n >= 0 && m >= 0;
    //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
    public static int is_prime_(int n, int m) {
        if (n <= 1) {
            return 0; // false
        } else if (n == 2) {
            return 1; // true
        } else {
            if (m <= 1) {
                return 1; // true
            } else {
                if (multiple_of(n, m) == 0) {
                    return 0; // false
                }
                return is_prime_(n, m - 1);
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Primes.java:20: error: incomparable types: int and boolean
    //@ ensures \result == (n % m == 0) ? 1 : 0;
                        ^
/home/max/Documents/JMLGPT/tmp/Primes.java:20: error: incompatible types: int cannot be converted to boolean
    //@ ensures \result == (n % m == 0) ? 1 : 0;
                                        ^
/home/max/Documents/JMLGPT/tmp/Primes.java:38: error: incomparable types: int and boolean
    //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                        ^
/home/max/Documents/JMLGPT/tmp/Primes.java:38: error: incompatible types: int cannot be converted to boolean
    //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:44: error: incomparable types: int and boolean
    //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                        ^
/home/max/Documents/JMLGPT/tmp/Primes.java:44: error: incompatible types: int cannot be converted to boolean
    //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                                                  ^
6 errors

public class Primes {

    //@ requires m >= 0;
    //@ ensures \result >= 0;
    //@ ensures \result == n*m;
    public static int mult(int n, int m) {
        if (m < 0) {
            return mult(n, -m);
        }
        if (m == 0) {
            return 0;
        }
        if (m == 1) {
            return 1;
        }
        return n + mult(n, m - 1);
    }

    //@ requires m >= 0 && n >= 0;
    //@ ensures \result == (n % m == 0) ? 1 : 0;
    public static int multiple_of(int n, int m) {
        if (m < 0) {
            return multiple_of(n, -m);
        }
        if (n < 0) {
            return multiple_of(-n, m); // false
        }
        if (m == 0) {
            return 0; // false
        }
        if (n == 0) {
            return 1; // true
        }
        return multiple_of(n - m, m);
    }

    //@ requires n >= 0;
    //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
    public static int is_prime(int n) {
        return is_prime_(n, n - 1);
    }

    //@ requires n >= 0 && m >= 0;
    //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
    public static int is_prime_(int n, int m) {
        if (n <= 1) {
            return 0; // false
        } else if (n == 2) {
            return 1; // true
        } else {
            if (m <= 1) {
                return 1; // true
            } else {
                if (multiple_of(n, m) == 0) {
                    return 0; // false
                }
                return is_prime_(n, m - 1);
            }
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Primes.java:20: error: incomparable types: int and boolean
    //@ ensures \result == (n % m == 0) ? 1 : 0;
                        ^
/home/max/Documents/JMLGPT/tmp/Primes.java:20: error: incompatible types: int cannot be converted to boolean
    //@ ensures \result == (n % m == 0) ? 1 : 0;
                                        ^
/home/max/Documents/JMLGPT/tmp/Primes.java:38: error: incomparable types: int and boolean
    //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                        ^
/home/max/Documents/JMLGPT/tmp/Primes.java:38: error: incompatible types: int cannot be converted to boolean
    //@ ensures \result == (is_prime_(n, n - 1) == 1) ? 1 : 0;
                                                      ^
/home/max/Documents/JMLGPT/tmp/Primes.java:44: error: incomparable types: int and boolean
    //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                        ^
/home/max/Documents/JMLGPT/tmp/Primes.java:44: error: incompatible types: int cannot be converted to boolean
    //@ ensures \result == (is_prime_(n, m) == 1) ? 1 : 0;
                                                  ^
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 51380224 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid8706.log

public class Primes {

    public static int isPrime(int n) {
        if (n <= 1) {
            return 0; // false
        } else {
            for (int i = 2; i <= Math.sqrt(n); i++) {
                if (n % i == 0) {
                    return 0; // false
                }
            }
            return 1; // true
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Primes.java:8: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method isPrime
                if (n % i == 0) {
                      ^
1 verification failure

public class Primes {

    //@ requires n >= 2;
    //@ ensures (\forall int i; 2 <= i && i <= Math.sqrt(n); n % i != 0);
    //@ ensures \result == 1;
    //@ also
    //@ requires n < 2;
    //@ ensures \result == 0;
    public static int isPrime(int n) {
        if (n < 2) {
            return 0; // false
        } else {
            for (int i = 2; i <= Math.sqrt(n); i++) {
                if (n % i == 0) {
                    return 0; // false
                }
            }
            return 1; // true
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Primes.java:14: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method isPrime
                if (n % i == 0) {
                      ^
1 verification failure

public class Primes {

    //@ requires n >= 2;
    //@ ensures (\forall int i; 2 <= i && i <= n/2; n % i != 0);
    //@ ensures \result == 1;
    //@ also
    //@ requires n < 2;
    //@ ensures \result == 0;
    public static int isPrime(int n) {
        if (n < 2) {
            return 0; // false
        } else {
            for (int i = 2; i <= n/2; i++) {
                if (n % i == 0) {
                    return 0; // false
                }
            }
            return 1; // true
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Primes.java:14: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method isPrime
                if (n % i == 0) {
                      ^
1 verification failure

public class Primes {

    //@ requires n >= 2;
    //@ ensures (\forall int i; 2 <= i && i <= n/2 + 1; n % i != 0);
    //@ ensures \result == 1;
    //@ also
    //@ requires n < 2;
    //@ ensures \result == 0;
    public static int isPrime(int n) {
        if (n < 2) {
            return 0; // false
        } else {
            for (int i = 2; i <= n/2 + 1; i++) {
                if (n % i == 0) {
                    return 0; // false
                }
            }
            return 1; // true
        }
    }
}
/home/max/Documents/JMLGPT/tmp/Primes.java:14: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method isPrime
                if (n % i == 0) {
                      ^
1 verification failure

