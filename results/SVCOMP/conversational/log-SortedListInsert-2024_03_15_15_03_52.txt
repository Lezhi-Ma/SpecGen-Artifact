public class SortedListInsert {

    private static class List {
        public int x;
        public List next;

        private static final int SENTINEL = Integer.MAX_VALUE;

        private List(int x, List next) {
            this.x = x;
            this.next = next;
        }

        //@ ensures (\forall List l; l != null && l != this; data <= l.x);
        public List() {
            this(SENTINEL, null);
        }

        //@ requires data <= this.x;
        //@ ensures (\forall List l; l != null && l != this; data <= l.x);
        public void insert(int data) {
            if (data > this.x) {
                next.insert(data);
            } else {
                next = new List(x, next);
                x = data;
            }
        }
    }

}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:14: error: cannot find symbol
        //@ ensures (\forall List l; l != null && l != this; data <= l.x);
                                                             ^
  symbol:   variable data
  location: class List
1 error

public class SortedListInsert {

    private static class List {
        public int x;
        public List next;

        private static final int SENTINEL = Integer.MAX_VALUE;

        private List(int x, List next) {
            this.x = x;
            this.next = next;
        }

        //@ ensures (\forall List l; l != null && l != this; \result <= l.x);
        public List() {
            this(SENTINEL, null);
        }

        //@ requires data <= this.x;
        //@ ensures (\forall List l; l != null && l != this; data <= l.x);
        public void insert(int data) {
            if (data > this.x) {
                next.insert(data);
            } else {
                next = new List(x, next);
                x = data;
            }
        }
    }

}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:14: error: A \result expression may not be used in the specification of a method that returns void
        //@ ensures (\forall List l; l != null && l != this; \result <= l.x);
                                                              ^
1 error

public class SortedListInsert {

    private static class List {
        public int x;
        public List next;

        private static final int SENTINEL = Integer.MAX_VALUE;

        private List(int x, List next) {
            this.x = x;
            this.next = next;
        }

        //@ ensures (\forall List l; l != null && l != this; data <= l.x);
        public List() {
            this(SENTINEL, null);
        }

        //@ requires data <= this.x;
        //@ ensures (\forall List l; l != null && l != this; data <= l.x);
        public void insert(int data) {
            if (data > this.x) {
                next.insert(data);
            } else {
                next = new List(x, next);
                x = data;
            }
        }
    }

}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:14: error: cannot find symbol
        //@ ensures (\forall List l; l != null && l != this; data <= l.x);
                                                             ^
  symbol:   variable data
  location: class List
1 error

public class SortedListInsert {

    private static class List {
        public int x;
        public List next;

        private static final int SENTINEL = Integer.MAX_VALUE;

        private List(int x, List next) {
            this.x = x;
            this.next = next;
        }

        //@ ensures (\forall List l; l != null && l != this; \result <= l.x);
        public List() {
            this(SENTINEL, null);
        }

        //@ requires data <= this.x;
        //@ ensures (\forall List l; l != null && l != this; data <= l.x);
        public void insert(int data) {
            if (data > this.x) {
                next.insert(data);
            } else {
                next = new List(x, next);
                x = data;
            }
        }
    }

}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:14: error: A \result expression may not be used in the specification of a method that returns void
        //@ ensures (\forall List l; l != null && l != this; \result <= l.x);
                                                              ^
1 error

public class SortedListInsert {

    private static class List {
        public int x;
        public List next;

        private static final int SENTINEL = Integer.MAX_VALUE;

        private List(int x, List next) {
            this.x = x;
            this.next = next;
        }

        //@ ensures (\forall List l; l != null && l != this; l.x >= x);
        public List() {
            this(SENTINEL, null);
        }

        //@ requires data <= this.x;
        //@ ensures (\forall List l; l != null && l != this; l.x >= data);
        public void insert(int data) {
            if (data > this.x) {
                next.insert(data);
            } else {
                next = new List(x, next);
                x = data;
            }
        }
    }

}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:16: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:9:) in method List: next in List(int,SortedListInsert.List)
            this(SENTINEL, null);
                           ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:16:
        private List(int x, List next) {
                            ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:20:) in method insert
        public void insert(int data) {
                    ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:21:
        //@ ensures (\forall List l; l != null && l != this; l.x >= data);
            ^
4 verification failures

public class SortedListInsert {

    private static class List {
        public int x;
        public List next;

        private static final int SENTINEL = Integer.MAX_VALUE;

        private List(int x, List next) {
            this.x = x;
            this.next = next;
        }

        //@ ensures (\forall List l; l != null && l != this; l.x >= x);
        public List() {
            this(SENTINEL, null);
        }

        //@ requires data <= this.x;
        //@ ensures (\forall List l; l != null && l != this; l.x >= data);
        public void insert(int data) {
            if (data > this.x) {
                next.insert(data);
            } else {
                next = new List(x, next);
                x = data;
            }
        }
    }

}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:16: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:9:) in method List: next in List(int,SortedListInsert.List)
            this(SENTINEL, null);
                           ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:16:
        private List(int x, List next) {
                            ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:20:) in method insert
        public void insert(int data) {
                    ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:21:
        //@ ensures (\forall List l; l != null && l != this; l.x >= data);
            ^
4 verification failures

public class SortedListInsert {

    private static class List {
        public int x;
        public List next;

        private static final int SENTINEL = Integer.MAX_VALUE;

        //@ ensures (\forall List l; l != null && l != this; l.x >= x);
        public List() {
            this(SENTINEL, null);
        }

        //@ requires data <= this.x;
        //@ ensures (\forall List l; l != null && l != this; l.x >= data);
        public void insert(int data) {
            if (data > this.x) {
                next.insert(data);
            } else {
                next = new List(x, next);
                x = data;
            }
        }

        private List(int x, List next) {
            this.x = x;
            this.next = next;
        }
    }

}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:25:) in method List: next in List(int,SortedListInsert.List)
            this(SENTINEL, null);
                           ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11:
        private List(int x, List next) {
                            ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:15:) in method insert
        public void insert(int data) {
                    ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:16:
        //@ ensures (\forall List l; l != null && l != this; l.x >= data);
            ^
4 verification failures

public class SortedListInsert {

    private static class List {
        public int x;
        public List next;

        private static final int SENTINEL = Integer.MAX_VALUE;

        //@ ensures (\forall List l; l != null && l != this; l.x >= x);
        public List() {
            this(SENTINEL, null);
        }

        //@ requires data <= this.x;
        //@ ensures (\forall List l; l != null && l != this; l.x >= data);
        public void insert(int data) {
            if (data > this.x) {
                next.insert(data);
            } else {
                next = new List(x, next);
                x = data;
            }
        }

        private List(int x, List next) {
            this.x = x;
            this.next = next;
        }
    }

}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:25:) in method List: next in List(int,SortedListInsert.List)
            this(SENTINEL, null);
                           ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11:
        private List(int x, List next) {
                            ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:15:) in method insert
        public void insert(int data) {
                    ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:16:
        //@ ensures (\forall List l; l != null && l != this; l.x >= data);
            ^
4 verification failures

public class SortedListInsert {

    private static class List {
        public int x;
        public List next;

        private static final int SENTINEL = Integer.MAX_VALUE;

        //@ ensures (\forall List l; l != null && l != this; l.x >= x);
        public List() {
            this(SENTINEL, null);
        }

        //@ requires data <= this.x;
        //@ ensures (\forall List l; l != null && l != this; l.x >= data);
        public void insert(int data) {
            if (data > this.x) {
                if (next != null) {
                    next.insert(data);
                } else {
                    next = new List(data, null);
                }
            } else {
                List temp = new List(x, next);
                x = data;
                next = temp;
            }
        }

        private List(int x, List next) {
            this.x = x;
            this.next = next;
        }
    }

}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:30:) in method List: next in List(int,SortedListInsert.List)
            this(SENTINEL, null);
                           ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11:
        private List(int x, List next) {
                            ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:15:) in method insert
        public void insert(int data) {
                    ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:16:
        //@ ensures (\forall List l; l != null && l != this; l.x >= data);
            ^
4 verification failures

public class SortedListInsert {

    private static class List {
        public int x;
        public List next;

        private static final int SENTINEL = Integer.MAX_VALUE;

        //@ ensures (\forall List l; l != null && l != this; l.x >= x);
        public List() {
            this(SENTINEL, null);
        }

        //@ requires data <= this.x;
        //@ ensures (\forall List l; l != null && l != this; l.x >= data);
        public void insert(int data) {
            if (data > this.x) {
                if (next != null) {
                    next.insert(data);
                } else {
                    next = new List(data, null);
                }
            } else {
                List temp = new List(x, next);
                x = data;
                next = temp;
            }
        }

        private List(int x, List next) {
            this.x = x;
            this.next = next;
        }
    }

}
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11: verify: The prover cannot establish an assertion (NullFormal: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:30:) in method List: next in List(int,SortedListInsert.List)
            this(SENTINEL, null);
                           ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:11:
        private List(int x, List next) {
                            ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:15:) in method insert
        public void insert(int data) {
                    ^
/home/max/Documents/JMLGPT/tmp/SortedListInsert.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/SortedListInsert.java:16:
        //@ ensures (\forall List l; l != null && l != this; l.x >= data);
            ^
4 verification failures

