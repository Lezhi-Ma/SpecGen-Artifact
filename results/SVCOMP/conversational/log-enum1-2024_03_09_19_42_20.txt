enum enum1 {
  VAL1,
  VAL2,
  VAL3,
  VAL4,
  VAL5;

  static {
    //@ loop_invariant \forall enum1 e; e == enum1.VAL1 || e == enum1.VAL2 || e == enum1.VAL3 || e == enum1.VAL4 || e == enum1.VAL5;
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    //@ assert e == enum1.VAL5;
  }
}
/home/max/Documents/JMLGPT/tmp/enum1.java:9: error: The type or expression near here is invalid (or not implemented): ( token ? in JmlParser.term3())
    //@ loop_invariant \forall enum1 e; e == enum1.VAL1 || e == enum1.VAL2 || e == enum1.VAL3 || e == enum1.VAL4 || e == enum1.VAL5;
                                                                                                                                    ^
1 error

enum enum1 {
  VAL1,
  VAL2,
  VAL3,
  VAL4,
  VAL5;

  static {
    //@ loop_invariant \forall enum1 e; e == enum1.VAL1 || e == enum1.VAL2 || e == enum1.VAL3 || e == enum1.VAL4 || e == enum1.VAL5;
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    //@ assert e == enum1.VAL5;
  }
}
/home/max/Documents/JMLGPT/tmp/enum1.java:9: error: The type or expression near here is invalid (or not implemented): ( token ? in JmlParser.term3())
    //@ loop_invariant \forall enum1 e; e == enum1.VAL1 || e == enum1.VAL2 || e == enum1.VAL3 || e == enum1.VAL4 || e == enum1.VAL5;
                                                                                                                                    ^
1 error

enum enum1 {
  VAL1,
  VAL2,
  VAL3,
  VAL4,
  VAL5;

  static {
    //@ loop_invariant \forall enum1 e; e == enum1.VAL1 || e == enum1.VAL2 || e == enum1.VAL3 || e == enum1.VAL4 || e == enum1.VAL5;
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    //@ assert e == enum1.VAL5;
  }
}
/home/max/Documents/JMLGPT/tmp/enum1.java:9: error: The type or expression near here is invalid (or not implemented): ( token ? in JmlParser.term3())
    //@ loop_invariant \forall enum1 e; e == enum1.VAL1 || e == enum1.VAL2 || e == enum1.VAL3 || e == enum1.VAL4 || e == enum1.VAL5;
                                                                                                                                    ^
1 error

enum enum1 {
  VAL1,
  VAL2,
  VAL3,
  VAL4,
  VAL5;

  static {
    //@ loop_invariant (\forall enum1 e; e == enum1.VAL1 || e == enum1.VAL2 || e == enum1.VAL3 || e == enum1.VAL4 || e == enum1.VAL5);
    for (enum1 e : enum1.values()) {
      System.out.println(e);
    }
  }
}

class Main {
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    //@ assert e == enum1.VAL5;
  }
}
/home/max/Documents/JMLGPT/tmp/enum1.java:9: error: variable e is already defined in static initializer of enum enum1
    //@ loop_invariant (\forall enum1 e; e == enum1.VAL1 || e == enum1.VAL2 || e == enum1.VAL3 || e == enum1.VAL4 || e == enum1.VAL5);
                                      ^
1 error

enum enum1 {
  VAL1,
  VAL2,
  VAL3,
  VAL4,
  VAL5;

  static {
    //@ loop_invariant \forall enum1 e; e == enum1.VAL1 || e == enum1.VAL2 || e == enum1.VAL3 || e == enum1.VAL4 || e == enum1.VAL5;
    for (enum1 enumValue : enum1.values()) {
      System.out.println(enumValue);
    }
  }
}

class Main {
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    //@ assert e == enum1.VAL5;
  }
}
/home/max/Documents/JMLGPT/tmp/enum1.java:9: error: The type or expression near here is invalid (or not implemented): ( token ? in JmlParser.term3())
    //@ loop_invariant \forall enum1 e; e == enum1.VAL1 || e == enum1.VAL2 || e == enum1.VAL3 || e == enum1.VAL4 || e == enum1.VAL5;
                                                                                                                                    ^
1 error

enum enum1 {
  VAL1,
  VAL2,
  VAL3,
  VAL4,
  VAL5;

  static {
    //@ loop_invariant (\forall enum1 e; e == enum1.VAL1 || e == enum1.VAL2 || e == enum1.VAL3 || e == enum1.VAL4 || e == enum1.VAL5);
    for (enum1 enumValue : enum1.values()) {
      System.out.println(enumValue);
    }
  }
}

class Main {
  public static void main(String[] args) {
    enum1 e = enum1.VAL5;
    //@ assert e == enum1.VAL5;
  }
}

