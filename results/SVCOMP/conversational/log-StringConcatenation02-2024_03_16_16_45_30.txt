public class StringConcatenation02 {
  //@ requires arg1 != null && arg2 != null;
  //@ ensures \result ==> arg1.equals(\old(arg1) + " ") && arg2.equals(\old(arg2));
  //@ ensures !\result ==> !arg1.equals(\old(arg1) + " ") || !arg2.equals(\old(arg2));
  public static boolean f(String arg1, String arg2) {
    String[] args = new String[2];
    args[0] = arg1;
    args[1] = arg2;

    String s1 = args[0];
    String s2 = args[1];
    if(!s1.equals(args[0] + " ")) return false;
    if(!s2.equals(args[1])) return false;
    return true;
  }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 65536 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14066.log

public class StringConcatenation02 {
  //@ requires arg1 != null && arg2 != null;
  //@ ensures \result ==> arg1.equals(\old(arg1) + " ") && arg2.equals(\old(arg2));
  //@ ensures !\result ==> !arg1.equals(\old(arg1) + " ") || !arg2.equals(\old(arg2));
  public static boolean f(String arg1, String arg2) {
    String[] args = new String[2];
    args[0] = arg1;
    args[1] = arg2;

    String s1 = args[0];
    String s2 = args[1];
    if(!s1.equals(args[0] + " ")) return false;
    if(!s2.equals(args[1])) return false;
    return true;
  }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 33554432 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14094.log

public class StringConcatenation02 {
  //@ requires arg1 != null && arg2 != null;
  //@ ensures \result ==> arg1.equals(\old(arg1) + " ") && arg2.equals(\old(arg2));
  //@ ensures !\result ==> !arg1.equals(\old(arg1) + " ") || !arg2.equals(\old(arg2));
  public static boolean f(String arg1, String arg2) {
    String[] args = new String[2];
    args[0] = arg1;
    args[1] = arg2;

    String s1 = args[0];
    String s2 = args[1];
    if(!s1.equals(args[0] + " ")) return false;
    if(!s2.equals(args[1])) return false;
    return true;
  }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 33554432 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14107.log

public class StringConcatenation02 {
  //@ requires arg1 != null && arg2 != null;
  //@ ensures \result ==> arg1.equals(\old(arg1) + " ") && arg2.equals(\old(arg2));
  //@ ensures !\result ==> !arg1.equals(\old(arg1) + " ") || !arg2.equals(\old(arg2));
  public static boolean f(String arg1, String arg2) {
    String[] args = new String[2];
    args[0] = arg1;
    args[1] = arg2;

    String s1 = args[0];
    String s2 = args[1];
    if(!s1.equals(args[0] + " ")) return false;
    if(!s2.equals(args[1])) return false;
    return true;
  }
}
#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (mmap) failed to map 33554432 bytes for committing reserved memory.
# An error report file with more information is saved as:
# /home/max/Documents/JMLGPT/hs_err_pid14120.log

public class StringConcatenation02 {
  //@ requires arg1 != null && arg2 != null;
  //@ ensures \result ==> arg1.equals(\old(arg1) + " ") && arg2.equals(\old(arg2));
  //@ ensures !\result ==> !arg1.equals(\old(arg1) + " ") || !arg2.equals(\old(arg2));
  public static boolean f(String arg1, String arg2) {
    String[] args = new String[2];
    args[0] = arg1;
    args[1] = arg2;

    String s1 = args[0];
    String s2 = args[1];
    if(!s1.equals(args[0] + " ")) return false;
    if(!s2.equals(args[1])) return false;
    return true;
  }
}
