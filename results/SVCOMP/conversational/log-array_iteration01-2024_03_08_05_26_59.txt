public class array_iteration01 {

  //@ requires 0 <= index && index < 200;
  //@ ensures \result == -1 <==> (0 > index || index >= 200);
  //@ ensures \result == 0 <==> (\exists int i; 0 <= i && i < 200; ia[i] == 0);
  //@ ensures \result == 1 <==> (\forall int i; 0 <= i && i < 200; ia[i] != 0);
  public static int f(int index) {
    int[] ia = new int[200];
    if(0 > index || index >= ia.length) return -1;
    ia[index] = Verifier.nondetInt();
    for (int i = 0; i < ia.length; i++) {
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }
}
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:5: error: cannot find symbol
  //@ ensures \result == 0 <==> (\exists int i; 0 <= i && i < 200; ia[i] == 0);
                                                                   ^
  symbol:   variable ia
  location: class array_iteration01
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:6: error: cannot find symbol
  //@ ensures \result == 1 <==> (\forall int i; 0 <= i && i < 200; ia[i] != 0);
                                                                   ^
  symbol:   variable ia
  location: class array_iteration01
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:10: error: cannot find symbol
    ia[index] = Verifier.nondetInt();
                ^
  symbol:   variable Verifier
  location: class array_iteration01
3 errors

public class array_iteration01 {

  //@ requires 0 <= index && index < 200;
  //@ ensures \result == -1 <==> (0 > index || index >= 200);
  //@ ensures \result == 0 <==> (\exists int i; 0 <= i && i < 200; \old(ia)[i] == 0);
  //@ ensures \result == 1 <==> (\forall int i; 0 <= i && i < 200; \old(ia)[i] != 0);
  public static int f(int index) {
    int[] ia = new int[200];
    if(0 > index || index >= ia.length) return -1;
    ia[index] = (int)(Math.random() * Integer.MAX_VALUE);
    for (int i = 0; i < ia.length; i++) {
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }
}
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:5: error: cannot find symbol
  //@ ensures \result == 0 <==> (\exists int i; 0 <= i && i < 200; \old(ia)[i] == 0);
                                                                        ^
  symbol:   variable ia
  location: class array_iteration01
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:6: error: cannot find symbol
  //@ ensures \result == 1 <==> (\forall int i; 0 <= i && i < 200; \old(ia)[i] != 0);
                                                                        ^
  symbol:   variable ia
  location: class array_iteration01
2 errors

public class array_iteration01 {

  //@ requires 0 <= index && index < 200;
  //@ ensures \result == -1 <==> (0 > index || index >= 200);
  //@ ensures \result == 0 <==> (\exists int i; 0 <= i && i < 200; ia[i] == 0);
  //@ ensures \result == 1 <==> (\forall int i; 0 <= i && i < 200; ia[i] != 0);
  public static int f(int index) {
    int[] ia = new int[200];
    if(0 > index || index >= ia.length) return -1;
    ia[index] = (int)(Math.random() * Integer.MAX_VALUE);
    for (int i = 0; i < ia.length; i++) {
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }
}
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:5: error: cannot find symbol
  //@ ensures \result == 0 <==> (\exists int i; 0 <= i && i < 200; ia[i] == 0);
                                                                   ^
  symbol:   variable ia
  location: class array_iteration01
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:6: error: cannot find symbol
  //@ ensures \result == 1 <==> (\forall int i; 0 <= i && i < 200; ia[i] != 0);
                                                                   ^
  symbol:   variable ia
  location: class array_iteration01
2 errors

public class array_iteration01 {

  //@ requires 0 <= index && index < 200;
  //@ ensures \result == -1 <==> (0 > index || index >= 200);
  //@ ensures \result == 0 <==> (\exists int i; 0 <= i && i < 200; \result == 0 && ia[i] == 0);
  //@ ensures \result == 1 <==> (\forall int i; 0 <= i && i < 200; \result == 1 || ia[i] != 0);
  public static int f(int index) {
    int[] ia = new int[200];
    if(0 > index || index >= ia.length) return -1;
    ia[index] = (int)(Math.random() * Integer.MAX_VALUE);
    for (int i = 0; i < ia.length; i++) {
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }
}
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:5: error: cannot find symbol
  //@ ensures \result == 0 <==> (\exists int i; 0 <= i && i < 200; \result == 0 && ia[i] == 0);
                                                                                   ^
  symbol:   variable ia
  location: class array_iteration01
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:6: error: cannot find symbol
  //@ ensures \result == 1 <==> (\forall int i; 0 <= i && i < 200; \result == 1 || ia[i] != 0);
                                                                                   ^
  symbol:   variable ia
  location: class array_iteration01
2 errors

public class array_iteration01 {

  //@ requires 0 <= index && index < 200;
  //@ ensures \result == -1 <==> (0 > index || index >= 200);
  //@ ensures \result == 0 <==> (\exists int i; 0 <= i && i < 200; \result == 0 && \old(ia)[i] == 0);
  //@ ensures \result == 1 <==> (\forall int i; 0 <= i && i < 200; \result == 1 || \old(ia)[i] != 0);
  public static int f(int index) {
    int[] ia = new int[200];
    if(0 > index || index >= ia.length) return -1;
    ia[index] = (int)(Math.random() * Integer.MAX_VALUE);
    for (int i = 0; i < ia.length; i++) {
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }
}
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:5: error: cannot find symbol
  //@ ensures \result == 0 <==> (\exists int i; 0 <= i && i < 200; \result == 0 && \old(ia)[i] == 0);
                                                                                        ^
  symbol:   variable ia
  location: class array_iteration01
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:6: error: cannot find symbol
  //@ ensures \result == 1 <==> (\forall int i; 0 <= i && i < 200; \result == 1 || \old(ia)[i] != 0);
                                                                                        ^
  symbol:   variable ia
  location: class array_iteration01
2 errors

public class array_iteration01 {

  //@ requires 0 <= index && index < 200;
  //@ ensures \result == -1 <==> (0 > index || index >= 200);
  //@ ensures \result == 0 <==> (\exists int i; 0 <= i && i < 200; \result == 0 && \old(\result) == 0);
  //@ ensures \result == 1 <==> (\forall int i; 0 <= i && i < 200; \result == 1 || \old(\result) != 0);
  public static int f(int index) {
    int[] ia = new int[200];
    if(0 > index || index >= ia.length) return -1;
    ia[index] = (int)(Math.random() * Integer.MAX_VALUE);
    for (int i = 0; i < ia.length; i++) {
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }
}
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:5: error: A \result expression is not allowed in an old environment
  //@ ensures \result == 0 <==> (\exists int i; 0 <= i && i < 200; \result == 0 && \old(\result) == 0);
                                                                                        ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:6: error: A \result expression is not allowed in an old environment
  //@ ensures \result == 1 <==> (\forall int i; 0 <= i && i < 200; \result == 1 || \old(\result) != 0);
                                                                                        ^
2 errors

public class array_iteration01 {

  //@ requires 0 <= index && index < 200;
  //@ ensures \result == -1 <==> (0 > index || index >= 200);
  //@ ensures \result == 0 <==> (\exists int i; 0 <= i && i < 200; \result == 0 && \old(\result) == 0);
  //@ ensures \result == 1 <==> (\forall int i; 0 <= i && i < 200; \result == 1 || \old(\result) != 0);
  public static int f(int index) {
    int[] ia = new int[200];
    if(0 > index || index >= ia.length) return -1;
    ia[index] = (int)(Math.random() * Integer.MAX_VALUE);
    for (int i = 0; i < ia.length; i++) {
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }
}
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:5: error: A \result expression is not allowed in an old environment
  //@ ensures \result == 0 <==> (\exists int i; 0 <= i && i < 200; \result == 0 && \old(\result) == 0);
                                                                                        ^
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:6: error: A \result expression is not allowed in an old environment
  //@ ensures \result == 1 <==> (\forall int i; 0 <= i && i < 200; \result == 1 || \old(\result) != 0);
                                                                                        ^
2 errors

public class array_iteration01 {

  //@ requires 0 <= index && index < 200;
  //@ ensures \result == -1 <==> (0 > index || index >= 200);
  //@ ensures \result == 0 <==> (\exists int i; 0 <= i && i < 200; \result == 0 && \result == 0);
  //@ ensures \result == 1 <==> (\forall int i; 0 <= i && i < 200; \result == 1 || \result != 0);
  public static int f(int index) {
    int[] ia = new int[200];
    if(0 > index || index >= ia.length) return -1;
    ia[index] = (int)(Math.random() * Integer.MAX_VALUE);
    for (int i = 0; i < ia.length; i++) {
      if (ia[i] == 0)
        return 0;
      ;
    }
    return 1;
  }
}
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:12: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method f
      if (ia[i] == 0)
            ^
1 verification failure

public class array_iteration01 {

  //@ requires index >= 0 && index < 200;
  //@ ensures \result == -1 <==> (index < 0 || index >= 200);
  //@ ensures \result == 0 <==> (\exists int i; 0 <= i && i < 200; \result == 0 && ia[i] == 0);
  //@ ensures \result == 1 <==> (\forall int i; 0 <= i && i < 200; \result == 1 || ia[i] != 0);
  public static int f(int index) {
    int[] ia = new int[200];
    if(index < 0 || index >= ia.length) return -1;
    ia[index] = (int)(Math.random() * Integer.MAX_VALUE);
    for (int i = 0; i < ia.length; i++) {
      if (ia[i] == 0)
        return 0;
    }
    return 1;
  }
}
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:5: error: cannot find symbol
  //@ ensures \result == 0 <==> (\exists int i; 0 <= i && i < 200; \result == 0 && ia[i] == 0);
                                                                                   ^
  symbol:   variable ia
  location: class array_iteration01
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:6: error: cannot find symbol
  //@ ensures \result == 1 <==> (\forall int i; 0 <= i && i < 200; \result == 1 || ia[i] != 0);
                                                                                   ^
  symbol:   variable ia
  location: class array_iteration01
2 errors

public class array_iteration01 {

  //@ requires index >= 0 && index < 200;
  //@ ensures \result == -1 <==> (index < 0 || index >= 200);
  //@ ensures \result == 0 <==> (\exists int i; 0 <= i && i < 200; \result == 0 && \result == 0);
  //@ ensures \result == 1 <==> (\forall int i; 0 <= i && i < 200; \result == 1 || \result != 0);
  public static int f(int index) {
    int[] ia = new int[200];
    if(index < 0 || index >= ia.length) return -1;
    ia[index] = (int)(Math.random() * Integer.MAX_VALUE);
    for (int i = 0; i < ia.length; i++) {
      if (ia[i] == 0)
        return 0;
    }
    return 1;
  }
}
/home/max/Documents/JMLGPT/tmp/array_iteration01.java:12: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method f
      if (ia[i] == 0)
            ^
1 verification failure

