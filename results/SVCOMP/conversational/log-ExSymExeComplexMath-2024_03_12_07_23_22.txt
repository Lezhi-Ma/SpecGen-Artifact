class Main {
  static int field;

  //@ ensures field == 9 && \result ==> test2(0.0);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test2(0.0);
  }

  //@ requires Math.round(in) <= 16.0;
  //@ ensures \result <==> (Math.round(in) <= 16.0);
  public boolean test2(double in) {
    if (Math.round(in) > 16.0) {
      return false;
    } else
      System.out.println("do2()");
    return true;
  }

  //@ requires x1 != Double.NaN && y1 != Double.NaN;
  //@ ensures (x1 == 0 && y1 != 0) ==> System.out.println(">>>>>>>>>>>> 1");
  //@ ensures (x1 == 0 && y1 == 0) ==> System.out.println(">>>>>>>>>>>> LOOK!");
  //@ ensures (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
  //@ ensures (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???");
  public void angleXY_(double x1, double y1) {
    double x = x1;
    double y = y1;
    if (x == 0 && y != 0) {
      System.out.println(">>>>>>>>>>>> 1");
    } else {
      System.out.println(">>>>>>>>>>>> LOOK!");
      if (x < 0) {
        System.out.println(">>>>>>>>>>>>>>> ???");
      } else if (x > 0) {
        System.out.println(">>>>>>>>>>>>>>> !!!1");
      }
    }
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:4: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures field == 9 && \result ==> test2(0.0);
              ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:4: error: non-static method test2(double) cannot be referenced from a static context
  //@ ensures field == 9 && \result ==> test2(0.0);
                                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:23: error: incompatible types: void cannot be converted to boolean
  //@ ensures (x1 == 0 && y1 != 0) ==> System.out.println(">>>>>>>>>>>> 1");
                                                         ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:24: error: incompatible types: void cannot be converted to boolean
  //@ ensures (x1 == 0 && y1 == 0) ==> System.out.println(">>>>>>>>>>>> LOOK!");
                                                         ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:25: error: incompatible types: void cannot be converted to boolean
  //@ ensures (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:26: error: incompatible types: void cannot be converted to boolean
  //@ ensures (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???");
                                             ^
6 errors

class Main {
  spec_public static int field;

  //@ requires field == 9;
  //@ ensures \result ==> test2(0.0);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test2(0.0);
  }

  //@ requires Math.round(in) <= 16.0;
  //@ ensures \result <==> (Math.round(in) <= 16.0);
  public boolean test2(double in) {
    if (Math.round(in) > 16.0) {
      return false;
    } else
      System.out.println("do2()");
    return true;
  }

  //@ requires x1 != Double.NaN && y1 != Double.NaN;
  //@ ensures (x1 == 0 && y1 != 0) ==> System.out.println(">>>>>>>>>>>> 1");
  //@ ensures (x1 == 0 && y1 == 0) ==> System.out.println(">>>>>>>>>>>> LOOK!");
  //@ ensures (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
  //@ ensures (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???");
  public void angleXY_(double x1, double y1) {
    double x = x1;
    double y = y1;
    if (x == 0 && y != 0) {
      System.out.println(">>>>>>>>>>>> 1");
    } else {
      System.out.println(">>>>>>>>>>>> LOOK!");
      if (x < 0) {
        System.out.println(">>>>>>>>>>>>>>> ???");
      } else if (x > 0) {
        System.out.println(">>>>>>>>>>>>>>> !!!1");
      }
    }
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:2: error: <identifier> expected
  spec_public static int field;
             ^
1 error

class Main {
  /*@ spec_public @*/ static int field;

  //@ requires field == 9;
  //@ ensures \result ==> test2(0.0);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test2(0.0);
  }

  //@ requires Math.round(in) <= 16.0;
  //@ ensures \result <==> (Math.round(in) <= 16.0);
  public boolean test2(double in) {
    if (Math.round(in) > 16.0) {
      return false;
    } else
      System.out.println("do2()");
    return true;
  }

  //@ requires x1 != Double.NaN && y1 != Double.NaN;
  //@ ensures (x1 == 0 && y1 != 0) ==> System.out.println(">>>>>>>>>>>> 1");
  //@ ensures (x1 == 0 && y1 == 0) ==> System.out.println(">>>>>>>>>>>> LOOK!");
  //@ ensures (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
  //@ ensures (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???");
  public void angleXY_(double x1, double y1) {
    double x = x1;
    double y = y1;
    if (x == 0 && y != 0) {
      System.out.println(">>>>>>>>>>>> 1");
    } else {
      System.out.println(">>>>>>>>>>>> LOOK!");
      if (x < 0) {
        System.out.println(">>>>>>>>>>>>>>> ???");
      } else if (x > 0) {
        System.out.println(">>>>>>>>>>>>>>> !!!1");
      }
    }
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:5: error: non-static method test2(double) cannot be referenced from a static context
  //@ ensures \result ==> test2(0.0);
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:24: error: incompatible types: void cannot be converted to boolean
  //@ ensures (x1 == 0 && y1 != 0) ==> System.out.println(">>>>>>>>>>>> 1");
                                                         ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:25: error: incompatible types: void cannot be converted to boolean
  //@ ensures (x1 == 0 && y1 == 0) ==> System.out.println(">>>>>>>>>>>> LOOK!");
                                                         ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:26: error: incompatible types: void cannot be converted to boolean
  //@ ensures (x1 > 0) ==> System.out.println(">>>>>>>>>>>>>>> !!!1");
                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:27: error: incompatible types: void cannot be converted to boolean
  //@ ensures (x1 < 0) ==> System.out.println(">>>>>>>>>>>>>>> ???");
                                             ^
5 errors

class Main {
  /*@ spec_public @*/ static int field;

  //@ requires field == 9;
  //@ ensures \result ==> new Main().test2(0.0);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test2(0.0);
  }

  //@ requires Math.round(in) <= 16.0;
  //@ ensures \result <==> (Math.round(in) <= 16.0);
  public boolean test2(double in) {
    if (Math.round(in) > 16.0) {
      return false;
    } else
      System.out.println("do2()");
    return true;
  }

  //@ requires x1 != Double.NaN && y1 != Double.NaN;
  //@ ensures x1 == 0 && y1 != 0 ==> true;
  //@ ensures x1 == 0 && y1 == 0 ==> true;
  //@ ensures x1 > 0 ==> true;
  //@ ensures x1 < 0 ==> true;
  public void angleXY_(double x1, double y1) {
    double x = x1;
    double y = y1;
    if (x == 0 && y != 0) {
      System.out.println(">>>>>>>>>>>> 1");
    } else {
      System.out.println(">>>>>>>>>>>> LOOK!");
      if (x < 0) {
        System.out.println(">>>>>>>>>>>>>>> ???");
      } else if (x > 0) {
        System.out.println(">>>>>>>>>>>>>>> !!!1");
      }
    }
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().test2(0.0);
                          ^
1 error

class Main {
  /*@ spec_public @*/ static int field;

  //@ requires field == 9;
  //@ ensures \result ==> test2(0.0);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test2(0.0);
  }

  //@ requires Math.round(in) <= 16.0;
  //@ ensures \result <==> (Math.round(in) <= 16.0);
  public boolean test2(double in) {
    if (Math.round(in) > 16.0) {
      return false;
    } else
      System.out.println("do2()");
    return true;
  }

  //@ requires x1 != Double.NaN && y1 != Double.NaN;
  //@ ensures x1 == 0 && y1 != 0 ==> true;
  //@ ensures x1 == 0 && y1 == 0 ==> true;
  //@ ensures x1 > 0 ==> true;
  //@ ensures x1 < 0 ==> true;
  public void angleXY_(double x1, double y1) {
    double x = x1;
    double y = y1;
    if (x == 0 && y != 0) {
      System.out.println(">>>>>>>>>>>> 1");
    } else {
      System.out.println(">>>>>>>>>>>> LOOK!");
      if (x < 0) {
        System.out.println(">>>>>>>>>>>>>>> ???");
      } else if (x > 0) {
        System.out.println(">>>>>>>>>>>>>>> !!!1");
      }
    }
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:5: error: non-static method test2(double) cannot be referenced from a static context
  //@ ensures \result ==> test2(0.0);
                          ^
1 error

class Main {
  /*@ spec_public @*/ static int field;

  //@ requires field == 9;
  //@ ensures \result ==> new Main().test2(0.0);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test2(0.0);
  }

  //@ requires Math.round(in) <= 16.0;
  //@ ensures \result <==> (Math.round(in) <= 16.0);
  public boolean test2(double in) {
    if (Math.round(in) > 16.0) {
      return false;
    } else
      System.out.println("do2()");
    return true;
  }

  //@ requires x1 != Double.NaN && y1 != Double.NaN;
  //@ ensures x1 == 0 && y1 != 0 ==> true;
  //@ ensures x1 == 0 && y1 == 0 ==> true;
  //@ ensures x1 > 0 ==> true;
  //@ ensures x1 < 0 ==> true;
  public void angleXY_(double x1, double y1) {
    double x = x1;
    double y = y1;
    if (x == 0 && y != 0) {
      System.out.println(">>>>>>>>>>>> 1");
    } else {
      System.out.println(">>>>>>>>>>>> LOOK!");
      if (x < 0) {
        System.out.println(">>>>>>>>>>>>>>> ???");
      } else if (x > 0) {
        System.out.println(">>>>>>>>>>>>>>> !!!1");
      }
    }
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().test2(0.0);
                          ^
1 error

class Main {
  /*@ spec_public @*/ static int field;

  //@ requires field == 9;
  //@ ensures \result ==> test2(0.0);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test2(0.0);
  }

  //@ requires Math.round(in) <= 16.0;
  //@ ensures \result <==> (Math.round(in) <= 16.0);
  public boolean test2(double in) {
    if (Math.round(in) > 16.0) {
      return false;
    } else
      System.out.println("do2()");
    return true;
  }

  //@ requires x1 != Double.NaN && y1 != Double.NaN;
  //@ ensures x1 == 0 && y1 != 0 ==> true;
  //@ ensures x1 == 0 && y1 == 0 ==> true;
  //@ ensures x1 > 0 ==> true;
  //@ ensures x1 < 0 ==> true;
  public void angleXY_(double x1, double y1) {
    double x = x1;
    double y = y1;
    if (x == 0 && y != 0) {
      System.out.println(">>>>>>>>>>>> 1");
    } else {
      System.out.println(">>>>>>>>>>>> LOOK!");
      if (x < 0) {
        System.out.println(">>>>>>>>>>>>>>> ???");
      } else if (x > 0) {
        System.out.println(">>>>>>>>>>>>>>> !!!1");
      }
    }
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:5: error: non-static method test2(double) cannot be referenced from a static context
  //@ ensures \result ==> test2(0.0);
                          ^
1 error

class Main {
  /*@ spec_public @*/ static int field;

  //@ requires field == 9;
  //@ ensures \result ==> new Main().test2(0.0);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test2(0.0);
  }

  //@ requires Math.round(in) <= 16.0;
  //@ ensures \result <==> (Math.round(in) <= 16.0);
  public boolean test2(double in) {
    if (Math.round(in) > 16.0) {
      return false;
    } else
      System.out.println("do2()");
    return true;
  }

  //@ requires x1 != Double.NaN && y1 != Double.NaN;
  //@ ensures x1 == 0 && y1 != 0 ==> true;
  //@ ensures x1 == 0 && y1 == 0 ==> true;
  //@ ensures x1 > 0 ==> true;
  //@ ensures x1 < 0 ==> true;
  public void angleXY_(double x1, double y1) {
    double x = x1;
    double y = y1;
    if (x == 0 && y != 0) {
      System.out.println(">>>>>>>>>>>> 1");
    } else {
      System.out.println(">>>>>>>>>>>> LOOK!");
      if (x < 0) {
        System.out.println(">>>>>>>>>>>>>>> ???");
      } else if (x > 0) {
        System.out.println(">>>>>>>>>>>>>>> !!!1");
      }
    }
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().test2(0.0);
                          ^
1 error

class Main {
  /*@ spec_public @*/ static int field;

  //@ requires field == 9;
  //@ ensures \result ==> test2(0.0);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test2(0.0);
  }

  //@ requires Math.round(in) <= 16.0;
  //@ ensures \result <==> (Math.round(in) <= 16.0);
  public boolean test2(double in) {
    if (Math.round(in) > 16.0) {
      return false;
    } else
      System.out.println("do2()");
    return true;
  }

  //@ requires x1 != Double.NaN && y1 != Double.NaN;
  //@ ensures x1 == 0 && y1 != 0 ==> true;
  //@ ensures x1 == 0 && y1 == 0 ==> true;
  //@ ensures x1 > 0 ==> true;
  //@ ensures x1 < 0 ==> true;
  public void angleXY_(double x1, double y1) {
    double x = x1;
    double y = y1;
    if (x == 0 && y != 0) {
      System.out.println(">>>>>>>>>>>> 1");
    } else {
      System.out.println(">>>>>>>>>>>> LOOK!");
      if (x < 0) {
        System.out.println(">>>>>>>>>>>>>>> ???");
      } else if (x > 0) {
        System.out.println(">>>>>>>>>>>>>>> !!!1");
      }
    }
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:5: error: non-static method test2(double) cannot be referenced from a static context
  //@ ensures \result ==> test2(0.0);
                          ^
1 error

class Main {
  /*@ spec_public @*/ static int field;

  //@ requires field == 9;
  //@ ensures \result ==> new Main().test2(0.0);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test2(0.0);
  }

  //@ requires Math.round(in) <= 16.0;
  //@ ensures \result <==> (Math.round(in) <= 16.0);
  public boolean test2(double in) {
    if (Math.round(in) > 16.0) {
      return false;
    } else
      System.out.println("do2()");
    return true;
  }

  //@ requires x1 != Double.NaN && y1 != Double.NaN;
  //@ ensures x1 == 0 && y1 != 0 ==> true;
  //@ ensures x1 == 0 && y1 == 0 ==> true;
  //@ ensures x1 > 0 ==> true;
  //@ ensures x1 < 0 ==> true;
  public void angleXY_(double x1, double y1) {
    double x = x1;
    double y = y1;
    if (x == 0 && y != 0) {
      System.out.println(">>>>>>>>>>>> 1");
    } else {
      System.out.println(">>>>>>>>>>>> LOOK!");
      if (x < 0) {
        System.out.println(">>>>>>>>>>>>>>> ???");
      } else if (x > 0) {
        System.out.println(">>>>>>>>>>>>>>> !!!1");
      }
    }
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExeComplexMath.java:5: error: Object allocation is not permitted in specification expressions
  //@ ensures \result ==> new Main().test2(0.0);
                          ^
1 error

