class Main {

  static int field;

  //@ requires true;
  //@ ensures b == b + 1;
  public void testa(int b, boolean[] a) {
    b++;
    if (a[0]) System.out.println("array0");
    if (a[1]) System.out.println("array1");
  }

  //@ requires xm < ym && xm > ym;
  //@ ensures false;
  public void test5(double xm, double ym) {
    if (xm < ym && xm > ym) {
      System.out.println("unreachable");
      assert (false);
    } else assert (true);
  }

  //@ requires true;
  //@ ensures Math.sin(x) + Math.cos(y) == 1 ==> System.out.println("eq");
  //@ ensures Math.sin(x) + Math.cos(y) != 1 ==> System.out.println("neq");
  public void test3(double x, double y) {
    if (Math.sin(x) + Math.cos(y) == 1) System.out.println("eq");
    else System.out.println("neq");
  }

  //@ requires true;
  //@ ensures x > 0 && y > 0 ==> \result == y + x;
  //@ ensures !(x > 0 && y > 0) ==> \result == y - x;
  public static int test4(int x, int y) {
    if (x > 0 && y > 0) {
      return y + x;
    } else {
      return y - x;
    }
  }

  //@ requires true;
  //@ ensures System.out.println("test1") && z <= 1200 ==> System.out.println("le 1200") && z >= 1200 ==> System.out.println("ge 1200") && b ==> System.out.println("b true") && !b ==> System.out.println("b false");
  public static void test1(int x, boolean b) {
    System.out.println("test1");
    Integer z = new Integer((int) x);
    if (z <= 1200) System.out.println("le 1200");
    if (z >= 1200) System.out.println("ge 1200");
    if (b) {
      System.out.println("b true");
    } else {
      System.out.println("b false");
    }
  }

  //@ requires true;
  //@ ensures x == x + z && x > z ==> System.out.println("unreachable") && x + 6 > 0 ==> System.out.println("br3") && !(x + 6 > 0) ==> System.out.println("br2");
  public void test(int x, int z) {
    // x = x >>> 1;
    x = x + z;
    if (x > z) {
      // if (z > x)
      System.out.println("unreachable");
      assert false;
    }
    if (x + 6 > 0) System.out.println("br3");
    else System.out.println("br2");
  }

  //@ requires true;
  //@ ensures System.out.println("in test2 " + x + " " + z) && z == z + 1 ==> System.out.println("branch2 FOO1") && x > 0 ==> System.out.println("branch2 BOO1") && !(x > 0) ==> System.out.println("branch2 BOO2");
  public void test2(int x, int z) {
    System.out.println("in test2 " + x + " " + z);
    x = z++;
    // z=5;
    if (z > 0) {
      System.out.println("branch2 FOO1");
    } else System.out.println("branch2 FOO2");
    if (x > 0) System.out.println("branch2 BOO1");
    else System.out.println("branch2 BOO2");
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe.java:23: error: incompatible types: void cannot be converted to boolean
  //@ ensures Math.sin(x) + Math.cos(y) == 1 ==> System.out.println("eq");
                                                                   ^
/home/max/Documents/JMLGPT/tmp/ExSymExe.java:24: error: incompatible types: void cannot be converted to boolean
  //@ ensures Math.sin(x) + Math.cos(y) != 1 ==> System.out.println("neq");
                                                                   ^
/home/max/Documents/JMLGPT/tmp/ExSymExe.java:42: error: 'void' type not allowed here
  //@ ensures System.out.println("test1") && z <= 1200 ==> System.out.println("le 1200") && z >= 1200 ==> System.out.println("ge 1200") && b ==> System.out.println("b true") && !b ==> System.out.println("b false");
                                ^
/home/max/Documents/JMLGPT/tmp/ExSymExe.java:42: error: cannot find symbol
  //@ ensures System.out.println("test1") && z <= 1200 ==> System.out.println("le 1200") && z >= 1200 ==> System.out.println("ge 1200") && b ==> System.out.println("b true") && !b ==> System.out.println("b false");
                                             ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe.java:42: error: 'void' type not allowed here
  //@ ensures System.out.println("test1") && z <= 1200 ==> System.out.println("le 1200") && z >= 1200 ==> System.out.println("ge 1200") && b ==> System.out.println("b true") && !b ==> System.out.println("b false");
                                                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExe.java:42: error: cannot find symbol
  //@ ensures System.out.println("test1") && z <= 1200 ==> System.out.println("le 1200") && z >= 1200 ==> System.out.println("ge 1200") && b ==> System.out.println("b true") && !b ==> System.out.println("b false");
                                                                                            ^
  symbol:   variable z
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe.java:42: error: 'void' type not allowed here
  //@ ensures System.out.println("test1") && z <= 1200 ==> System.out.println("le 1200") && z >= 1200 ==> System.out.println("ge 1200") && b ==> System.out.println("b true") && !b ==> System.out.println("b false");
                                                                                                                            ^
/home/max/Documents/JMLGPT/tmp/ExSymExe.java:42: error: 'void' type not allowed here
  //@ ensures System.out.println("test1") && z <= 1200 ==> System.out.println("le 1200") && z >= 1200 ==> System.out.println("ge 1200") && b ==> System.out.println("b true") && !b ==> System.out.println("b false");
                                                                                                                                                                   ^
/home/max/Documents/JMLGPT/tmp/ExSymExe.java:42: error: incompatible types: void cannot be converted to boolean
  //@ ensures System.out.println("test1") && z <= 1200 ==> System.out.println("le 1200") && z >= 1200 ==> System.out.println("ge 1200") && b ==> System.out.println("b true") && !b ==> System.out.println("b false");
                                                                                                                                                                                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe.java:56: error: 'void' type not allowed here
  //@ ensures x == x + z && x > z ==> System.out.println("unreachable") && x + 6 > 0 ==> System.out.println("br3") && !(x + 6 > 0) ==> System.out.println("br2");
                                                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExe.java:56: error: 'void' type not allowed here
  //@ ensures x == x + z && x > z ==> System.out.println("unreachable") && x + 6 > 0 ==> System.out.println("br3") && !(x + 6 > 0) ==> System.out.println("br2");
                                                                                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe.java:56: error: incompatible types: void cannot be converted to boolean
  //@ ensures x == x + z && x > z ==> System.out.println("unreachable") && x + 6 > 0 ==> System.out.println("br3") && !(x + 6 > 0) ==> System.out.println("br2");
                                                                                                                                                         ^
/home/max/Documents/JMLGPT/tmp/ExSymExe.java:70: error: 'void' type not allowed here
  //@ ensures System.out.println("in test2 " + x + " " + z) && z == z + 1 ==> System.out.println("branch2 FOO1") && x > 0 ==> System.out.println("branch2 BOO1") && !(x > 0) ==> System.out.println("branch2 BOO2");
                                ^
/home/max/Documents/JMLGPT/tmp/ExSymExe.java:70: error: 'void' type not allowed here
  //@ ensures System.out.println("in test2 " + x + " " + z) && z == z + 1 ==> System.out.println("branch2 FOO1") && x > 0 ==> System.out.println("branch2 BOO1") && !(x > 0) ==> System.out.println("branch2 BOO2");
                                                                                                ^
/home/max/Documents/JMLGPT/tmp/ExSymExe.java:70: error: 'void' type not allowed here
  //@ ensures System.out.println("in test2 " + x + " " + z) && z == z + 1 ==> System.out.println("branch2 FOO1") && x > 0 ==> System.out.println("branch2 BOO1") && !(x > 0) ==> System.out.println("branch2 BOO2");
                                                                                                                                                ^
/home/max/Documents/JMLGPT/tmp/ExSymExe.java:70: error: incompatible types: void cannot be converted to boolean
  //@ ensures System.out.println("in test2 " + x + " " + z) && z == z + 1 ==> System.out.println("branch2 FOO1") && x > 0 ==> System.out.println("branch2 BOO1") && !(x > 0) ==> System.out.println("branch2 BOO2");
                                                                                                                                                                                                   ^
Note: /home/max/Documents/JMLGPT/tmp/ExSymExe.java uses or overrides a deprecated API that is marked for removal.
Note: Recompile with -Xlint:removal for details.
16 errors

