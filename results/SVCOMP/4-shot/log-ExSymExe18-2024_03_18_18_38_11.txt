class Main {
  static int field;
  static int field2;

  //@ ensures \result ==> field == 9 && (\exists int x, int z, int r; x == 3 && z == 9 && r == 0);
  //@ ensures !\result ==> field != 9 || (\forall int x, int z, int r; x != 3 || z != 9 || r != 0);
  public static boolean f() {
    int x = 3;
    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }
  
  //@ requires x == 3 && z == 9 && r == 0;
  //@ ensures \result ==> z <= x && x <= r;
  //@ ensures !\result ==> z > x || x > r;
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe18");
    int y = 3;
    x = x * r;
    z = z * x;
    r = y * x;
    if (z > x) {
      System.out.println("branch FOO1");
      return false;
    } else System.out.println("branch FOO2");
    if (x > r) System.out.println("branch BOO1");
    else System.out.println("branch BOO2");
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:5: error: <identifier> expected
  //@ ensures \result ==> field == 9 && (\exists int x, int z, int r; x == 3 && z == 9 && r == 0);
                                                       ^
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:5: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures \result ==> field == 9 && (\exists int x, int z, int r; x == 3 && z == 9 && r == 0);
                                                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:5: error: ')' expected
  //@ ensures \result ==> field == 9 && (\exists int x, int z, int r; x == 3 && z == 9 && r == 0);
                                                                                                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:6: error: <identifier> expected
  //@ ensures !\result ==> field != 9 || (\forall int x, int z, int r; x != 3 || z != 9 || r != 0);
                                                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:6: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures !\result ==> field != 9 || (\forall int x, int z, int r; x != 3 || z != 9 || r != 0);
                                                         ^
/home/max/Documents/JMLGPT/tmp/ExSymExe18.java:6: error: ')' expected
  //@ ensures !\result ==> field != 9 || (\forall int x, int z, int r; x != 3 || z != 9 || r != 0);
                                                                                                  ^
6 errors

