class Main {
  static int field;
  static int field2;

  //@ requires x == 3;
  //@ ensures \result ==> field == 9;
  public static boolean f() {
    int x = 3; /* we want to specify in an annotation that this param should be symbolic */

    Main inst = new Main();
    field = 9;
    return inst.test(x, field, field2);
  }

  //@ requires x == 3;
  //@ requires z == field;
  //@ requires r == field2;
  //@ ensures \result ==> System.out.println("Testing ExSymExe21");
  //@ ensures \result ==> r == x + z;
  //@ ensures \result ==> z == x - 3 - 4;
  //@ ensures \result ==> (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2"));
  //@ ensures \result ==> (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe21");
    int y = 3;
    r = x + z;
    z = x - y - 4;
    if (r >= 99) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x >= z) System.out.println("branch BOO1");
    else {
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:5: error: cannot find symbol
  //@ requires x == 3;
               ^
  symbol:   variable x
  location: class Main
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:6: error: An identifier with package visibility may not be used in a ensures clause with public visibility
  //@ ensures \result ==> field == 9;
                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:16: error: An identifier with package visibility may not be used in a requires clause with public visibility
  //@ requires z == field;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:17: error: An identifier with package visibility may not be used in a requires clause with public visibility
  //@ requires r == field2;
                    ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:18: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> System.out.println("Testing ExSymExe21");
                                            ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:21: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2"));
                                                         ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:21: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> (r >= 99 ==> System.out.println("branch FOO1")) && (r < 99 ==> System.out.println("branch FOO2"));
                                                                                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe21.java:22: error: incompatible types: void cannot be converted to boolean
  //@ ensures \result ==> (x >= z ==> System.out.println("branch BOO1")) && (x < z ==> \result == false);
                                                        ^
8 errors

