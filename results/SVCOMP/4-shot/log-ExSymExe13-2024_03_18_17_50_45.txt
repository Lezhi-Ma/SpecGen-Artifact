class Main {
    static int field;
    static int field2;

    //@ requires arg >= 0;
    //@ ensures \result ==> field2 == 0;
    //@ ensures \result ==> (\forall int x, int z, int r; test(x, z, r); r < 99 ==> System.out.println("branch FOO1") && r >= 99 ==> System.out.println("branch FOO2") && (x < z ==> System.out.println("branch BOO1") && \result == false) || System.out.println("branch BOO2") && \result == true);
    public static boolean f(int arg) {
        if (arg < 0)
            return true;
        int x = arg;

        Main inst = new Main();
        field = 9;
        return inst.test(x, arg, field2);
    }

    //@ requires true;
    //@ ensures r == x + z && z == x - 3 - 4;
    //@ ensures r < 99 ==> System.out.println("branch FOO1");
    //@ ensures r >= 99 ==> System.out.println("branch FOO2");
    //@ ensures x < z ==> System.out.println("branch BOO1") && \result == false;
    //@ ensures x >= z ==> System.out.println("branch BOO2") && \result == true;
    public boolean test(int x, int z, int r) {
        System.out.println("Testing ExSymExe13");
        int y = 3;
        r = x + z;
        z = x - y - 4;
        if (r < 99) System.out.println("branch FOO1");
        else System.out.println("branch FOO2");
        if (x < z) {
            System.out.println("branch BOO1");
            return false;
        } else System.out.println("branch BOO2");

        return true;
    }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:7: error: <identifier> expected
    //@ ensures \result ==> (\forall int x, int z, int r; test(x, z, r); r < 99 ==> System.out.println("branch FOO1") && r >= 99 ==> System.out.println("branch FOO2") && (x < z ==> System.out.println("branch BOO1") && \result == false) || System.out.println("branch BOO2") && \result == true);
                                           ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:7: error: Expected a semicolon to separate the parts of a JML quantified expression
    //@ ensures \result ==> (\forall int x, int z, int r; test(x, z, r); r < 99 ==> System.out.println("branch FOO1") && r >= 99 ==> System.out.println("branch FOO2") && (x < z ==> System.out.println("branch BOO1") && \result == false) || System.out.println("branch BOO2") && \result == true);
                                            ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:7: error: ')' expected
    //@ ensures \result ==> (\forall int x, int z, int r; test(x, z, r); r < 99 ==> System.out.println("branch FOO1") && r >= 99 ==> System.out.println("branch FOO2") && (x < z ==> System.out.println("branch BOO1") && \result == false) || System.out.println("branch BOO2") && \result == true);
                                                                       ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:7: error: illegal start of type
    //@ ensures \result ==> (\forall int x, int z, int r; test(x, z, r); r < 99 ==> System.out.println("branch FOO1") && r >= 99 ==> System.out.println("branch FOO2") && (x < z ==> System.out.println("branch BOO1") && \result == false) || System.out.println("branch BOO2") && \result == true);
                                                                             ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:7: error: <identifier> expected
    //@ ensures \result ==> (\forall int x, int z, int r; test(x, z, r); r < 99 ==> System.out.println("branch FOO1") && r >= 99 ==> System.out.println("branch FOO2") && (x < z ==> System.out.println("branch BOO1") && \result == false) || System.out.println("branch BOO2") && \result == true);
                                                                                                      ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:7: error: illegal start of type
    //@ ensures \result ==> (\forall int x, int z, int r; test(x, z, r); r < 99 ==> System.out.println("branch FOO1") && r >= 99 ==> System.out.println("branch FOO2") && (x < z ==> System.out.println("branch BOO1") && \result == false) || System.out.println("branch BOO2") && \result == true);
                                                                                                       ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:7: error: ';' expected
    //@ ensures \result ==> (\forall int x, int z, int r; test(x, z, r); r < 99 ==> System.out.println("branch FOO1") && r >= 99 ==> System.out.println("branch FOO2") && (x < z ==> System.out.println("branch BOO1") && \result == false) || System.out.println("branch BOO2") && \result == true);
                                                                                                                     ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:7: error: > expected
    //@ ensures \result ==> (\forall int x, int z, int r; test(x, z, r); r < 99 ==> System.out.println("branch FOO1") && r >= 99 ==> System.out.println("branch FOO2") && (x < z ==> System.out.println("branch BOO1") && \result == false) || System.out.println("branch BOO2") && \result == true);
                                                                                                                                                                                ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:7: error: Token ==> does not introduce an expression
    //@ ensures \result ==> (\forall int x, int z, int r; test(x, z, r); r < 99 ==> System.out.println("branch FOO1") && r >= 99 ==> System.out.println("branch FOO2") && (x < z ==> System.out.println("branch BOO1") && \result == false) || System.out.println("branch BOO2") && \result == true);
                                                                                                                                                                                 ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:7: error: '(' expected
    //@ ensures \result ==> (\forall int x, int z, int r; test(x, z, r); r < 99 ==> System.out.println("branch FOO1") && r >= 99 ==> System.out.println("branch FOO2") && (x < z ==> System.out.println("branch BOO1") && \result == false) || System.out.println("branch BOO2") && \result == true);
                                                                                                                                                                                     ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:7: error: <identifier> expected
    //@ ensures \result ==> (\forall int x, int z, int r; test(x, z, r); r < 99 ==> System.out.println("branch FOO1") && r >= 99 ==> System.out.println("branch FOO2") && (x < z ==> System.out.println("branch BOO1") && \result == false) || System.out.println("branch BOO2") && \result == true);
                                                                                                                                                                                                       ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:7: error: illegal start of type
    //@ ensures \result ==> (\forall int x, int z, int r; test(x, z, r); r < 99 ==> System.out.println("branch FOO1") && r >= 99 ==> System.out.println("branch FOO2") && (x < z ==> System.out.println("branch BOO1") && \result == false) || System.out.println("branch BOO2") && \result == true);
                                                                                                                                                                                                        ^
/home/max/Documents/JMLGPT/tmp/ExSymExe13.java:7: error: ';' expected
    //@ ensures \result ==> (\forall int x, int z, int r; test(x, z, r); r < 99 ==> System.out.println("branch FOO1") && r >= 99 ==> System.out.println("branch FOO2") && (x < z ==> System.out.println("branch BOO1") && \result == false) || System.out.println("branch BOO2") && \result == true);
                                                                                                                                                                                                                      ^
13 errors

