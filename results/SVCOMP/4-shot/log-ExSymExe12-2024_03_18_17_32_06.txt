class Main {
  static int field;
  static int field2;

  //@ requires arg is symbolic;
  //@ ensures \result ==> (\exists int x, int z, int r; r == x + z && x == z - 3 && (z < x ==> \result == true) && (x < r ==> \result == false));
  public static boolean f(int arg) {
    int x = 3;

    Main inst = new Main();
    field = 9;
    if (arg < 0) return true;
    return inst.test(x, arg, field2);
  }

  //@ ensures \result ==> (\exists int x, int z, int r; r == x + z && x == z - 3 && (z < x ==> \result == true) && (x < r ==> \result == false));
  public boolean test(int x, int z, int r) {
    System.out.println("Testing ExSymExe12");
    int y = 3;
    r = x + z;
    x = z - y;
    z = r;
    if (z < x) System.out.println("branch FOO1");
    else System.out.println("branch FOO2");
    if (x < r) System.out.println("branch BOO1");
    else {
      System.out.println("branch BOO2");
      return false;
    }
    return true;
  }
}
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:5: error: Incorrectly formed or terminated requires statement near here
  //@ requires arg is symbolic;
                   ^
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:6: error: <identifier> expected
  //@ ensures \result ==> (\exists int x, int z, int r; r == x + z && x == z - 3 && (z < x ==> \result == true) && (x < r ==> \result == false));
                                         ^
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:6: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures \result ==> (\exists int x, int z, int r; r == x + z && x == z - 3 && (z < x ==> \result == true) && (x < r ==> \result == false));
                                          ^
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:16: error: <identifier> expected
  //@ ensures \result ==> (\exists int x, int z, int r; r == x + z && x == z - 3 && (z < x ==> \result == true) && (x < r ==> \result == false));
                                         ^
/home/max/Documents/JMLGPT/tmp/ExSymExe12.java:16: error: Expected a semicolon to separate the parts of a JML quantified expression
  //@ ensures \result ==> (\exists int x, int z, int r; r == x + z && x == z - 3 && (z < x ==> \result == true) && (x < r ==> \result == false));
                                          ^
5 errors

