public class MergeSortIterative {

  /////////////////////////////////////////
  // Iterative mergeSort
  /////////////////////////////////////////

  //@ requires a != null;
  //@ ensures isSorted(a);
  public static void iterativeMergesort(int[] a) {
    int[] aux = new int[a.length];
    for (int blockSize = 1; blockSize < a.length; blockSize *= 2)
      for (int start = 0; start < a.length; start += 2 * blockSize)
        merge(a, aux, start, start + blockSize, start + 2 * blockSize);
  }

  //@ requires a != null;
  //@ ensures isSorted(a);
  public static void iterativeMergesortWithoutCopy(int[] a) {
    int[] from = a, to = new int[a.length];
    for (int blockSize = 1; blockSize < a.length; blockSize *= 2) {
      for (int start = 0; start < a.length; start += 2 * blockSize)
        mergeWithoutCopy(from, to, start, start + blockSize, start + 2 * blockSize);
      int[] temp = from;
      from = to;
      to = temp;
    }
    if (a != from)
      // copy back
      for (int k = 0; k < a.length; k++) a[k] = from[k];
  }

  //@ requires from != null && to != null;
  //@ requires lo >= 0 && mid >= 0 && hi >= 0;
  //@ requires lo <= mid && mid <= hi;
  //@ requires hi <= from.length;
  //@ ensures isSorted(to, lo, hi);
  private static void mergeWithoutCopy(int[] from, int[] to, int lo, int mid, int hi) {
    if (mid > from.length) mid = from.length;
    if (hi > from.length) hi = from.length;
    int i = lo, j = mid;
    for (int k = lo; k < hi; k++) {
      if (i == mid) to[k] = from[j++];
      else if (j == hi) to[k] = from[i++];
      else if (from[j] < from[i]) to[k] = from[j++];
      else to[k] = from[i++];
    }
  }

  /////////////////////////////////////////
  // Recursive mergeSort, adapted from:
  // Sedgewick and Wayne, Introduction to Programming in Java
  // http://www.cs.princeton.edu/introcs/42sort/MergeSort.java.html
  /////////////////////////////////////////

  //@ requires a != null;
  //@ ensures isSorted(a);
  public static void recursiveMergesort(int[] a) {
    int n = a.length;
    int[] aux = new int[n];
    recursiveMergesort(a, aux, 0, n);
  }

  //@ requires a != null && aux != null;
  //@ requires lo >= 0 && hi >= 0;
  //@ requires lo <= hi && hi <= a.length;
  //@ ensures isSorted(a, lo, hi);
  private static void recursiveMergesort(int[] a, int[] aux, int lo, int hi) {
    if (hi - lo <= 1) return;
    int mid = lo + (hi - lo) / 2;
    recursiveMergesort(a, aux, lo, mid);
    recursiveMergesort(a, aux, mid, hi);
    merge(a, aux, lo, mid, hi);
  }

  //@ requires a != null;
  //@ requires lo >= 0 && hi >= 0;
  //@ requires lo <= hi && hi <= a.length;
  //@ ensures isSorted(a, lo, hi);
  private static void merge(int[] a, int[] aux, int lo, int mid, int hi) {
    if (mid >= a.length) return;
    if (hi > a.length) hi = a.length;
    int i = lo, j = mid;
    for (int k = lo; k < hi; k++) {
      if (i == mid) aux[k] = a[j++];
      else if (j == hi) aux[k] = a[i++];
      else if (a[j] < a[i]) aux[k] = a[j++];
      else aux[k] = a[i++];
    }
    for (int k = lo; k < hi; k++) a[k] = aux[k];
  }

  //@ requires a != null;
  //@ ensures \result == true <==> (\forall int i; 0 <= i && i < a.length - 1; a[i] <= a[i+1]);
  private static boolean isSorted(int[] a) {
    for (int i = 0; i < a.length - 1; i++) {
      if (a[i] > a[i + 1]) {
        return false;
      }
    }
    return true;
  }

  //@ requires a != null;
  //@ requires lo >= 0 && hi >= 0;
  //@ requires lo <= hi && hi <= a.length;
  //@ ensures \result == true <==> (\forall int i; lo <= i && i < hi - 1; a[i] <= a[i+1]);
  private static boolean isSorted(int[] a, int lo, int hi) {
    for (int i = lo; i < hi - 1; i++) {
      if (a[i] > a[i + 1]) {
        return false;
      }
    }
    return true;
  }
}
