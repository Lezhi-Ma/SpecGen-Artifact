public class BellmanFord {

    static final int INFINITY = Integer.MAX_VALUE;

    //@ requires N >= 0 && D != null && D.length == N*N && src >= 0 && src < N;
    //@ ensures \result.length == N;
    //@ ensures (\forall int i; 0 <= i && i < N; \result[i] == INFINITY && i != src ==> \result[i] == INFINITY);
    static int[] runBellmanFord(int N, int D[], int src) {
        int dist[] = new int[N];
        boolean infinite[] = new boolean[N];
        for (int i = 0; i < N; i++) {
            dist[i] = INFINITY;
            infinite[i] = true;
        }
        dist[src] = 0;
        infinite[src] = false;

        int k;
        //@ maintaining 0 <= k && k <= N;
        //@ maintaining (\forall int i; 0 <= i && i < N; \result[i] == INFINITY && i != src ==> \result[i] == INFINITY);
        //@ decreases N - k;
        for (k = 0; k < N; k++) {
            boolean relaxed = false;
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < N; j++) {
                    if (i == j) continue;
                    if (!infinite[i]) {
                        if (dist[j] > dist[i] + D[i * N + j]) {
                            dist[j] = dist[i] + D[i * N + j];
                            infinite[j] = false;
                            relaxed = true;
                        }
                    }
                }
            }
            if (!relaxed)
                break;
        }

        if (k == N) {
            // We relaxed during the N-th iteration, so there must be a negative-weight cycle.
        }

        return dist;
    }
}
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:20: error: A \result expression may not be in a loop_invariant clause
        //@ maintaining (\forall int i; 0 <= i && i < N; \result[i] == INFINITY && i != src ==> \result[i] == INFINITY);
                                                          ^
/home/max/Documents/JMLGPT/tmp/BellmanFord.java:20: error: A \result expression may not be in a loop_invariant clause
        //@ maintaining (\forall int i; 0 <= i && i < N; \result[i] == INFINITY && i != src ==> \result[i] == INFINITY);
                                                                                                 ^
2 errors

