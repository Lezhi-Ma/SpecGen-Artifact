class LinkedListEntry {
  public LinkedListEntry Next;
  public int Value;

  //@ public invariant Next != this;
}

class LinkedList {
  public LinkedListEntry Head;

  //@ ensures \result >= 0;
  public int size() {
    int count = 0;
    for (LinkedListEntry entry = Head; entry != null; entry = entry.Next) ++count;
    return count;
  }

  //@ requires index >= 0;
  public void add(int index, int e) {
    LinkedListEntry newEntry = new LinkedListEntry();
    newEntry.Value = e;
    if (index == 0) {
      Head = newEntry;
      return;
    }
    LinkedListEntry entry = Head;
    for (int i = 1; i < index; ++i) entry = entry.Next;
    entry.Next = newEntry;
  }

  public void add(int e) {
    add(size(), e);
  }

  //@ requires index >= 0;
  public void remove(int index) {
    LinkedListEntry entry = Head;
    for (int i = 1; i < index; ++i) entry = entry.Next;
    entry.Next = entry.Next.Next;
  }

  //@ requires index >= 0;
  //@ ensures \result == entry.Value;
  public int get(int index) {
    LinkedListEntry entry = Head;
    for (int i = 0; i < index; ++i) entry = entry.Next;
    return entry.Value;
  }
}

class Utils_nondet {
  //@ ensures \result != 0;
  public static int nondet_int() {
    return Verifier.nondetInt();
  }
}

class Utils_synthesis {
  //@ ensures \result >= aggregated;
  public static int accumulator(int aggregated, int e) {
    if (aggregated < e) return e;
    return aggregated;
  }

  //@ ensures \result;
  public static boolean predicate(int lhs) {
    return true;
  }
}
